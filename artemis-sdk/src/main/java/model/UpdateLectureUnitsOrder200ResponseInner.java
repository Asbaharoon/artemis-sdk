/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.AttachmentUnit;
import org.openapitools.client.model.Exercise;
import org.openapitools.client.model.ExerciseUnit;
import org.openapitools.client.model.LearningGoal;
import org.openapitools.client.model.Lecture;
import org.openapitools.client.model.OnlineUnit;
import org.openapitools.client.model.TextUnit;
import org.openapitools.client.model.VideoUnit;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class UpdateLectureUnitsOrder200ResponseInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(UpdateLectureUnitsOrder200ResponseInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateLectureUnitsOrder200ResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateLectureUnitsOrder200ResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AttachmentUnit> adapterAttachmentUnit = gson.getDelegateAdapter(this, TypeToken.get(AttachmentUnit.class));
            final TypeAdapter<ExerciseUnit> adapterExerciseUnit = gson.getDelegateAdapter(this, TypeToken.get(ExerciseUnit.class));
            final TypeAdapter<OnlineUnit> adapterOnlineUnit = gson.getDelegateAdapter(this, TypeToken.get(OnlineUnit.class));
            final TypeAdapter<TextUnit> adapterTextUnit = gson.getDelegateAdapter(this, TypeToken.get(TextUnit.class));
            final TypeAdapter<VideoUnit> adapterVideoUnit = gson.getDelegateAdapter(this, TypeToken.get(VideoUnit.class));

            return (TypeAdapter<T>) new TypeAdapter<UpdateLectureUnitsOrder200ResponseInner>() {
                @Override
                public void write(JsonWriter out, UpdateLectureUnitsOrder200ResponseInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AttachmentUnit`
                    if (value.getActualInstance() instanceof AttachmentUnit) {
                        JsonObject obj = adapterAttachmentUnit.toJsonTree((AttachmentUnit)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ExerciseUnit`
                    if (value.getActualInstance() instanceof ExerciseUnit) {
                        JsonObject obj = adapterExerciseUnit.toJsonTree((ExerciseUnit)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `OnlineUnit`
                    if (value.getActualInstance() instanceof OnlineUnit) {
                        JsonObject obj = adapterOnlineUnit.toJsonTree((OnlineUnit)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `TextUnit`
                    if (value.getActualInstance() instanceof TextUnit) {
                        JsonObject obj = adapterTextUnit.toJsonTree((TextUnit)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `VideoUnit`
                    if (value.getActualInstance() instanceof VideoUnit) {
                        JsonObject obj = adapterVideoUnit.toJsonTree((VideoUnit)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AttachmentUnit, ExerciseUnit, OnlineUnit, TextUnit, VideoUnit");
                }

                @Override
                public UpdateLectureUnitsOrder200ResponseInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AttachmentUnit
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AttachmentUnit.validateJsonObject(jsonObject);
                        actualAdapter = adapterAttachmentUnit;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AttachmentUnit'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AttachmentUnit failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AttachmentUnit'", e);
                    }

                    // deserialize ExerciseUnit
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ExerciseUnit.validateJsonObject(jsonObject);
                        actualAdapter = adapterExerciseUnit;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ExerciseUnit'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ExerciseUnit failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ExerciseUnit'", e);
                    }

                    // deserialize OnlineUnit
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OnlineUnit.validateJsonObject(jsonObject);
                        actualAdapter = adapterOnlineUnit;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OnlineUnit'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OnlineUnit failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OnlineUnit'", e);
                    }

                    // deserialize TextUnit
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TextUnit.validateJsonObject(jsonObject);
                        actualAdapter = adapterTextUnit;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TextUnit'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TextUnit failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TextUnit'", e);
                    }

                    // deserialize VideoUnit
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VideoUnit.validateJsonObject(jsonObject);
                        actualAdapter = adapterVideoUnit;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VideoUnit'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VideoUnit failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VideoUnit'", e);
                    }

                    if (match == 1) {
                        UpdateLectureUnitsOrder200ResponseInner ret = new UpdateLectureUnitsOrder200ResponseInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for UpdateLectureUnitsOrder200ResponseInner: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public UpdateLectureUnitsOrder200ResponseInner() {
        super("oneOf", Boolean.FALSE);
    }

    public UpdateLectureUnitsOrder200ResponseInner(AttachmentUnit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateLectureUnitsOrder200ResponseInner(ExerciseUnit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateLectureUnitsOrder200ResponseInner(OnlineUnit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateLectureUnitsOrder200ResponseInner(TextUnit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateLectureUnitsOrder200ResponseInner(VideoUnit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AttachmentUnit", new GenericType<AttachmentUnit>() {
        });
        schemas.put("ExerciseUnit", new GenericType<ExerciseUnit>() {
        });
        schemas.put("OnlineUnit", new GenericType<OnlineUnit>() {
        });
        schemas.put("TextUnit", new GenericType<TextUnit>() {
        });
        schemas.put("VideoUnit", new GenericType<VideoUnit>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return UpdateLectureUnitsOrder200ResponseInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AttachmentUnit, ExerciseUnit, OnlineUnit, TextUnit, VideoUnit
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AttachmentUnit) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExerciseUnit) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OnlineUnit) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TextUnit) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VideoUnit) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AttachmentUnit, ExerciseUnit, OnlineUnit, TextUnit, VideoUnit");
    }

    /**
     * Get the actual instance, which can be the following:
     * AttachmentUnit, ExerciseUnit, OnlineUnit, TextUnit, VideoUnit
     *
     * @return The actual instance (AttachmentUnit, ExerciseUnit, OnlineUnit, TextUnit, VideoUnit)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AttachmentUnit`. If the actual instance is not `AttachmentUnit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AttachmentUnit`
     * @throws ClassCastException if the instance is not `AttachmentUnit`
     */
    public AttachmentUnit getAttachmentUnit() throws ClassCastException {
        return (AttachmentUnit)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExerciseUnit`. If the actual instance is not `ExerciseUnit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExerciseUnit`
     * @throws ClassCastException if the instance is not `ExerciseUnit`
     */
    public ExerciseUnit getExerciseUnit() throws ClassCastException {
        return (ExerciseUnit)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OnlineUnit`. If the actual instance is not `OnlineUnit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OnlineUnit`
     * @throws ClassCastException if the instance is not `OnlineUnit`
     */
    public OnlineUnit getOnlineUnit() throws ClassCastException {
        return (OnlineUnit)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TextUnit`. If the actual instance is not `TextUnit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TextUnit`
     * @throws ClassCastException if the instance is not `TextUnit`
     */
    public TextUnit getTextUnit() throws ClassCastException {
        return (TextUnit)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VideoUnit`. If the actual instance is not `VideoUnit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VideoUnit`
     * @throws ClassCastException if the instance is not `VideoUnit`
     */
    public VideoUnit getVideoUnit() throws ClassCastException {
        return (VideoUnit)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateLectureUnitsOrder200ResponseInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with AttachmentUnit
    try {
      AttachmentUnit.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AttachmentUnit failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExerciseUnit
    try {
      ExerciseUnit.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExerciseUnit failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with OnlineUnit
    try {
      OnlineUnit.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for OnlineUnit failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TextUnit
    try {
      TextUnit.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TextUnit failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with VideoUnit
    try {
      VideoUnit.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for VideoUnit failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for UpdateLectureUnitsOrder200ResponseInner with oneOf schemas: AttachmentUnit, ExerciseUnit, OnlineUnit, TextUnit, VideoUnit. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of UpdateLectureUnitsOrder200ResponseInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateLectureUnitsOrder200ResponseInner
  * @throws IOException if the JSON string is invalid with respect to UpdateLectureUnitsOrder200ResponseInner
  */
  public static UpdateLectureUnitsOrder200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLectureUnitsOrder200ResponseInner.class);
  }

 /**
  * Convert an instance of UpdateLectureUnitsOrder200ResponseInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

