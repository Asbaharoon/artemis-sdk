/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Course;
import org.openapitools.client.model.GetExercise200Response;
import org.openapitools.client.model.LearningGoalProgress;
import org.openapitools.client.model.LectureUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LearningGoal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class LearningGoal {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MASTERY_THRESHOLD = "masteryThreshold";
  @SerializedName(SERIALIZED_NAME_MASTERY_THRESHOLD)
  private Integer masteryThreshold;

  /**
   * Gets or Sets taxonomy
   */
  @JsonAdapter(TaxonomyEnum.Adapter.class)
  public enum TaxonomyEnum {
    REMEMBER("REMEMBER"),
    
    UNDERSTAND("UNDERSTAND"),
    
    APPLY("APPLY"),
    
    ANALYZE("ANALYZE"),
    
    EVALUATE("EVALUATE"),
    
    CREATE("CREATE");

    private String value;

    TaxonomyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxonomyEnum fromValue(String value) {
      for (TaxonomyEnum b : TaxonomyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxonomyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxonomyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxonomyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxonomyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TAXONOMY = "taxonomy";
  @SerializedName(SERIALIZED_NAME_TAXONOMY)
  private TaxonomyEnum taxonomy;

  public static final String SERIALIZED_NAME_COURSE = "course";
  @SerializedName(SERIALIZED_NAME_COURSE)
  private Course course;

  public static final String SERIALIZED_NAME_EXERCISES = "exercises";
  @SerializedName(SERIALIZED_NAME_EXERCISES)
  private Set<GetExercise200Response> exercises = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_LECTURE_UNITS = "lectureUnits";
  @SerializedName(SERIALIZED_NAME_LECTURE_UNITS)
  private Set<LectureUnit> lectureUnits = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CONSECUTIVE_COURSES = "consecutiveCourses";
  @SerializedName(SERIALIZED_NAME_CONSECUTIVE_COURSES)
  private Set<Course> consecutiveCourses = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_USER_PROGRESS = "userProgress";
  @SerializedName(SERIALIZED_NAME_USER_PROGRESS)
  private Set<LearningGoalProgress> userProgress = new LinkedHashSet<>();

  public LearningGoal() {
  }

  public LearningGoal id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public LearningGoal title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public LearningGoal description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public LearningGoal masteryThreshold(Integer masteryThreshold) {
    
    this.masteryThreshold = masteryThreshold;
    return this;
  }

   /**
   * Get masteryThreshold
   * @return masteryThreshold
  **/
  @javax.annotation.Nullable

  public Integer getMasteryThreshold() {
    return masteryThreshold;
  }


  public void setMasteryThreshold(Integer masteryThreshold) {
    this.masteryThreshold = masteryThreshold;
  }


  public LearningGoal taxonomy(TaxonomyEnum taxonomy) {
    
    this.taxonomy = taxonomy;
    return this;
  }

   /**
   * Get taxonomy
   * @return taxonomy
  **/
  @javax.annotation.Nullable

  public TaxonomyEnum getTaxonomy() {
    return taxonomy;
  }


  public void setTaxonomy(TaxonomyEnum taxonomy) {
    this.taxonomy = taxonomy;
  }


  public LearningGoal course(Course course) {
    
    this.course = course;
    return this;
  }

   /**
   * Get course
   * @return course
  **/
  @javax.annotation.Nullable

  public Course getCourse() {
    return course;
  }


  public void setCourse(Course course) {
    this.course = course;
  }


  public LearningGoal exercises(Set<GetExercise200Response> exercises) {
    
    this.exercises = exercises;
    return this;
  }

  public LearningGoal addExercisesItem(GetExercise200Response exercisesItem) {
    if (this.exercises == null) {
      this.exercises = new LinkedHashSet<>();
    }
    this.exercises.add(exercisesItem);
    return this;
  }

   /**
   * Get exercises
   * @return exercises
  **/
  @javax.annotation.Nullable

  public Set<GetExercise200Response> getExercises() {
    return exercises;
  }


  public void setExercises(Set<GetExercise200Response> exercises) {
    this.exercises = exercises;
  }


  public LearningGoal lectureUnits(Set<LectureUnit> lectureUnits) {
    
    this.lectureUnits = lectureUnits;
    return this;
  }

  public LearningGoal addLectureUnitsItem(LectureUnit lectureUnitsItem) {
    if (this.lectureUnits == null) {
      this.lectureUnits = new LinkedHashSet<>();
    }
    this.lectureUnits.add(lectureUnitsItem);
    return this;
  }

   /**
   * Get lectureUnits
   * @return lectureUnits
  **/
  @javax.annotation.Nullable

  public Set<LectureUnit> getLectureUnits() {
    return lectureUnits;
  }


  public void setLectureUnits(Set<LectureUnit> lectureUnits) {
    this.lectureUnits = lectureUnits;
  }


  public LearningGoal consecutiveCourses(Set<Course> consecutiveCourses) {
    
    this.consecutiveCourses = consecutiveCourses;
    return this;
  }

  public LearningGoal addConsecutiveCoursesItem(Course consecutiveCoursesItem) {
    if (this.consecutiveCourses == null) {
      this.consecutiveCourses = new LinkedHashSet<>();
    }
    this.consecutiveCourses.add(consecutiveCoursesItem);
    return this;
  }

   /**
   * Get consecutiveCourses
   * @return consecutiveCourses
  **/
  @javax.annotation.Nullable

  public Set<Course> getConsecutiveCourses() {
    return consecutiveCourses;
  }


  public void setConsecutiveCourses(Set<Course> consecutiveCourses) {
    this.consecutiveCourses = consecutiveCourses;
  }


  public LearningGoal userProgress(Set<LearningGoalProgress> userProgress) {
    
    this.userProgress = userProgress;
    return this;
  }

  public LearningGoal addUserProgressItem(LearningGoalProgress userProgressItem) {
    if (this.userProgress == null) {
      this.userProgress = new LinkedHashSet<>();
    }
    this.userProgress.add(userProgressItem);
    return this;
  }

   /**
   * Get userProgress
   * @return userProgress
  **/
  @javax.annotation.Nullable

  public Set<LearningGoalProgress> getUserProgress() {
    return userProgress;
  }


  public void setUserProgress(Set<LearningGoalProgress> userProgress) {
    this.userProgress = userProgress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LearningGoal learningGoal = (LearningGoal) o;
    return Objects.equals(this.id, learningGoal.id) &&
        Objects.equals(this.title, learningGoal.title) &&
        Objects.equals(this.description, learningGoal.description) &&
        Objects.equals(this.masteryThreshold, learningGoal.masteryThreshold) &&
        Objects.equals(this.taxonomy, learningGoal.taxonomy) &&
        Objects.equals(this.course, learningGoal.course) &&
        Objects.equals(this.exercises, learningGoal.exercises) &&
        Objects.equals(this.lectureUnits, learningGoal.lectureUnits) &&
        Objects.equals(this.consecutiveCourses, learningGoal.consecutiveCourses) &&
        Objects.equals(this.userProgress, learningGoal.userProgress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, description, masteryThreshold, taxonomy, course, exercises, lectureUnits, consecutiveCourses, userProgress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LearningGoal {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    masteryThreshold: ").append(toIndentedString(masteryThreshold)).append("\n");
    sb.append("    taxonomy: ").append(toIndentedString(taxonomy)).append("\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    exercises: ").append(toIndentedString(exercises)).append("\n");
    sb.append("    lectureUnits: ").append(toIndentedString(lectureUnits)).append("\n");
    sb.append("    consecutiveCourses: ").append(toIndentedString(consecutiveCourses)).append("\n");
    sb.append("    userProgress: ").append(toIndentedString(userProgress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("masteryThreshold");
    openapiFields.add("taxonomy");
    openapiFields.add("course");
    openapiFields.add("exercises");
    openapiFields.add("lectureUnits");
    openapiFields.add("consecutiveCourses");
    openapiFields.add("userProgress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LearningGoal
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LearningGoal.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LearningGoal is not found in the empty JSON string", LearningGoal.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LearningGoal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LearningGoal` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("taxonomy") != null && !jsonObj.get("taxonomy").isJsonNull()) && !jsonObj.get("taxonomy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxonomy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxonomy").toString()));
      }
      // validate the optional field `course`
      if (jsonObj.get("course") != null && !jsonObj.get("course").isJsonNull()) {
        Course.validateJsonObject(jsonObj.getAsJsonObject("course"));
      }
      if (jsonObj.get("exercises") != null && !jsonObj.get("exercises").isJsonNull()) {
        JsonArray jsonArrayexercises = jsonObj.getAsJsonArray("exercises");
        if (jsonArrayexercises != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exercises").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exercises` to be an array in the JSON string but got `%s`", jsonObj.get("exercises").toString()));
          }

          // validate the optional field `exercises` (array)
          for (int i = 0; i < jsonArrayexercises.size(); i++) {
            GetExercise200Response.validateJsonObject(jsonArrayexercises.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("lectureUnits") != null && !jsonObj.get("lectureUnits").isJsonNull()) {
        JsonArray jsonArraylectureUnits = jsonObj.getAsJsonArray("lectureUnits");
        if (jsonArraylectureUnits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lectureUnits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lectureUnits` to be an array in the JSON string but got `%s`", jsonObj.get("lectureUnits").toString()));
          }

          // validate the optional field `lectureUnits` (array)
          for (int i = 0; i < jsonArraylectureUnits.size(); i++) {
            LectureUnit.validateJsonObject(jsonArraylectureUnits.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("consecutiveCourses") != null && !jsonObj.get("consecutiveCourses").isJsonNull()) {
        JsonArray jsonArrayconsecutiveCourses = jsonObj.getAsJsonArray("consecutiveCourses");
        if (jsonArrayconsecutiveCourses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("consecutiveCourses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `consecutiveCourses` to be an array in the JSON string but got `%s`", jsonObj.get("consecutiveCourses").toString()));
          }

          // validate the optional field `consecutiveCourses` (array)
          for (int i = 0; i < jsonArrayconsecutiveCourses.size(); i++) {
            Course.validateJsonObject(jsonArrayconsecutiveCourses.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("userProgress") != null && !jsonObj.get("userProgress").isJsonNull()) {
        JsonArray jsonArrayuserProgress = jsonObj.getAsJsonArray("userProgress");
        if (jsonArrayuserProgress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userProgress").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userProgress` to be an array in the JSON string but got `%s`", jsonObj.get("userProgress").toString()));
          }

          // validate the optional field `userProgress` (array)
          for (int i = 0; i < jsonArrayuserProgress.size(); i++) {
            LearningGoalProgress.validateJsonObject(jsonArrayuserProgress.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LearningGoal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LearningGoal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LearningGoal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LearningGoal.class));

       return (TypeAdapter<T>) new TypeAdapter<LearningGoal>() {
           @Override
           public void write(JsonWriter out, LearningGoal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LearningGoal read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LearningGoal given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LearningGoal
  * @throws IOException if the JSON string is invalid with respect to LearningGoal
  */
  public static LearningGoal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LearningGoal.class);
  }

 /**
  * Convert an instance of LearningGoal to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

