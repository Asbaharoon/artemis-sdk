/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.QuizQuestionStatistic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QuizQuestion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class QuizQuestion {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_HINT = "hint";
  @SerializedName(SERIALIZED_NAME_HINT)
  private String hint;

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private String explanation;

  public static final String SERIALIZED_NAME_POINTS = "points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  private Integer points;

  /**
   * Gets or Sets scoringType
   */
  @JsonAdapter(ScoringTypeEnum.Adapter.class)
  public enum ScoringTypeEnum {
    ALL_OR_NOTHING("ALL_OR_NOTHING"),
    
    PROPORTIONAL_WITH_PENALTY("PROPORTIONAL_WITH_PENALTY"),
    
    PROPORTIONAL_WITHOUT_PENALTY("PROPORTIONAL_WITHOUT_PENALTY");

    private String value;

    ScoringTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScoringTypeEnum fromValue(String value) {
      for (ScoringTypeEnum b : ScoringTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScoringTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScoringTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScoringTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScoringTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCORING_TYPE = "scoringType";
  @SerializedName(SERIALIZED_NAME_SCORING_TYPE)
  private ScoringTypeEnum scoringType;

  public static final String SERIALIZED_NAME_RANDOMIZE_ORDER = "randomizeOrder";
  @SerializedName(SERIALIZED_NAME_RANDOMIZE_ORDER)
  private Boolean randomizeOrder;

  public static final String SERIALIZED_NAME_INVALID = "invalid";
  @SerializedName(SERIALIZED_NAME_INVALID)
  private Boolean invalid;

  public static final String SERIALIZED_NAME_QUIZ_QUESTION_STATISTIC = "quizQuestionStatistic";
  @SerializedName(SERIALIZED_NAME_QUIZ_QUESTION_STATISTIC)
  private QuizQuestionStatistic quizQuestionStatistic;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected String type;

  public QuizQuestion() {
    this.type = this.getClass().getSimpleName();
  }

  public QuizQuestion id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public QuizQuestion title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public QuizQuestion text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nullable

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  public QuizQuestion hint(String hint) {
    
    this.hint = hint;
    return this;
  }

   /**
   * Get hint
   * @return hint
  **/
  @javax.annotation.Nullable

  public String getHint() {
    return hint;
  }


  public void setHint(String hint) {
    this.hint = hint;
  }


  public QuizQuestion explanation(String explanation) {
    
    this.explanation = explanation;
    return this;
  }

   /**
   * Get explanation
   * @return explanation
  **/
  @javax.annotation.Nullable

  public String getExplanation() {
    return explanation;
  }


  public void setExplanation(String explanation) {
    this.explanation = explanation;
  }


  public QuizQuestion points(Integer points) {
    
    this.points = points;
    return this;
  }

   /**
   * Get points
   * @return points
  **/
  @javax.annotation.Nullable

  public Integer getPoints() {
    return points;
  }


  public void setPoints(Integer points) {
    this.points = points;
  }


  public QuizQuestion scoringType(ScoringTypeEnum scoringType) {
    
    this.scoringType = scoringType;
    return this;
  }

   /**
   * Get scoringType
   * @return scoringType
  **/
  @javax.annotation.Nullable

  public ScoringTypeEnum getScoringType() {
    return scoringType;
  }


  public void setScoringType(ScoringTypeEnum scoringType) {
    this.scoringType = scoringType;
  }


  public QuizQuestion randomizeOrder(Boolean randomizeOrder) {
    
    this.randomizeOrder = randomizeOrder;
    return this;
  }

   /**
   * Get randomizeOrder
   * @return randomizeOrder
  **/
  @javax.annotation.Nullable

  public Boolean getRandomizeOrder() {
    return randomizeOrder;
  }


  public void setRandomizeOrder(Boolean randomizeOrder) {
    this.randomizeOrder = randomizeOrder;
  }


  public QuizQuestion invalid(Boolean invalid) {
    
    this.invalid = invalid;
    return this;
  }

   /**
   * Get invalid
   * @return invalid
  **/
  @javax.annotation.Nullable

  public Boolean getInvalid() {
    return invalid;
  }


  public void setInvalid(Boolean invalid) {
    this.invalid = invalid;
  }


  public QuizQuestion quizQuestionStatistic(QuizQuestionStatistic quizQuestionStatistic) {
    
    this.quizQuestionStatistic = quizQuestionStatistic;
    return this;
  }

   /**
   * Get quizQuestionStatistic
   * @return quizQuestionStatistic
  **/
  @javax.annotation.Nullable

  public QuizQuestionStatistic getQuizQuestionStatistic() {
    return quizQuestionStatistic;
  }


  public void setQuizQuestionStatistic(QuizQuestionStatistic quizQuestionStatistic) {
    this.quizQuestionStatistic = quizQuestionStatistic;
  }


  public QuizQuestion type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuizQuestion quizQuestion = (QuizQuestion) o;
    return Objects.equals(this.id, quizQuestion.id) &&
        Objects.equals(this.title, quizQuestion.title) &&
        Objects.equals(this.text, quizQuestion.text) &&
        Objects.equals(this.hint, quizQuestion.hint) &&
        Objects.equals(this.explanation, quizQuestion.explanation) &&
        Objects.equals(this.points, quizQuestion.points) &&
        Objects.equals(this.scoringType, quizQuestion.scoringType) &&
        Objects.equals(this.randomizeOrder, quizQuestion.randomizeOrder) &&
        Objects.equals(this.invalid, quizQuestion.invalid) &&
        Objects.equals(this.quizQuestionStatistic, quizQuestion.quizQuestionStatistic) &&
        Objects.equals(this.type, quizQuestion.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, text, hint, explanation, points, scoringType, randomizeOrder, invalid, quizQuestionStatistic, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuizQuestion {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    hint: ").append(toIndentedString(hint)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    scoringType: ").append(toIndentedString(scoringType)).append("\n");
    sb.append("    randomizeOrder: ").append(toIndentedString(randomizeOrder)).append("\n");
    sb.append("    invalid: ").append(toIndentedString(invalid)).append("\n");
    sb.append("    quizQuestionStatistic: ").append(toIndentedString(quizQuestionStatistic)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("text");
    openapiFields.add("hint");
    openapiFields.add("explanation");
    openapiFields.add("points");
    openapiFields.add("scoringType");
    openapiFields.add("randomizeOrder");
    openapiFields.add("invalid");
    openapiFields.add("quizQuestionStatistic");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to QuizQuestion
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!QuizQuestion.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuizQuestion is not found in the empty JSON string", QuizQuestion.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!QuizQuestion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuizQuestion` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QuizQuestion.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuizQuestion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuizQuestion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuizQuestion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuizQuestion.class));

       return (TypeAdapter<T>) new TypeAdapter<QuizQuestion>() {
           @Override
           public void write(JsonWriter out, QuizQuestion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuizQuestion read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QuizQuestion given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QuizQuestion
  * @throws IOException if the JSON string is invalid with respect to QuizQuestion
  */
  public static QuizQuestion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuizQuestion.class);
  }

 /**
  * Convert an instance of QuizQuestion to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

