/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExamChecklistDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ExamChecklistDTO {
  public static final String SERIALIZED_NAME_NUMBER_OF_GENERATED_STUDENT_EXAMS = "numberOfGeneratedStudentExams";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_GENERATED_STUDENT_EXAMS)
  private Long numberOfGeneratedStudentExams;

  public static final String SERIALIZED_NAME_NUMBER_OF_TEST_RUNS = "numberOfTestRuns";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_TEST_RUNS)
  private Long numberOfTestRuns;

  public static final String SERIALIZED_NAME_NUMBER_OF_TOTAL_EXAM_ASSESSMENTS_FINISHED_BY_CORRECTION_ROUND = "numberOfTotalExamAssessmentsFinishedByCorrectionRound";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_TOTAL_EXAM_ASSESSMENTS_FINISHED_BY_CORRECTION_ROUND)
  private List<Long> numberOfTotalExamAssessmentsFinishedByCorrectionRound = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_TOTAL_PARTICIPATIONS_FOR_ASSESSMENT = "numberOfTotalParticipationsForAssessment";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_TOTAL_PARTICIPATIONS_FOR_ASSESSMENT)
  private Long numberOfTotalParticipationsForAssessment;

  public static final String SERIALIZED_NAME_NUMBER_OF_EXAMS_SUBMITTED = "numberOfExamsSubmitted";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_EXAMS_SUBMITTED)
  private Long numberOfExamsSubmitted;

  public static final String SERIALIZED_NAME_NUMBER_OF_EXAMS_STARTED = "numberOfExamsStarted";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_EXAMS_STARTED)
  private Long numberOfExamsStarted;

  public static final String SERIALIZED_NAME_NUMBER_OF_ALL_COMPLAINTS = "numberOfAllComplaints";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ALL_COMPLAINTS)
  private Long numberOfAllComplaints;

  public static final String SERIALIZED_NAME_NUMBER_OF_ALL_COMPLAINTS_DONE = "numberOfAllComplaintsDone";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ALL_COMPLAINTS_DONE)
  private Long numberOfAllComplaintsDone;

  public static final String SERIALIZED_NAME_ALL_EXAM_EXERCISES_ALL_STUDENTS_PREPARED = "allExamExercisesAllStudentsPrepared";
  @SerializedName(SERIALIZED_NAME_ALL_EXAM_EXERCISES_ALL_STUDENTS_PREPARED)
  private Boolean allExamExercisesAllStudentsPrepared;

  public ExamChecklistDTO() {
  }

  public ExamChecklistDTO numberOfGeneratedStudentExams(Long numberOfGeneratedStudentExams) {
    
    this.numberOfGeneratedStudentExams = numberOfGeneratedStudentExams;
    return this;
  }

   /**
   * Get numberOfGeneratedStudentExams
   * @return numberOfGeneratedStudentExams
  **/
  @javax.annotation.Nullable

  public Long getNumberOfGeneratedStudentExams() {
    return numberOfGeneratedStudentExams;
  }


  public void setNumberOfGeneratedStudentExams(Long numberOfGeneratedStudentExams) {
    this.numberOfGeneratedStudentExams = numberOfGeneratedStudentExams;
  }


  public ExamChecklistDTO numberOfTestRuns(Long numberOfTestRuns) {
    
    this.numberOfTestRuns = numberOfTestRuns;
    return this;
  }

   /**
   * Get numberOfTestRuns
   * @return numberOfTestRuns
  **/
  @javax.annotation.Nullable

  public Long getNumberOfTestRuns() {
    return numberOfTestRuns;
  }


  public void setNumberOfTestRuns(Long numberOfTestRuns) {
    this.numberOfTestRuns = numberOfTestRuns;
  }


  public ExamChecklistDTO numberOfTotalExamAssessmentsFinishedByCorrectionRound(List<Long> numberOfTotalExamAssessmentsFinishedByCorrectionRound) {
    
    this.numberOfTotalExamAssessmentsFinishedByCorrectionRound = numberOfTotalExamAssessmentsFinishedByCorrectionRound;
    return this;
  }

  public ExamChecklistDTO addNumberOfTotalExamAssessmentsFinishedByCorrectionRoundItem(Long numberOfTotalExamAssessmentsFinishedByCorrectionRoundItem) {
    if (this.numberOfTotalExamAssessmentsFinishedByCorrectionRound == null) {
      this.numberOfTotalExamAssessmentsFinishedByCorrectionRound = new ArrayList<>();
    }
    this.numberOfTotalExamAssessmentsFinishedByCorrectionRound.add(numberOfTotalExamAssessmentsFinishedByCorrectionRoundItem);
    return this;
  }

   /**
   * Get numberOfTotalExamAssessmentsFinishedByCorrectionRound
   * @return numberOfTotalExamAssessmentsFinishedByCorrectionRound
  **/
  @javax.annotation.Nullable

  public List<Long> getNumberOfTotalExamAssessmentsFinishedByCorrectionRound() {
    return numberOfTotalExamAssessmentsFinishedByCorrectionRound;
  }


  public void setNumberOfTotalExamAssessmentsFinishedByCorrectionRound(List<Long> numberOfTotalExamAssessmentsFinishedByCorrectionRound) {
    this.numberOfTotalExamAssessmentsFinishedByCorrectionRound = numberOfTotalExamAssessmentsFinishedByCorrectionRound;
  }


  public ExamChecklistDTO numberOfTotalParticipationsForAssessment(Long numberOfTotalParticipationsForAssessment) {
    
    this.numberOfTotalParticipationsForAssessment = numberOfTotalParticipationsForAssessment;
    return this;
  }

   /**
   * Get numberOfTotalParticipationsForAssessment
   * @return numberOfTotalParticipationsForAssessment
  **/
  @javax.annotation.Nullable

  public Long getNumberOfTotalParticipationsForAssessment() {
    return numberOfTotalParticipationsForAssessment;
  }


  public void setNumberOfTotalParticipationsForAssessment(Long numberOfTotalParticipationsForAssessment) {
    this.numberOfTotalParticipationsForAssessment = numberOfTotalParticipationsForAssessment;
  }


  public ExamChecklistDTO numberOfExamsSubmitted(Long numberOfExamsSubmitted) {
    
    this.numberOfExamsSubmitted = numberOfExamsSubmitted;
    return this;
  }

   /**
   * Get numberOfExamsSubmitted
   * @return numberOfExamsSubmitted
  **/
  @javax.annotation.Nullable

  public Long getNumberOfExamsSubmitted() {
    return numberOfExamsSubmitted;
  }


  public void setNumberOfExamsSubmitted(Long numberOfExamsSubmitted) {
    this.numberOfExamsSubmitted = numberOfExamsSubmitted;
  }


  public ExamChecklistDTO numberOfExamsStarted(Long numberOfExamsStarted) {
    
    this.numberOfExamsStarted = numberOfExamsStarted;
    return this;
  }

   /**
   * Get numberOfExamsStarted
   * @return numberOfExamsStarted
  **/
  @javax.annotation.Nullable

  public Long getNumberOfExamsStarted() {
    return numberOfExamsStarted;
  }


  public void setNumberOfExamsStarted(Long numberOfExamsStarted) {
    this.numberOfExamsStarted = numberOfExamsStarted;
  }


  public ExamChecklistDTO numberOfAllComplaints(Long numberOfAllComplaints) {
    
    this.numberOfAllComplaints = numberOfAllComplaints;
    return this;
  }

   /**
   * Get numberOfAllComplaints
   * @return numberOfAllComplaints
  **/
  @javax.annotation.Nullable

  public Long getNumberOfAllComplaints() {
    return numberOfAllComplaints;
  }


  public void setNumberOfAllComplaints(Long numberOfAllComplaints) {
    this.numberOfAllComplaints = numberOfAllComplaints;
  }


  public ExamChecklistDTO numberOfAllComplaintsDone(Long numberOfAllComplaintsDone) {
    
    this.numberOfAllComplaintsDone = numberOfAllComplaintsDone;
    return this;
  }

   /**
   * Get numberOfAllComplaintsDone
   * @return numberOfAllComplaintsDone
  **/
  @javax.annotation.Nullable

  public Long getNumberOfAllComplaintsDone() {
    return numberOfAllComplaintsDone;
  }


  public void setNumberOfAllComplaintsDone(Long numberOfAllComplaintsDone) {
    this.numberOfAllComplaintsDone = numberOfAllComplaintsDone;
  }


  public ExamChecklistDTO allExamExercisesAllStudentsPrepared(Boolean allExamExercisesAllStudentsPrepared) {
    
    this.allExamExercisesAllStudentsPrepared = allExamExercisesAllStudentsPrepared;
    return this;
  }

   /**
   * Get allExamExercisesAllStudentsPrepared
   * @return allExamExercisesAllStudentsPrepared
  **/
  @javax.annotation.Nullable

  public Boolean getAllExamExercisesAllStudentsPrepared() {
    return allExamExercisesAllStudentsPrepared;
  }


  public void setAllExamExercisesAllStudentsPrepared(Boolean allExamExercisesAllStudentsPrepared) {
    this.allExamExercisesAllStudentsPrepared = allExamExercisesAllStudentsPrepared;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExamChecklistDTO examChecklistDTO = (ExamChecklistDTO) o;
    return Objects.equals(this.numberOfGeneratedStudentExams, examChecklistDTO.numberOfGeneratedStudentExams) &&
        Objects.equals(this.numberOfTestRuns, examChecklistDTO.numberOfTestRuns) &&
        Objects.equals(this.numberOfTotalExamAssessmentsFinishedByCorrectionRound, examChecklistDTO.numberOfTotalExamAssessmentsFinishedByCorrectionRound) &&
        Objects.equals(this.numberOfTotalParticipationsForAssessment, examChecklistDTO.numberOfTotalParticipationsForAssessment) &&
        Objects.equals(this.numberOfExamsSubmitted, examChecklistDTO.numberOfExamsSubmitted) &&
        Objects.equals(this.numberOfExamsStarted, examChecklistDTO.numberOfExamsStarted) &&
        Objects.equals(this.numberOfAllComplaints, examChecklistDTO.numberOfAllComplaints) &&
        Objects.equals(this.numberOfAllComplaintsDone, examChecklistDTO.numberOfAllComplaintsDone) &&
        Objects.equals(this.allExamExercisesAllStudentsPrepared, examChecklistDTO.allExamExercisesAllStudentsPrepared);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numberOfGeneratedStudentExams, numberOfTestRuns, numberOfTotalExamAssessmentsFinishedByCorrectionRound, numberOfTotalParticipationsForAssessment, numberOfExamsSubmitted, numberOfExamsStarted, numberOfAllComplaints, numberOfAllComplaintsDone, allExamExercisesAllStudentsPrepared);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExamChecklistDTO {\n");
    sb.append("    numberOfGeneratedStudentExams: ").append(toIndentedString(numberOfGeneratedStudentExams)).append("\n");
    sb.append("    numberOfTestRuns: ").append(toIndentedString(numberOfTestRuns)).append("\n");
    sb.append("    numberOfTotalExamAssessmentsFinishedByCorrectionRound: ").append(toIndentedString(numberOfTotalExamAssessmentsFinishedByCorrectionRound)).append("\n");
    sb.append("    numberOfTotalParticipationsForAssessment: ").append(toIndentedString(numberOfTotalParticipationsForAssessment)).append("\n");
    sb.append("    numberOfExamsSubmitted: ").append(toIndentedString(numberOfExamsSubmitted)).append("\n");
    sb.append("    numberOfExamsStarted: ").append(toIndentedString(numberOfExamsStarted)).append("\n");
    sb.append("    numberOfAllComplaints: ").append(toIndentedString(numberOfAllComplaints)).append("\n");
    sb.append("    numberOfAllComplaintsDone: ").append(toIndentedString(numberOfAllComplaintsDone)).append("\n");
    sb.append("    allExamExercisesAllStudentsPrepared: ").append(toIndentedString(allExamExercisesAllStudentsPrepared)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numberOfGeneratedStudentExams");
    openapiFields.add("numberOfTestRuns");
    openapiFields.add("numberOfTotalExamAssessmentsFinishedByCorrectionRound");
    openapiFields.add("numberOfTotalParticipationsForAssessment");
    openapiFields.add("numberOfExamsSubmitted");
    openapiFields.add("numberOfExamsStarted");
    openapiFields.add("numberOfAllComplaints");
    openapiFields.add("numberOfAllComplaintsDone");
    openapiFields.add("allExamExercisesAllStudentsPrepared");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExamChecklistDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExamChecklistDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExamChecklistDTO is not found in the empty JSON string", ExamChecklistDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExamChecklistDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExamChecklistDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("numberOfTotalExamAssessmentsFinishedByCorrectionRound") != null && !jsonObj.get("numberOfTotalExamAssessmentsFinishedByCorrectionRound").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberOfTotalExamAssessmentsFinishedByCorrectionRound` to be an array in the JSON string but got `%s`", jsonObj.get("numberOfTotalExamAssessmentsFinishedByCorrectionRound").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExamChecklistDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExamChecklistDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExamChecklistDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExamChecklistDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ExamChecklistDTO>() {
           @Override
           public void write(JsonWriter out, ExamChecklistDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExamChecklistDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExamChecklistDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExamChecklistDTO
  * @throws IOException if the JSON string is invalid with respect to ExamChecklistDTO
  */
  public static ExamChecklistDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExamChecklistDTO.class);
  }

 /**
  * Convert an instance of ExamChecklistDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

