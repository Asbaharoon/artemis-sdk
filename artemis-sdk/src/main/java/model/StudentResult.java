/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.BonusResultDTO;
import org.openapitools.client.model.ExerciseResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StudentResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class StudentResult {
  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Long userId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_SUBMITTED = "submitted";
  @SerializedName(SERIALIZED_NAME_SUBMITTED)
  private Boolean submitted;

  public static final String SERIALIZED_NAME_OVERALL_POINTS_ACHIEVED = "overallPointsAchieved";
  @SerializedName(SERIALIZED_NAME_OVERALL_POINTS_ACHIEVED)
  private Double overallPointsAchieved;

  public static final String SERIALIZED_NAME_OVERALL_SCORE_ACHIEVED = "overallScoreAchieved";
  @SerializedName(SERIALIZED_NAME_OVERALL_SCORE_ACHIEVED)
  private Double overallScoreAchieved;

  public static final String SERIALIZED_NAME_OVERALL_GRADE = "overallGrade";
  @SerializedName(SERIALIZED_NAME_OVERALL_GRADE)
  private String overallGrade;

  public static final String SERIALIZED_NAME_OVERALL_GRADE_IN_FIRST_CORRECTION = "overallGradeInFirstCorrection";
  @SerializedName(SERIALIZED_NAME_OVERALL_GRADE_IN_FIRST_CORRECTION)
  private String overallGradeInFirstCorrection;

  public static final String SERIALIZED_NAME_HAS_PASSED = "hasPassed";
  @SerializedName(SERIALIZED_NAME_HAS_PASSED)
  private Boolean hasPassed;

  public static final String SERIALIZED_NAME_OVERALL_POINTS_ACHIEVED_IN_FIRST_CORRECTION = "overallPointsAchievedInFirstCorrection";
  @SerializedName(SERIALIZED_NAME_OVERALL_POINTS_ACHIEVED_IN_FIRST_CORRECTION)
  private Double overallPointsAchievedInFirstCorrection;

  public static final String SERIALIZED_NAME_GRADE_WITH_BONUS = "gradeWithBonus";
  @SerializedName(SERIALIZED_NAME_GRADE_WITH_BONUS)
  private BonusResultDTO gradeWithBonus;

  public static final String SERIALIZED_NAME_EXERCISE_GROUP_ID_TO_EXERCISE_RESULT = "exerciseGroupIdToExerciseResult";
  @SerializedName(SERIALIZED_NAME_EXERCISE_GROUP_ID_TO_EXERCISE_RESULT)
  private Map<String, ExerciseResult> exerciseGroupIdToExerciseResult = new HashMap<>();

  /**
   * Gets or Sets mostSeverePlagiarismVerdict
   */
  @JsonAdapter(MostSeverePlagiarismVerdictEnum.Adapter.class)
  public enum MostSeverePlagiarismVerdictEnum {
    PLAGIARISM("PLAGIARISM"),
    
    POINT_DEDUCTION("POINT_DEDUCTION"),
    
    WARNING("WARNING"),
    
    NO_PLAGIARISM("NO_PLAGIARISM");

    private String value;

    MostSeverePlagiarismVerdictEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MostSeverePlagiarismVerdictEnum fromValue(String value) {
      for (MostSeverePlagiarismVerdictEnum b : MostSeverePlagiarismVerdictEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MostSeverePlagiarismVerdictEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MostSeverePlagiarismVerdictEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MostSeverePlagiarismVerdictEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MostSeverePlagiarismVerdictEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MOST_SEVERE_PLAGIARISM_VERDICT = "mostSeverePlagiarismVerdict";
  @SerializedName(SERIALIZED_NAME_MOST_SEVERE_PLAGIARISM_VERDICT)
  private MostSeverePlagiarismVerdictEnum mostSeverePlagiarismVerdict;

  public StudentResult() {
  }

  public StudentResult userId(Long userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable

  public Long getUserId() {
    return userId;
  }


  public void setUserId(Long userId) {
    this.userId = userId;
  }


  public StudentResult name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public StudentResult email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public StudentResult login(String login) {
    
    this.login = login;
    return this;
  }

   /**
   * Get login
   * @return login
  **/
  @javax.annotation.Nullable

  public String getLogin() {
    return login;
  }


  public void setLogin(String login) {
    this.login = login;
  }


  public StudentResult registrationNumber(String registrationNumber) {
    
    this.registrationNumber = registrationNumber;
    return this;
  }

   /**
   * Get registrationNumber
   * @return registrationNumber
  **/
  @javax.annotation.Nullable

  public String getRegistrationNumber() {
    return registrationNumber;
  }


  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public StudentResult submitted(Boolean submitted) {
    
    this.submitted = submitted;
    return this;
  }

   /**
   * Get submitted
   * @return submitted
  **/
  @javax.annotation.Nullable

  public Boolean getSubmitted() {
    return submitted;
  }


  public void setSubmitted(Boolean submitted) {
    this.submitted = submitted;
  }


  public StudentResult overallPointsAchieved(Double overallPointsAchieved) {
    
    this.overallPointsAchieved = overallPointsAchieved;
    return this;
  }

   /**
   * Get overallPointsAchieved
   * @return overallPointsAchieved
  **/
  @javax.annotation.Nullable

  public Double getOverallPointsAchieved() {
    return overallPointsAchieved;
  }


  public void setOverallPointsAchieved(Double overallPointsAchieved) {
    this.overallPointsAchieved = overallPointsAchieved;
  }


  public StudentResult overallScoreAchieved(Double overallScoreAchieved) {
    
    this.overallScoreAchieved = overallScoreAchieved;
    return this;
  }

   /**
   * Get overallScoreAchieved
   * @return overallScoreAchieved
  **/
  @javax.annotation.Nullable

  public Double getOverallScoreAchieved() {
    return overallScoreAchieved;
  }


  public void setOverallScoreAchieved(Double overallScoreAchieved) {
    this.overallScoreAchieved = overallScoreAchieved;
  }


  public StudentResult overallGrade(String overallGrade) {
    
    this.overallGrade = overallGrade;
    return this;
  }

   /**
   * Get overallGrade
   * @return overallGrade
  **/
  @javax.annotation.Nullable

  public String getOverallGrade() {
    return overallGrade;
  }


  public void setOverallGrade(String overallGrade) {
    this.overallGrade = overallGrade;
  }


  public StudentResult overallGradeInFirstCorrection(String overallGradeInFirstCorrection) {
    
    this.overallGradeInFirstCorrection = overallGradeInFirstCorrection;
    return this;
  }

   /**
   * Get overallGradeInFirstCorrection
   * @return overallGradeInFirstCorrection
  **/
  @javax.annotation.Nullable

  public String getOverallGradeInFirstCorrection() {
    return overallGradeInFirstCorrection;
  }


  public void setOverallGradeInFirstCorrection(String overallGradeInFirstCorrection) {
    this.overallGradeInFirstCorrection = overallGradeInFirstCorrection;
  }


  public StudentResult hasPassed(Boolean hasPassed) {
    
    this.hasPassed = hasPassed;
    return this;
  }

   /**
   * Get hasPassed
   * @return hasPassed
  **/
  @javax.annotation.Nullable

  public Boolean getHasPassed() {
    return hasPassed;
  }


  public void setHasPassed(Boolean hasPassed) {
    this.hasPassed = hasPassed;
  }


  public StudentResult overallPointsAchievedInFirstCorrection(Double overallPointsAchievedInFirstCorrection) {
    
    this.overallPointsAchievedInFirstCorrection = overallPointsAchievedInFirstCorrection;
    return this;
  }

   /**
   * Get overallPointsAchievedInFirstCorrection
   * @return overallPointsAchievedInFirstCorrection
  **/
  @javax.annotation.Nullable

  public Double getOverallPointsAchievedInFirstCorrection() {
    return overallPointsAchievedInFirstCorrection;
  }


  public void setOverallPointsAchievedInFirstCorrection(Double overallPointsAchievedInFirstCorrection) {
    this.overallPointsAchievedInFirstCorrection = overallPointsAchievedInFirstCorrection;
  }


  public StudentResult gradeWithBonus(BonusResultDTO gradeWithBonus) {
    
    this.gradeWithBonus = gradeWithBonus;
    return this;
  }

   /**
   * Get gradeWithBonus
   * @return gradeWithBonus
  **/
  @javax.annotation.Nullable

  public BonusResultDTO getGradeWithBonus() {
    return gradeWithBonus;
  }


  public void setGradeWithBonus(BonusResultDTO gradeWithBonus) {
    this.gradeWithBonus = gradeWithBonus;
  }


  public StudentResult exerciseGroupIdToExerciseResult(Map<String, ExerciseResult> exerciseGroupIdToExerciseResult) {
    
    this.exerciseGroupIdToExerciseResult = exerciseGroupIdToExerciseResult;
    return this;
  }

  public StudentResult putExerciseGroupIdToExerciseResultItem(String key, ExerciseResult exerciseGroupIdToExerciseResultItem) {
    if (this.exerciseGroupIdToExerciseResult == null) {
      this.exerciseGroupIdToExerciseResult = new HashMap<>();
    }
    this.exerciseGroupIdToExerciseResult.put(key, exerciseGroupIdToExerciseResultItem);
    return this;
  }

   /**
   * Get exerciseGroupIdToExerciseResult
   * @return exerciseGroupIdToExerciseResult
  **/
  @javax.annotation.Nullable

  public Map<String, ExerciseResult> getExerciseGroupIdToExerciseResult() {
    return exerciseGroupIdToExerciseResult;
  }


  public void setExerciseGroupIdToExerciseResult(Map<String, ExerciseResult> exerciseGroupIdToExerciseResult) {
    this.exerciseGroupIdToExerciseResult = exerciseGroupIdToExerciseResult;
  }


  public StudentResult mostSeverePlagiarismVerdict(MostSeverePlagiarismVerdictEnum mostSeverePlagiarismVerdict) {
    
    this.mostSeverePlagiarismVerdict = mostSeverePlagiarismVerdict;
    return this;
  }

   /**
   * Get mostSeverePlagiarismVerdict
   * @return mostSeverePlagiarismVerdict
  **/
  @javax.annotation.Nullable

  public MostSeverePlagiarismVerdictEnum getMostSeverePlagiarismVerdict() {
    return mostSeverePlagiarismVerdict;
  }


  public void setMostSeverePlagiarismVerdict(MostSeverePlagiarismVerdictEnum mostSeverePlagiarismVerdict) {
    this.mostSeverePlagiarismVerdict = mostSeverePlagiarismVerdict;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StudentResult studentResult = (StudentResult) o;
    return Objects.equals(this.userId, studentResult.userId) &&
        Objects.equals(this.name, studentResult.name) &&
        Objects.equals(this.email, studentResult.email) &&
        Objects.equals(this.login, studentResult.login) &&
        Objects.equals(this.registrationNumber, studentResult.registrationNumber) &&
        Objects.equals(this.submitted, studentResult.submitted) &&
        Objects.equals(this.overallPointsAchieved, studentResult.overallPointsAchieved) &&
        Objects.equals(this.overallScoreAchieved, studentResult.overallScoreAchieved) &&
        Objects.equals(this.overallGrade, studentResult.overallGrade) &&
        Objects.equals(this.overallGradeInFirstCorrection, studentResult.overallGradeInFirstCorrection) &&
        Objects.equals(this.hasPassed, studentResult.hasPassed) &&
        Objects.equals(this.overallPointsAchievedInFirstCorrection, studentResult.overallPointsAchievedInFirstCorrection) &&
        Objects.equals(this.gradeWithBonus, studentResult.gradeWithBonus) &&
        Objects.equals(this.exerciseGroupIdToExerciseResult, studentResult.exerciseGroupIdToExerciseResult) &&
        Objects.equals(this.mostSeverePlagiarismVerdict, studentResult.mostSeverePlagiarismVerdict);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, name, email, login, registrationNumber, submitted, overallPointsAchieved, overallScoreAchieved, overallGrade, overallGradeInFirstCorrection, hasPassed, overallPointsAchievedInFirstCorrection, gradeWithBonus, exerciseGroupIdToExerciseResult, mostSeverePlagiarismVerdict);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StudentResult {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    submitted: ").append(toIndentedString(submitted)).append("\n");
    sb.append("    overallPointsAchieved: ").append(toIndentedString(overallPointsAchieved)).append("\n");
    sb.append("    overallScoreAchieved: ").append(toIndentedString(overallScoreAchieved)).append("\n");
    sb.append("    overallGrade: ").append(toIndentedString(overallGrade)).append("\n");
    sb.append("    overallGradeInFirstCorrection: ").append(toIndentedString(overallGradeInFirstCorrection)).append("\n");
    sb.append("    hasPassed: ").append(toIndentedString(hasPassed)).append("\n");
    sb.append("    overallPointsAchievedInFirstCorrection: ").append(toIndentedString(overallPointsAchievedInFirstCorrection)).append("\n");
    sb.append("    gradeWithBonus: ").append(toIndentedString(gradeWithBonus)).append("\n");
    sb.append("    exerciseGroupIdToExerciseResult: ").append(toIndentedString(exerciseGroupIdToExerciseResult)).append("\n");
    sb.append("    mostSeverePlagiarismVerdict: ").append(toIndentedString(mostSeverePlagiarismVerdict)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userId");
    openapiFields.add("name");
    openapiFields.add("email");
    openapiFields.add("login");
    openapiFields.add("registrationNumber");
    openapiFields.add("submitted");
    openapiFields.add("overallPointsAchieved");
    openapiFields.add("overallScoreAchieved");
    openapiFields.add("overallGrade");
    openapiFields.add("overallGradeInFirstCorrection");
    openapiFields.add("hasPassed");
    openapiFields.add("overallPointsAchievedInFirstCorrection");
    openapiFields.add("gradeWithBonus");
    openapiFields.add("exerciseGroupIdToExerciseResult");
    openapiFields.add("mostSeverePlagiarismVerdict");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StudentResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StudentResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StudentResult is not found in the empty JSON string", StudentResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!StudentResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StudentResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("login") != null && !jsonObj.get("login").isJsonNull()) && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("registrationNumber") != null && !jsonObj.get("registrationNumber").isJsonNull()) && !jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      if ((jsonObj.get("overallGrade") != null && !jsonObj.get("overallGrade").isJsonNull()) && !jsonObj.get("overallGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overallGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overallGrade").toString()));
      }
      if ((jsonObj.get("overallGradeInFirstCorrection") != null && !jsonObj.get("overallGradeInFirstCorrection").isJsonNull()) && !jsonObj.get("overallGradeInFirstCorrection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overallGradeInFirstCorrection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overallGradeInFirstCorrection").toString()));
      }
      // validate the optional field `gradeWithBonus`
      if (jsonObj.get("gradeWithBonus") != null && !jsonObj.get("gradeWithBonus").isJsonNull()) {
        BonusResultDTO.validateJsonObject(jsonObj.getAsJsonObject("gradeWithBonus"));
      }
      if ((jsonObj.get("mostSeverePlagiarismVerdict") != null && !jsonObj.get("mostSeverePlagiarismVerdict").isJsonNull()) && !jsonObj.get("mostSeverePlagiarismVerdict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mostSeverePlagiarismVerdict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mostSeverePlagiarismVerdict").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StudentResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StudentResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StudentResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StudentResult.class));

       return (TypeAdapter<T>) new TypeAdapter<StudentResult>() {
           @Override
           public void write(JsonWriter out, StudentResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StudentResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StudentResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StudentResult
  * @throws IOException if the JSON string is invalid with respect to StudentResult
  */
  public static StudentResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StudentResult.class);
  }

 /**
  * Convert an instance of StudentResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

