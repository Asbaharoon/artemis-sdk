/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ExerciseGroup;
import org.openapitools.client.model.StudentResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExamScoresDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ExamScoresDTO {
  public static final String SERIALIZED_NAME_EXAM_ID = "examId";
  @SerializedName(SERIALIZED_NAME_EXAM_ID)
  private Long examId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_MAX_POINTS = "maxPoints";
  @SerializedName(SERIALIZED_NAME_MAX_POINTS)
  private Integer maxPoints;

  public static final String SERIALIZED_NAME_AVERAGE_POINTS_ACHIEVED = "averagePointsAchieved";
  @SerializedName(SERIALIZED_NAME_AVERAGE_POINTS_ACHIEVED)
  private Double averagePointsAchieved;

  public static final String SERIALIZED_NAME_HAS_SECOND_CORRECTION_AND_STARTED = "hasSecondCorrectionAndStarted";
  @SerializedName(SERIALIZED_NAME_HAS_SECOND_CORRECTION_AND_STARTED)
  private Boolean hasSecondCorrectionAndStarted;

  public static final String SERIALIZED_NAME_EXERCISE_GROUPS = "exerciseGroups";
  @SerializedName(SERIALIZED_NAME_EXERCISE_GROUPS)
  private List<ExerciseGroup> exerciseGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_STUDENT_RESULTS = "studentResults";
  @SerializedName(SERIALIZED_NAME_STUDENT_RESULTS)
  private List<StudentResult> studentResults = new ArrayList<>();

  public ExamScoresDTO() {
  }

  public ExamScoresDTO examId(Long examId) {
    
    this.examId = examId;
    return this;
  }

   /**
   * Get examId
   * @return examId
  **/
  @javax.annotation.Nullable

  public Long getExamId() {
    return examId;
  }


  public void setExamId(Long examId) {
    this.examId = examId;
  }


  public ExamScoresDTO title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ExamScoresDTO maxPoints(Integer maxPoints) {
    
    this.maxPoints = maxPoints;
    return this;
  }

   /**
   * Get maxPoints
   * @return maxPoints
  **/
  @javax.annotation.Nullable

  public Integer getMaxPoints() {
    return maxPoints;
  }


  public void setMaxPoints(Integer maxPoints) {
    this.maxPoints = maxPoints;
  }


  public ExamScoresDTO averagePointsAchieved(Double averagePointsAchieved) {
    
    this.averagePointsAchieved = averagePointsAchieved;
    return this;
  }

   /**
   * Get averagePointsAchieved
   * @return averagePointsAchieved
  **/
  @javax.annotation.Nullable

  public Double getAveragePointsAchieved() {
    return averagePointsAchieved;
  }


  public void setAveragePointsAchieved(Double averagePointsAchieved) {
    this.averagePointsAchieved = averagePointsAchieved;
  }


  public ExamScoresDTO hasSecondCorrectionAndStarted(Boolean hasSecondCorrectionAndStarted) {
    
    this.hasSecondCorrectionAndStarted = hasSecondCorrectionAndStarted;
    return this;
  }

   /**
   * Get hasSecondCorrectionAndStarted
   * @return hasSecondCorrectionAndStarted
  **/
  @javax.annotation.Nullable

  public Boolean getHasSecondCorrectionAndStarted() {
    return hasSecondCorrectionAndStarted;
  }


  public void setHasSecondCorrectionAndStarted(Boolean hasSecondCorrectionAndStarted) {
    this.hasSecondCorrectionAndStarted = hasSecondCorrectionAndStarted;
  }


  public ExamScoresDTO exerciseGroups(List<ExerciseGroup> exerciseGroups) {
    
    this.exerciseGroups = exerciseGroups;
    return this;
  }

  public ExamScoresDTO addExerciseGroupsItem(ExerciseGroup exerciseGroupsItem) {
    if (this.exerciseGroups == null) {
      this.exerciseGroups = new ArrayList<>();
    }
    this.exerciseGroups.add(exerciseGroupsItem);
    return this;
  }

   /**
   * Get exerciseGroups
   * @return exerciseGroups
  **/
  @javax.annotation.Nullable

  public List<ExerciseGroup> getExerciseGroups() {
    return exerciseGroups;
  }


  public void setExerciseGroups(List<ExerciseGroup> exerciseGroups) {
    this.exerciseGroups = exerciseGroups;
  }


  public ExamScoresDTO studentResults(List<StudentResult> studentResults) {
    
    this.studentResults = studentResults;
    return this;
  }

  public ExamScoresDTO addStudentResultsItem(StudentResult studentResultsItem) {
    if (this.studentResults == null) {
      this.studentResults = new ArrayList<>();
    }
    this.studentResults.add(studentResultsItem);
    return this;
  }

   /**
   * Get studentResults
   * @return studentResults
  **/
  @javax.annotation.Nullable

  public List<StudentResult> getStudentResults() {
    return studentResults;
  }


  public void setStudentResults(List<StudentResult> studentResults) {
    this.studentResults = studentResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExamScoresDTO examScoresDTO = (ExamScoresDTO) o;
    return Objects.equals(this.examId, examScoresDTO.examId) &&
        Objects.equals(this.title, examScoresDTO.title) &&
        Objects.equals(this.maxPoints, examScoresDTO.maxPoints) &&
        Objects.equals(this.averagePointsAchieved, examScoresDTO.averagePointsAchieved) &&
        Objects.equals(this.hasSecondCorrectionAndStarted, examScoresDTO.hasSecondCorrectionAndStarted) &&
        Objects.equals(this.exerciseGroups, examScoresDTO.exerciseGroups) &&
        Objects.equals(this.studentResults, examScoresDTO.studentResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(examId, title, maxPoints, averagePointsAchieved, hasSecondCorrectionAndStarted, exerciseGroups, studentResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExamScoresDTO {\n");
    sb.append("    examId: ").append(toIndentedString(examId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    maxPoints: ").append(toIndentedString(maxPoints)).append("\n");
    sb.append("    averagePointsAchieved: ").append(toIndentedString(averagePointsAchieved)).append("\n");
    sb.append("    hasSecondCorrectionAndStarted: ").append(toIndentedString(hasSecondCorrectionAndStarted)).append("\n");
    sb.append("    exerciseGroups: ").append(toIndentedString(exerciseGroups)).append("\n");
    sb.append("    studentResults: ").append(toIndentedString(studentResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("examId");
    openapiFields.add("title");
    openapiFields.add("maxPoints");
    openapiFields.add("averagePointsAchieved");
    openapiFields.add("hasSecondCorrectionAndStarted");
    openapiFields.add("exerciseGroups");
    openapiFields.add("studentResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExamScoresDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExamScoresDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExamScoresDTO is not found in the empty JSON string", ExamScoresDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExamScoresDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExamScoresDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("exerciseGroups") != null && !jsonObj.get("exerciseGroups").isJsonNull()) {
        JsonArray jsonArrayexerciseGroups = jsonObj.getAsJsonArray("exerciseGroups");
        if (jsonArrayexerciseGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exerciseGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exerciseGroups` to be an array in the JSON string but got `%s`", jsonObj.get("exerciseGroups").toString()));
          }

          // validate the optional field `exerciseGroups` (array)
          for (int i = 0; i < jsonArrayexerciseGroups.size(); i++) {
            ExerciseGroup.validateJsonObject(jsonArrayexerciseGroups.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("studentResults") != null && !jsonObj.get("studentResults").isJsonNull()) {
        JsonArray jsonArraystudentResults = jsonObj.getAsJsonArray("studentResults");
        if (jsonArraystudentResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("studentResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `studentResults` to be an array in the JSON string but got `%s`", jsonObj.get("studentResults").toString()));
          }

          // validate the optional field `studentResults` (array)
          for (int i = 0; i < jsonArraystudentResults.size(); i++) {
            StudentResult.validateJsonObject(jsonArraystudentResults.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExamScoresDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExamScoresDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExamScoresDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExamScoresDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ExamScoresDTO>() {
           @Override
           public void write(JsonWriter out, ExamScoresDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExamScoresDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExamScoresDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExamScoresDTO
  * @throws IOException if the JSON string is invalid with respect to ExamScoresDTO
  */
  public static ExamScoresDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExamScoresDTO.class);
  }

 /**
  * Convert an instance of ExamScoresDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

