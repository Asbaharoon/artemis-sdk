/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.Exam;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExamUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ExamUser {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_ACTUAL_ROOM = "actualRoom";
  @SerializedName(SERIALIZED_NAME_ACTUAL_ROOM)
  private String actualRoom;

  public static final String SERIALIZED_NAME_ACTUAL_SEAT = "actualSeat";
  @SerializedName(SERIALIZED_NAME_ACTUAL_SEAT)
  private String actualSeat;

  public static final String SERIALIZED_NAME_PLANNED_ROOM = "plannedRoom";
  @SerializedName(SERIALIZED_NAME_PLANNED_ROOM)
  private String plannedRoom;

  public static final String SERIALIZED_NAME_PLANNED_SEAT = "plannedSeat";
  @SerializedName(SERIALIZED_NAME_PLANNED_SEAT)
  private String plannedSeat;

  public static final String SERIALIZED_NAME_DID_CHECK_IMAGE = "didCheckImage";
  @SerializedName(SERIALIZED_NAME_DID_CHECK_IMAGE)
  private Boolean didCheckImage;

  public static final String SERIALIZED_NAME_DID_CHECK_NAME = "didCheckName";
  @SerializedName(SERIALIZED_NAME_DID_CHECK_NAME)
  private Boolean didCheckName;

  public static final String SERIALIZED_NAME_DID_CHECK_LOGIN = "didCheckLogin";
  @SerializedName(SERIALIZED_NAME_DID_CHECK_LOGIN)
  private Boolean didCheckLogin;

  public static final String SERIALIZED_NAME_DID_CHECK_REGISTRATION_NUMBER = "didCheckRegistrationNumber";
  @SerializedName(SERIALIZED_NAME_DID_CHECK_REGISTRATION_NUMBER)
  private Boolean didCheckRegistrationNumber;

  public static final String SERIALIZED_NAME_SIGNING_IMAGE_PATH = "signingImagePath";
  @SerializedName(SERIALIZED_NAME_SIGNING_IMAGE_PATH)
  private String signingImagePath;

  public static final String SERIALIZED_NAME_STUDENT_IMAGE_PATH = "studentImagePath";
  @SerializedName(SERIALIZED_NAME_STUDENT_IMAGE_PATH)
  private String studentImagePath;

  public static final String SERIALIZED_NAME_EXAM = "exam";
  @SerializedName(SERIALIZED_NAME_EXAM)
  private Exam exam;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public ExamUser() {
  }

  public ExamUser id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ExamUser actualRoom(String actualRoom) {
    
    this.actualRoom = actualRoom;
    return this;
  }

   /**
   * Get actualRoom
   * @return actualRoom
  **/
  @javax.annotation.Nullable

  public String getActualRoom() {
    return actualRoom;
  }


  public void setActualRoom(String actualRoom) {
    this.actualRoom = actualRoom;
  }


  public ExamUser actualSeat(String actualSeat) {
    
    this.actualSeat = actualSeat;
    return this;
  }

   /**
   * Get actualSeat
   * @return actualSeat
  **/
  @javax.annotation.Nullable

  public String getActualSeat() {
    return actualSeat;
  }


  public void setActualSeat(String actualSeat) {
    this.actualSeat = actualSeat;
  }


  public ExamUser plannedRoom(String plannedRoom) {
    
    this.plannedRoom = plannedRoom;
    return this;
  }

   /**
   * Get plannedRoom
   * @return plannedRoom
  **/
  @javax.annotation.Nullable

  public String getPlannedRoom() {
    return plannedRoom;
  }


  public void setPlannedRoom(String plannedRoom) {
    this.plannedRoom = plannedRoom;
  }


  public ExamUser plannedSeat(String plannedSeat) {
    
    this.plannedSeat = plannedSeat;
    return this;
  }

   /**
   * Get plannedSeat
   * @return plannedSeat
  **/
  @javax.annotation.Nullable

  public String getPlannedSeat() {
    return plannedSeat;
  }


  public void setPlannedSeat(String plannedSeat) {
    this.plannedSeat = plannedSeat;
  }


  public ExamUser didCheckImage(Boolean didCheckImage) {
    
    this.didCheckImage = didCheckImage;
    return this;
  }

   /**
   * Get didCheckImage
   * @return didCheckImage
  **/
  @javax.annotation.Nullable

  public Boolean getDidCheckImage() {
    return didCheckImage;
  }


  public void setDidCheckImage(Boolean didCheckImage) {
    this.didCheckImage = didCheckImage;
  }


  public ExamUser didCheckName(Boolean didCheckName) {
    
    this.didCheckName = didCheckName;
    return this;
  }

   /**
   * Get didCheckName
   * @return didCheckName
  **/
  @javax.annotation.Nullable

  public Boolean getDidCheckName() {
    return didCheckName;
  }


  public void setDidCheckName(Boolean didCheckName) {
    this.didCheckName = didCheckName;
  }


  public ExamUser didCheckLogin(Boolean didCheckLogin) {
    
    this.didCheckLogin = didCheckLogin;
    return this;
  }

   /**
   * Get didCheckLogin
   * @return didCheckLogin
  **/
  @javax.annotation.Nullable

  public Boolean getDidCheckLogin() {
    return didCheckLogin;
  }


  public void setDidCheckLogin(Boolean didCheckLogin) {
    this.didCheckLogin = didCheckLogin;
  }


  public ExamUser didCheckRegistrationNumber(Boolean didCheckRegistrationNumber) {
    
    this.didCheckRegistrationNumber = didCheckRegistrationNumber;
    return this;
  }

   /**
   * Get didCheckRegistrationNumber
   * @return didCheckRegistrationNumber
  **/
  @javax.annotation.Nullable

  public Boolean getDidCheckRegistrationNumber() {
    return didCheckRegistrationNumber;
  }


  public void setDidCheckRegistrationNumber(Boolean didCheckRegistrationNumber) {
    this.didCheckRegistrationNumber = didCheckRegistrationNumber;
  }


  public ExamUser signingImagePath(String signingImagePath) {
    
    this.signingImagePath = signingImagePath;
    return this;
  }

   /**
   * Get signingImagePath
   * @return signingImagePath
  **/
  @javax.annotation.Nullable

  public String getSigningImagePath() {
    return signingImagePath;
  }


  public void setSigningImagePath(String signingImagePath) {
    this.signingImagePath = signingImagePath;
  }


  public ExamUser studentImagePath(String studentImagePath) {
    
    this.studentImagePath = studentImagePath;
    return this;
  }

   /**
   * Get studentImagePath
   * @return studentImagePath
  **/
  @javax.annotation.Nullable

  public String getStudentImagePath() {
    return studentImagePath;
  }


  public void setStudentImagePath(String studentImagePath) {
    this.studentImagePath = studentImagePath;
  }


  public ExamUser exam(Exam exam) {
    
    this.exam = exam;
    return this;
  }

   /**
   * Get exam
   * @return exam
  **/
  @javax.annotation.Nullable

  public Exam getExam() {
    return exam;
  }


  public void setExam(Exam exam) {
    this.exam = exam;
  }


  public ExamUser user(User user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExamUser examUser = (ExamUser) o;
    return Objects.equals(this.id, examUser.id) &&
        Objects.equals(this.actualRoom, examUser.actualRoom) &&
        Objects.equals(this.actualSeat, examUser.actualSeat) &&
        Objects.equals(this.plannedRoom, examUser.plannedRoom) &&
        Objects.equals(this.plannedSeat, examUser.plannedSeat) &&
        Objects.equals(this.didCheckImage, examUser.didCheckImage) &&
        Objects.equals(this.didCheckName, examUser.didCheckName) &&
        Objects.equals(this.didCheckLogin, examUser.didCheckLogin) &&
        Objects.equals(this.didCheckRegistrationNumber, examUser.didCheckRegistrationNumber) &&
        Objects.equals(this.signingImagePath, examUser.signingImagePath) &&
        Objects.equals(this.studentImagePath, examUser.studentImagePath) &&
        Objects.equals(this.exam, examUser.exam) &&
        Objects.equals(this.user, examUser.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, actualRoom, actualSeat, plannedRoom, plannedSeat, didCheckImage, didCheckName, didCheckLogin, didCheckRegistrationNumber, signingImagePath, studentImagePath, exam, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExamUser {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    actualRoom: ").append(toIndentedString(actualRoom)).append("\n");
    sb.append("    actualSeat: ").append(toIndentedString(actualSeat)).append("\n");
    sb.append("    plannedRoom: ").append(toIndentedString(plannedRoom)).append("\n");
    sb.append("    plannedSeat: ").append(toIndentedString(plannedSeat)).append("\n");
    sb.append("    didCheckImage: ").append(toIndentedString(didCheckImage)).append("\n");
    sb.append("    didCheckName: ").append(toIndentedString(didCheckName)).append("\n");
    sb.append("    didCheckLogin: ").append(toIndentedString(didCheckLogin)).append("\n");
    sb.append("    didCheckRegistrationNumber: ").append(toIndentedString(didCheckRegistrationNumber)).append("\n");
    sb.append("    signingImagePath: ").append(toIndentedString(signingImagePath)).append("\n");
    sb.append("    studentImagePath: ").append(toIndentedString(studentImagePath)).append("\n");
    sb.append("    exam: ").append(toIndentedString(exam)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("actualRoom");
    openapiFields.add("actualSeat");
    openapiFields.add("plannedRoom");
    openapiFields.add("plannedSeat");
    openapiFields.add("didCheckImage");
    openapiFields.add("didCheckName");
    openapiFields.add("didCheckLogin");
    openapiFields.add("didCheckRegistrationNumber");
    openapiFields.add("signingImagePath");
    openapiFields.add("studentImagePath");
    openapiFields.add("exam");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExamUser
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExamUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExamUser is not found in the empty JSON string", ExamUser.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExamUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExamUser` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("actualRoom") != null && !jsonObj.get("actualRoom").isJsonNull()) && !jsonObj.get("actualRoom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actualRoom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actualRoom").toString()));
      }
      if ((jsonObj.get("actualSeat") != null && !jsonObj.get("actualSeat").isJsonNull()) && !jsonObj.get("actualSeat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actualSeat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actualSeat").toString()));
      }
      if ((jsonObj.get("plannedRoom") != null && !jsonObj.get("plannedRoom").isJsonNull()) && !jsonObj.get("plannedRoom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plannedRoom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plannedRoom").toString()));
      }
      if ((jsonObj.get("plannedSeat") != null && !jsonObj.get("plannedSeat").isJsonNull()) && !jsonObj.get("plannedSeat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plannedSeat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plannedSeat").toString()));
      }
      if ((jsonObj.get("signingImagePath") != null && !jsonObj.get("signingImagePath").isJsonNull()) && !jsonObj.get("signingImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signingImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signingImagePath").toString()));
      }
      if ((jsonObj.get("studentImagePath") != null && !jsonObj.get("studentImagePath").isJsonNull()) && !jsonObj.get("studentImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studentImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studentImagePath").toString()));
      }
      // validate the optional field `exam`
      if (jsonObj.get("exam") != null && !jsonObj.get("exam").isJsonNull()) {
        Exam.validateJsonObject(jsonObj.getAsJsonObject("exam"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExamUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExamUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExamUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExamUser.class));

       return (TypeAdapter<T>) new TypeAdapter<ExamUser>() {
           @Override
           public void write(JsonWriter out, ExamUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExamUser read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExamUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExamUser
  * @throws IOException if the JSON string is invalid with respect to ExamUser
  */
  public static ExamUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExamUser.class);
  }

 /**
  * Convert an instance of ExamUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

