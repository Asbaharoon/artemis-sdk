/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.Participation;
import org.openapitools.client.model.Result;
import org.openapitools.client.model.SimilarElementCount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelingSubmissionAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ModelingSubmissionAllOf {
  public static final String SERIALIZED_NAME_PARTICIPATION = "participation";
  @SerializedName(SERIALIZED_NAME_PARTICIPATION)
  private Participation participation;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_EXPLANATION_TEXT = "explanationText";
  @SerializedName(SERIALIZED_NAME_EXPLANATION_TEXT)
  private String explanationText;

  public static final String SERIALIZED_NAME_SIMILAR_ELEMENT_COUNTS = "similarElementCounts";
  @SerializedName(SERIALIZED_NAME_SIMILAR_ELEMENT_COUNTS)
  private Set<SimilarElementCount> similarElementCounts = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SIMILAR_ELEMENTS = "similarElements";
  @SerializedName(SERIALIZED_NAME_SIMILAR_ELEMENTS)
  private Set<SimilarElementCount> similarElements = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<Result> results = new ArrayList<>();

  public ModelingSubmissionAllOf() {
  }

  
  public ModelingSubmissionAllOf(
     List<Result> results
  ) {
    this();
    this.results = results;
  }

  public ModelingSubmissionAllOf participation(Participation participation) {
    
    this.participation = participation;
    return this;
  }

   /**
   * Get participation
   * @return participation
  **/
  @javax.annotation.Nullable

  public Participation getParticipation() {
    return participation;
  }


  public void setParticipation(Participation participation) {
    this.participation = participation;
  }


  public ModelingSubmissionAllOf model(String model) {
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nullable

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    this.model = model;
  }


  public ModelingSubmissionAllOf explanationText(String explanationText) {
    
    this.explanationText = explanationText;
    return this;
  }

   /**
   * Get explanationText
   * @return explanationText
  **/
  @javax.annotation.Nullable

  public String getExplanationText() {
    return explanationText;
  }


  public void setExplanationText(String explanationText) {
    this.explanationText = explanationText;
  }


  public ModelingSubmissionAllOf similarElementCounts(Set<SimilarElementCount> similarElementCounts) {
    
    this.similarElementCounts = similarElementCounts;
    return this;
  }

  public ModelingSubmissionAllOf addSimilarElementCountsItem(SimilarElementCount similarElementCountsItem) {
    if (this.similarElementCounts == null) {
      this.similarElementCounts = new LinkedHashSet<>();
    }
    this.similarElementCounts.add(similarElementCountsItem);
    return this;
  }

   /**
   * Get similarElementCounts
   * @return similarElementCounts
  **/
  @javax.annotation.Nullable

  public Set<SimilarElementCount> getSimilarElementCounts() {
    return similarElementCounts;
  }


  public void setSimilarElementCounts(Set<SimilarElementCount> similarElementCounts) {
    this.similarElementCounts = similarElementCounts;
  }


  public ModelingSubmissionAllOf similarElements(Set<SimilarElementCount> similarElements) {
    
    this.similarElements = similarElements;
    return this;
  }

  public ModelingSubmissionAllOf addSimilarElementsItem(SimilarElementCount similarElementsItem) {
    if (this.similarElements == null) {
      this.similarElements = new LinkedHashSet<>();
    }
    this.similarElements.add(similarElementsItem);
    return this;
  }

   /**
   * Get similarElements
   * @return similarElements
  **/
  @javax.annotation.Nullable

  public Set<SimilarElementCount> getSimilarElements() {
    return similarElements;
  }


  public void setSimilarElements(Set<SimilarElementCount> similarElements) {
    this.similarElements = similarElements;
  }


   /**
   * Get results
   * @return results
  **/
  @javax.annotation.Nullable

  public List<Result> getResults() {
    return results;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelingSubmissionAllOf modelingSubmissionAllOf = (ModelingSubmissionAllOf) o;
    return Objects.equals(this.participation, modelingSubmissionAllOf.participation) &&
        Objects.equals(this.model, modelingSubmissionAllOf.model) &&
        Objects.equals(this.explanationText, modelingSubmissionAllOf.explanationText) &&
        Objects.equals(this.similarElementCounts, modelingSubmissionAllOf.similarElementCounts) &&
        Objects.equals(this.similarElements, modelingSubmissionAllOf.similarElements) &&
        Objects.equals(this.results, modelingSubmissionAllOf.results);
  }

  @Override
  public int hashCode() {
    return Objects.hash(participation, model, explanationText, similarElementCounts, similarElements, results);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelingSubmissionAllOf {\n");
    sb.append("    participation: ").append(toIndentedString(participation)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    explanationText: ").append(toIndentedString(explanationText)).append("\n");
    sb.append("    similarElementCounts: ").append(toIndentedString(similarElementCounts)).append("\n");
    sb.append("    similarElements: ").append(toIndentedString(similarElements)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("participation");
    openapiFields.add("model");
    openapiFields.add("explanationText");
    openapiFields.add("similarElementCounts");
    openapiFields.add("similarElements");
    openapiFields.add("results");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelingSubmissionAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelingSubmissionAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelingSubmissionAllOf is not found in the empty JSON string", ModelingSubmissionAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelingSubmissionAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelingSubmissionAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `participation`
      if (jsonObj.get("participation") != null && !jsonObj.get("participation").isJsonNull()) {
        Participation.validateJsonObject(jsonObj.getAsJsonObject("participation"));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("explanationText") != null && !jsonObj.get("explanationText").isJsonNull()) && !jsonObj.get("explanationText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `explanationText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explanationText").toString()));
      }
      if (jsonObj.get("similarElementCounts") != null && !jsonObj.get("similarElementCounts").isJsonNull()) {
        JsonArray jsonArraysimilarElementCounts = jsonObj.getAsJsonArray("similarElementCounts");
        if (jsonArraysimilarElementCounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("similarElementCounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `similarElementCounts` to be an array in the JSON string but got `%s`", jsonObj.get("similarElementCounts").toString()));
          }

          // validate the optional field `similarElementCounts` (array)
          for (int i = 0; i < jsonArraysimilarElementCounts.size(); i++) {
            SimilarElementCount.validateJsonObject(jsonArraysimilarElementCounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("similarElements") != null && !jsonObj.get("similarElements").isJsonNull()) {
        JsonArray jsonArraysimilarElements = jsonObj.getAsJsonArray("similarElements");
        if (jsonArraysimilarElements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("similarElements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `similarElements` to be an array in the JSON string but got `%s`", jsonObj.get("similarElements").toString()));
          }

          // validate the optional field `similarElements` (array)
          for (int i = 0; i < jsonArraysimilarElements.size(); i++) {
            SimilarElementCount.validateJsonObject(jsonArraysimilarElements.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
        if (jsonArrayresults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
          }

          // validate the optional field `results` (array)
          for (int i = 0; i < jsonArrayresults.size(); i++) {
            Result.validateJsonObject(jsonArrayresults.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelingSubmissionAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelingSubmissionAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelingSubmissionAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelingSubmissionAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelingSubmissionAllOf>() {
           @Override
           public void write(JsonWriter out, ModelingSubmissionAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelingSubmissionAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelingSubmissionAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelingSubmissionAllOf
  * @throws IOException if the JSON string is invalid with respect to ModelingSubmissionAllOf
  */
  public static ModelingSubmissionAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelingSubmissionAllOf.class);
  }

 /**
  * Convert an instance of ModelingSubmissionAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

