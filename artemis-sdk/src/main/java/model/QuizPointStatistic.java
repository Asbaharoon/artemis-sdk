/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;

import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;


/**
 * QuizPointStatistic
 */
public class QuizPointStatistic {


  private Long id;



  private Integer participantsRated;



  private Integer participantsUnrated;



  private Set<PointCounter> pointCounters = new LinkedHashSet<>();

  public QuizPointStatistic() {
  }

  public QuizPointStatistic id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/


  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public QuizPointStatistic participantsRated(Integer participantsRated) {
    
    this.participantsRated = participantsRated;
    return this;
  }

   /**
   * Get participantsRated
   * @return participantsRated
  **/


  public Integer getParticipantsRated() {
    return participantsRated;
  }


  public void setParticipantsRated(Integer participantsRated) {
    this.participantsRated = participantsRated;
  }


  public QuizPointStatistic participantsUnrated(Integer participantsUnrated) {
    
    this.participantsUnrated = participantsUnrated;
    return this;
  }

   /**
   * Get participantsUnrated
   * @return participantsUnrated
  **/


  public Integer getParticipantsUnrated() {
    return participantsUnrated;
  }


  public void setParticipantsUnrated(Integer participantsUnrated) {
    this.participantsUnrated = participantsUnrated;
  }


  public QuizPointStatistic pointCounters(Set<PointCounter> pointCounters) {
    
    this.pointCounters = pointCounters;
    return this;
  }

  public QuizPointStatistic addPointCountersItem(PointCounter pointCountersItem) {
    if (this.pointCounters == null) {
      this.pointCounters = new LinkedHashSet<>();
    }
    this.pointCounters.add(pointCountersItem);
    return this;
  }

   /**
   * Get pointCounters
   * @return pointCounters
  **/


  public Set<PointCounter> getPointCounters() {
    return pointCounters;
  }


  public void setPointCounters(Set<PointCounter> pointCounters) {
    this.pointCounters = pointCounters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuizPointStatistic quizPointStatistic = (QuizPointStatistic) o;
    return Objects.equals(this.id, quizPointStatistic.id) &&
        Objects.equals(this.participantsRated, quizPointStatistic.participantsRated) &&
        Objects.equals(this.participantsUnrated, quizPointStatistic.participantsUnrated) &&
        Objects.equals(this.pointCounters, quizPointStatistic.pointCounters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, participantsRated, participantsUnrated, pointCounters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuizPointStatistic {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    participantsRated: ").append(toIndentedString(participantsRated)).append("\n");
    sb.append("    participantsUnrated: ").append(toIndentedString(participantsUnrated)).append("\n");
    sb.append("    pointCounters: ").append(toIndentedString(pointCounters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

