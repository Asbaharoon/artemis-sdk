/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.CodeHint;
import org.openapitools.client.model.ProgrammingExerciseTestCase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProgrammingExerciseSolutionEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ProgrammingExerciseSolutionEntry {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_PREVIOUS_LINE = "previousLine";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_LINE)
  private Integer previousLine;

  public static final String SERIALIZED_NAME_LINE = "line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private Integer line;

  public static final String SERIALIZED_NAME_PREVIOUS_CODE = "previousCode";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_CODE)
  private String previousCode;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CODE_HINT = "codeHint";
  @SerializedName(SERIALIZED_NAME_CODE_HINT)
  private CodeHint codeHint;

  public static final String SERIALIZED_NAME_TEST_CASE = "testCase";
  @SerializedName(SERIALIZED_NAME_TEST_CASE)
  private ProgrammingExerciseTestCase testCase;

  public ProgrammingExerciseSolutionEntry() {
  }

  public ProgrammingExerciseSolutionEntry id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ProgrammingExerciseSolutionEntry filePath(String filePath) {
    
    this.filePath = filePath;
    return this;
  }

   /**
   * Get filePath
   * @return filePath
  **/
  @javax.annotation.Nullable

  public String getFilePath() {
    return filePath;
  }


  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public ProgrammingExerciseSolutionEntry previousLine(Integer previousLine) {
    
    this.previousLine = previousLine;
    return this;
  }

   /**
   * Get previousLine
   * @return previousLine
  **/
  @javax.annotation.Nullable

  public Integer getPreviousLine() {
    return previousLine;
  }


  public void setPreviousLine(Integer previousLine) {
    this.previousLine = previousLine;
  }


  public ProgrammingExerciseSolutionEntry line(Integer line) {
    
    this.line = line;
    return this;
  }

   /**
   * Get line
   * @return line
  **/
  @javax.annotation.Nullable

  public Integer getLine() {
    return line;
  }


  public void setLine(Integer line) {
    this.line = line;
  }


  public ProgrammingExerciseSolutionEntry previousCode(String previousCode) {
    
    this.previousCode = previousCode;
    return this;
  }

   /**
   * Get previousCode
   * @return previousCode
  **/
  @javax.annotation.Nullable

  public String getPreviousCode() {
    return previousCode;
  }


  public void setPreviousCode(String previousCode) {
    this.previousCode = previousCode;
  }


  public ProgrammingExerciseSolutionEntry code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public ProgrammingExerciseSolutionEntry codeHint(CodeHint codeHint) {
    
    this.codeHint = codeHint;
    return this;
  }

   /**
   * Get codeHint
   * @return codeHint
  **/
  @javax.annotation.Nullable

  public CodeHint getCodeHint() {
    return codeHint;
  }


  public void setCodeHint(CodeHint codeHint) {
    this.codeHint = codeHint;
  }


  public ProgrammingExerciseSolutionEntry testCase(ProgrammingExerciseTestCase testCase) {
    
    this.testCase = testCase;
    return this;
  }

   /**
   * Get testCase
   * @return testCase
  **/
  @javax.annotation.Nullable

  public ProgrammingExerciseTestCase getTestCase() {
    return testCase;
  }


  public void setTestCase(ProgrammingExerciseTestCase testCase) {
    this.testCase = testCase;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgrammingExerciseSolutionEntry programmingExerciseSolutionEntry = (ProgrammingExerciseSolutionEntry) o;
    return Objects.equals(this.id, programmingExerciseSolutionEntry.id) &&
        Objects.equals(this.filePath, programmingExerciseSolutionEntry.filePath) &&
        Objects.equals(this.previousLine, programmingExerciseSolutionEntry.previousLine) &&
        Objects.equals(this.line, programmingExerciseSolutionEntry.line) &&
        Objects.equals(this.previousCode, programmingExerciseSolutionEntry.previousCode) &&
        Objects.equals(this.code, programmingExerciseSolutionEntry.code) &&
        Objects.equals(this.codeHint, programmingExerciseSolutionEntry.codeHint) &&
        Objects.equals(this.testCase, programmingExerciseSolutionEntry.testCase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, filePath, previousLine, line, previousCode, code, codeHint, testCase);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgrammingExerciseSolutionEntry {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    previousLine: ").append(toIndentedString(previousLine)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    previousCode: ").append(toIndentedString(previousCode)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    codeHint: ").append(toIndentedString(codeHint)).append("\n");
    sb.append("    testCase: ").append(toIndentedString(testCase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("filePath");
    openapiFields.add("previousLine");
    openapiFields.add("line");
    openapiFields.add("previousCode");
    openapiFields.add("code");
    openapiFields.add("codeHint");
    openapiFields.add("testCase");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProgrammingExerciseSolutionEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProgrammingExerciseSolutionEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProgrammingExerciseSolutionEntry is not found in the empty JSON string", ProgrammingExerciseSolutionEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProgrammingExerciseSolutionEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProgrammingExerciseSolutionEntry` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("filePath") != null && !jsonObj.get("filePath").isJsonNull()) && !jsonObj.get("filePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filePath").toString()));
      }
      if ((jsonObj.get("previousCode") != null && !jsonObj.get("previousCode").isJsonNull()) && !jsonObj.get("previousCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousCode").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `codeHint`
      if (jsonObj.get("codeHint") != null && !jsonObj.get("codeHint").isJsonNull()) {
        CodeHint.validateJsonObject(jsonObj.getAsJsonObject("codeHint"));
      }
      // validate the optional field `testCase`
      if (jsonObj.get("testCase") != null && !jsonObj.get("testCase").isJsonNull()) {
        ProgrammingExerciseTestCase.validateJsonObject(jsonObj.getAsJsonObject("testCase"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProgrammingExerciseSolutionEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProgrammingExerciseSolutionEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProgrammingExerciseSolutionEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProgrammingExerciseSolutionEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<ProgrammingExerciseSolutionEntry>() {
           @Override
           public void write(JsonWriter out, ProgrammingExerciseSolutionEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProgrammingExerciseSolutionEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProgrammingExerciseSolutionEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProgrammingExerciseSolutionEntry
  * @throws IOException if the JSON string is invalid with respect to ProgrammingExerciseSolutionEntry
  */
  public static ProgrammingExerciseSolutionEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProgrammingExerciseSolutionEntry.class);
  }

 /**
  * Convert an instance of ProgrammingExerciseSolutionEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

