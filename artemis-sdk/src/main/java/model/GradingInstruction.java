/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Feedback;
import org.openapitools.client.model.GradingCriterion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GradingInstruction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class GradingInstruction {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private Double credits;

  public static final String SERIALIZED_NAME_GRADING_SCALE = "gradingScale";
  @SerializedName(SERIALIZED_NAME_GRADING_SCALE)
  private String gradingScale;

  public static final String SERIALIZED_NAME_INSTRUCTION_DESCRIPTION = "instructionDescription";
  @SerializedName(SERIALIZED_NAME_INSTRUCTION_DESCRIPTION)
  private String instructionDescription;

  public static final String SERIALIZED_NAME_FEEDBACK = "feedback";
  @SerializedName(SERIALIZED_NAME_FEEDBACK)
  private String feedback;

  public static final String SERIALIZED_NAME_USAGE_COUNT = "usageCount";
  @SerializedName(SERIALIZED_NAME_USAGE_COUNT)
  private Integer usageCount;

  public static final String SERIALIZED_NAME_GRADING_CRITERION = "gradingCriterion";
  @SerializedName(SERIALIZED_NAME_GRADING_CRITERION)
  private GradingCriterion gradingCriterion;

  public static final String SERIALIZED_NAME_FEEDBACKS = "feedbacks";
  @SerializedName(SERIALIZED_NAME_FEEDBACKS)
  private Set<Feedback> feedbacks = new LinkedHashSet<>();

  public GradingInstruction() {
  }

  public GradingInstruction id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public GradingInstruction credits(Double credits) {
    
    this.credits = credits;
    return this;
  }

   /**
   * Get credits
   * @return credits
  **/
  @javax.annotation.Nullable

  public Double getCredits() {
    return credits;
  }


  public void setCredits(Double credits) {
    this.credits = credits;
  }


  public GradingInstruction gradingScale(String gradingScale) {
    
    this.gradingScale = gradingScale;
    return this;
  }

   /**
   * Get gradingScale
   * @return gradingScale
  **/
  @javax.annotation.Nullable

  public String getGradingScale() {
    return gradingScale;
  }


  public void setGradingScale(String gradingScale) {
    this.gradingScale = gradingScale;
  }


  public GradingInstruction instructionDescription(String instructionDescription) {
    
    this.instructionDescription = instructionDescription;
    return this;
  }

   /**
   * Get instructionDescription
   * @return instructionDescription
  **/
  @javax.annotation.Nullable

  public String getInstructionDescription() {
    return instructionDescription;
  }


  public void setInstructionDescription(String instructionDescription) {
    this.instructionDescription = instructionDescription;
  }


  public GradingInstruction feedback(String feedback) {
    
    this.feedback = feedback;
    return this;
  }

   /**
   * Get feedback
   * @return feedback
  **/
  @javax.annotation.Nullable

  public String getFeedback() {
    return feedback;
  }


  public void setFeedback(String feedback) {
    this.feedback = feedback;
  }


  public GradingInstruction usageCount(Integer usageCount) {
    
    this.usageCount = usageCount;
    return this;
  }

   /**
   * Get usageCount
   * @return usageCount
  **/
  @javax.annotation.Nullable

  public Integer getUsageCount() {
    return usageCount;
  }


  public void setUsageCount(Integer usageCount) {
    this.usageCount = usageCount;
  }


  public GradingInstruction gradingCriterion(GradingCriterion gradingCriterion) {
    
    this.gradingCriterion = gradingCriterion;
    return this;
  }

   /**
   * Get gradingCriterion
   * @return gradingCriterion
  **/
  @javax.annotation.Nullable

  public GradingCriterion getGradingCriterion() {
    return gradingCriterion;
  }


  public void setGradingCriterion(GradingCriterion gradingCriterion) {
    this.gradingCriterion = gradingCriterion;
  }


  public GradingInstruction feedbacks(Set<Feedback> feedbacks) {
    
    this.feedbacks = feedbacks;
    return this;
  }

  public GradingInstruction addFeedbacksItem(Feedback feedbacksItem) {
    if (this.feedbacks == null) {
      this.feedbacks = new LinkedHashSet<>();
    }
    this.feedbacks.add(feedbacksItem);
    return this;
  }

   /**
   * Get feedbacks
   * @return feedbacks
  **/
  @javax.annotation.Nullable

  public Set<Feedback> getFeedbacks() {
    return feedbacks;
  }


  public void setFeedbacks(Set<Feedback> feedbacks) {
    this.feedbacks = feedbacks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GradingInstruction gradingInstruction = (GradingInstruction) o;
    return Objects.equals(this.id, gradingInstruction.id) &&
        Objects.equals(this.credits, gradingInstruction.credits) &&
        Objects.equals(this.gradingScale, gradingInstruction.gradingScale) &&
        Objects.equals(this.instructionDescription, gradingInstruction.instructionDescription) &&
        Objects.equals(this.feedback, gradingInstruction.feedback) &&
        Objects.equals(this.usageCount, gradingInstruction.usageCount) &&
        Objects.equals(this.gradingCriterion, gradingInstruction.gradingCriterion) &&
        Objects.equals(this.feedbacks, gradingInstruction.feedbacks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, credits, gradingScale, instructionDescription, feedback, usageCount, gradingCriterion, feedbacks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GradingInstruction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    gradingScale: ").append(toIndentedString(gradingScale)).append("\n");
    sb.append("    instructionDescription: ").append(toIndentedString(instructionDescription)).append("\n");
    sb.append("    feedback: ").append(toIndentedString(feedback)).append("\n");
    sb.append("    usageCount: ").append(toIndentedString(usageCount)).append("\n");
    sb.append("    gradingCriterion: ").append(toIndentedString(gradingCriterion)).append("\n");
    sb.append("    feedbacks: ").append(toIndentedString(feedbacks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("credits");
    openapiFields.add("gradingScale");
    openapiFields.add("instructionDescription");
    openapiFields.add("feedback");
    openapiFields.add("usageCount");
    openapiFields.add("gradingCriterion");
    openapiFields.add("feedbacks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GradingInstruction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GradingInstruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GradingInstruction is not found in the empty JSON string", GradingInstruction.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GradingInstruction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GradingInstruction` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("gradingScale") != null && !jsonObj.get("gradingScale").isJsonNull()) && !jsonObj.get("gradingScale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gradingScale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gradingScale").toString()));
      }
      if ((jsonObj.get("instructionDescription") != null && !jsonObj.get("instructionDescription").isJsonNull()) && !jsonObj.get("instructionDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructionDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructionDescription").toString()));
      }
      if ((jsonObj.get("feedback") != null && !jsonObj.get("feedback").isJsonNull()) && !jsonObj.get("feedback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedback").toString()));
      }
      // validate the optional field `gradingCriterion`
      if (jsonObj.get("gradingCriterion") != null && !jsonObj.get("gradingCriterion").isJsonNull()) {
        GradingCriterion.validateJsonObject(jsonObj.getAsJsonObject("gradingCriterion"));
      }
      if (jsonObj.get("feedbacks") != null && !jsonObj.get("feedbacks").isJsonNull()) {
        JsonArray jsonArrayfeedbacks = jsonObj.getAsJsonArray("feedbacks");
        if (jsonArrayfeedbacks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("feedbacks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `feedbacks` to be an array in the JSON string but got `%s`", jsonObj.get("feedbacks").toString()));
          }

          // validate the optional field `feedbacks` (array)
          for (int i = 0; i < jsonArrayfeedbacks.size(); i++) {
            Feedback.validateJsonObject(jsonArrayfeedbacks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GradingInstruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GradingInstruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GradingInstruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GradingInstruction.class));

       return (TypeAdapter<T>) new TypeAdapter<GradingInstruction>() {
           @Override
           public void write(JsonWriter out, GradingInstruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GradingInstruction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GradingInstruction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GradingInstruction
  * @throws IOException if the JSON string is invalid with respect to GradingInstruction
  */
  public static GradingInstruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GradingInstruction.class);
  }

 /**
  * Convert an instance of GradingInstruction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

