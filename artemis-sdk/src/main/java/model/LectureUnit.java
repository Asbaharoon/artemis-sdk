/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.AttachmentUnit;
import org.openapitools.client.model.ExerciseUnit;
import org.openapitools.client.model.LearningGoal;
import org.openapitools.client.model.Lecture;
import org.openapitools.client.model.OnlineUnit;
import org.openapitools.client.model.TextUnit;
import org.openapitools.client.model.VideoUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LectureUnit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class LectureUnit {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private OffsetDateTime releaseDate;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_LECTURE = "lecture";
  @SerializedName(SERIALIZED_NAME_LECTURE)
  private Lecture lecture;

  public static final String SERIALIZED_NAME_LEARNING_GOALS = "learningGoals";
  @SerializedName(SERIALIZED_NAME_LEARNING_GOALS)
  private Set<LearningGoal> learningGoals = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_VISIBLE_TO_STUDENTS = "visibleToStudents";
  @SerializedName(SERIALIZED_NAME_VISIBLE_TO_STUDENTS)
  private Boolean visibleToStudents;

  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Boolean completed;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected String type;

  public LectureUnit() {
    this.type = this.getClass().getSimpleName();
  }

  public LectureUnit id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public LectureUnit name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public LectureUnit releaseDate(OffsetDateTime releaseDate) {
    
    this.releaseDate = releaseDate;
    return this;
  }

   /**
   * Get releaseDate
   * @return releaseDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getReleaseDate() {
    return releaseDate;
  }


  public void setReleaseDate(OffsetDateTime releaseDate) {
    this.releaseDate = releaseDate;
  }


  public LectureUnit order(Integer order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nullable

  public Integer getOrder() {
    return order;
  }


  public void setOrder(Integer order) {
    this.order = order;
  }


  public LectureUnit lecture(Lecture lecture) {
    
    this.lecture = lecture;
    return this;
  }

   /**
   * Get lecture
   * @return lecture
  **/
  @javax.annotation.Nullable

  public Lecture getLecture() {
    return lecture;
  }


  public void setLecture(Lecture lecture) {
    this.lecture = lecture;
  }


  public LectureUnit learningGoals(Set<LearningGoal> learningGoals) {
    
    this.learningGoals = learningGoals;
    return this;
  }

  public LectureUnit addLearningGoalsItem(LearningGoal learningGoalsItem) {
    if (this.learningGoals == null) {
      this.learningGoals = new LinkedHashSet<>();
    }
    this.learningGoals.add(learningGoalsItem);
    return this;
  }

   /**
   * Get learningGoals
   * @return learningGoals
  **/
  @javax.annotation.Nullable

  public Set<LearningGoal> getLearningGoals() {
    return learningGoals;
  }


  public void setLearningGoals(Set<LearningGoal> learningGoals) {
    this.learningGoals = learningGoals;
  }


  public LectureUnit visibleToStudents(Boolean visibleToStudents) {
    
    this.visibleToStudents = visibleToStudents;
    return this;
  }

   /**
   * Get visibleToStudents
   * @return visibleToStudents
  **/
  @javax.annotation.Nullable

  public Boolean getVisibleToStudents() {
    return visibleToStudents;
  }


  public void setVisibleToStudents(Boolean visibleToStudents) {
    this.visibleToStudents = visibleToStudents;
  }


  public LectureUnit completed(Boolean completed) {
    
    this.completed = completed;
    return this;
  }

   /**
   * Get completed
   * @return completed
  **/
  @javax.annotation.Nullable

  public Boolean getCompleted() {
    return completed;
  }


  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }


  public LectureUnit type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LectureUnit lectureUnit = (LectureUnit) o;
    return Objects.equals(this.id, lectureUnit.id) &&
        Objects.equals(this.name, lectureUnit.name) &&
        Objects.equals(this.releaseDate, lectureUnit.releaseDate) &&
        Objects.equals(this.order, lectureUnit.order) &&
        Objects.equals(this.lecture, lectureUnit.lecture) &&
        Objects.equals(this.learningGoals, lectureUnit.learningGoals) &&
        Objects.equals(this.visibleToStudents, lectureUnit.visibleToStudents) &&
        Objects.equals(this.completed, lectureUnit.completed) &&
        Objects.equals(this.type, lectureUnit.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, releaseDate, order, lecture, learningGoals, visibleToStudents, completed, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LectureUnit {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    lecture: ").append(toIndentedString(lecture)).append("\n");
    sb.append("    learningGoals: ").append(toIndentedString(learningGoals)).append("\n");
    sb.append("    visibleToStudents: ").append(toIndentedString(visibleToStudents)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("releaseDate");
    openapiFields.add("order");
    openapiFields.add("lecture");
    openapiFields.add("learningGoals");
    openapiFields.add("visibleToStudents");
    openapiFields.add("completed");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LectureUnit
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LectureUnit.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LectureUnit is not found in the empty JSON string", LectureUnit.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonObj.get("type").getAsString();
      switch (discriminatorValue) {
        case "AttachmentUnit":
          AttachmentUnit.validateJsonObject(jsonObj);
          break;
        case "ExerciseUnit":
          ExerciseUnit.validateJsonObject(jsonObj);
          break;
        case "OnlineUnit":
          OnlineUnit.validateJsonObject(jsonObj);
          break;
        case "TextUnit":
          TextUnit.validateJsonObject(jsonObj);
          break;
        case "VideoUnit":
          VideoUnit.validateJsonObject(jsonObj);
          break;
        default: 
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of LectureUnit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LectureUnit
  * @throws IOException if the JSON string is invalid with respect to LectureUnit
  */
  public static LectureUnit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LectureUnit.class);
  }

 /**
  * Convert an instance of LectureUnit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

