/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Exercise;
import org.openapitools.client.model.GetAllTextSubmissions200ResponseInner;
import org.openapitools.client.model.Participation;
import org.openapitools.client.model.Result;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProgrammingExerciseStudentParticipation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ProgrammingExerciseStudentParticipation extends Participation {
  public static final String SERIALIZED_NAME_PRESENTATION_SCORE = "presentationScore";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_SCORE)
  private Integer presentationScore;

  public static final String SERIALIZED_NAME_STUDENT = "student";
  @SerializedName(SERIALIZED_NAME_STUDENT)
  private User student;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private Team team;

  public static final String SERIALIZED_NAME_REPOSITORY_URL = "repositoryUrl";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_URL)
  private String repositoryUrl;

  public static final String SERIALIZED_NAME_BUILD_PLAN_ID = "buildPlanId";
  @SerializedName(SERIALIZED_NAME_BUILD_PLAN_ID)
  private String buildPlanId;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_USER_INDEPENDENT_REPOSITORY_URL = "userIndependentRepositoryUrl";
  @SerializedName(SERIALIZED_NAME_USER_INDEPENDENT_REPOSITORY_URL)
  private String userIndependentRepositoryUrl;

  public static final String SERIALIZED_NAME_PARTICIPANT_IDENTIFIER = "participantIdentifier";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_IDENTIFIER)
  private String participantIdentifier;

  public static final String SERIALIZED_NAME_PARTICIPANT_NAME = "participantName";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_NAME)
  private String participantName;

  public ProgrammingExerciseStudentParticipation() {
    this.type = this.getClass().getSimpleName();
  }

  public ProgrammingExerciseStudentParticipation presentationScore(Integer presentationScore) {
    
    this.presentationScore = presentationScore;
    return this;
  }

   /**
   * Get presentationScore
   * @return presentationScore
  **/
  @javax.annotation.Nullable

  public Integer getPresentationScore() {
    return presentationScore;
  }


  public void setPresentationScore(Integer presentationScore) {
    this.presentationScore = presentationScore;
  }


  public ProgrammingExerciseStudentParticipation student(User student) {
    
    this.student = student;
    return this;
  }

   /**
   * Get student
   * @return student
  **/
  @javax.annotation.Nullable

  public User getStudent() {
    return student;
  }


  public void setStudent(User student) {
    this.student = student;
  }


  public ProgrammingExerciseStudentParticipation team(Team team) {
    
    this.team = team;
    return this;
  }

   /**
   * Get team
   * @return team
  **/
  @javax.annotation.Nullable

  public Team getTeam() {
    return team;
  }


  public void setTeam(Team team) {
    this.team = team;
  }


  public ProgrammingExerciseStudentParticipation repositoryUrl(String repositoryUrl) {
    
    this.repositoryUrl = repositoryUrl;
    return this;
  }

   /**
   * Get repositoryUrl
   * @return repositoryUrl
  **/
  @javax.annotation.Nullable

  public String getRepositoryUrl() {
    return repositoryUrl;
  }


  public void setRepositoryUrl(String repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
  }


  public ProgrammingExerciseStudentParticipation buildPlanId(String buildPlanId) {
    
    this.buildPlanId = buildPlanId;
    return this;
  }

   /**
   * Get buildPlanId
   * @return buildPlanId
  **/
  @javax.annotation.Nullable

  public String getBuildPlanId() {
    return buildPlanId;
  }


  public void setBuildPlanId(String buildPlanId) {
    this.buildPlanId = buildPlanId;
  }


  public ProgrammingExerciseStudentParticipation branch(String branch) {
    
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @javax.annotation.Nullable

  public String getBranch() {
    return branch;
  }


  public void setBranch(String branch) {
    this.branch = branch;
  }


  public ProgrammingExerciseStudentParticipation userIndependentRepositoryUrl(String userIndependentRepositoryUrl) {
    
    this.userIndependentRepositoryUrl = userIndependentRepositoryUrl;
    return this;
  }

   /**
   * Get userIndependentRepositoryUrl
   * @return userIndependentRepositoryUrl
  **/
  @javax.annotation.Nullable

  public String getUserIndependentRepositoryUrl() {
    return userIndependentRepositoryUrl;
  }


  public void setUserIndependentRepositoryUrl(String userIndependentRepositoryUrl) {
    this.userIndependentRepositoryUrl = userIndependentRepositoryUrl;
  }


  public ProgrammingExerciseStudentParticipation participantIdentifier(String participantIdentifier) {
    
    this.participantIdentifier = participantIdentifier;
    return this;
  }

   /**
   * Get participantIdentifier
   * @return participantIdentifier
  **/
  @javax.annotation.Nullable

  public String getParticipantIdentifier() {
    return participantIdentifier;
  }


  public void setParticipantIdentifier(String participantIdentifier) {
    this.participantIdentifier = participantIdentifier;
  }


  public ProgrammingExerciseStudentParticipation participantName(String participantName) {
    
    this.participantName = participantName;
    return this;
  }

   /**
   * Get participantName
   * @return participantName
  **/
  @javax.annotation.Nullable

  public String getParticipantName() {
    return participantName;
  }


  public void setParticipantName(String participantName) {
    this.participantName = participantName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) o;
    return Objects.equals(this.presentationScore, programmingExerciseStudentParticipation.presentationScore) &&
        Objects.equals(this.student, programmingExerciseStudentParticipation.student) &&
        Objects.equals(this.team, programmingExerciseStudentParticipation.team) &&
        Objects.equals(this.repositoryUrl, programmingExerciseStudentParticipation.repositoryUrl) &&
        Objects.equals(this.buildPlanId, programmingExerciseStudentParticipation.buildPlanId) &&
        Objects.equals(this.branch, programmingExerciseStudentParticipation.branch) &&
        Objects.equals(this.userIndependentRepositoryUrl, programmingExerciseStudentParticipation.userIndependentRepositoryUrl) &&
        Objects.equals(this.participantIdentifier, programmingExerciseStudentParticipation.participantIdentifier) &&
        Objects.equals(this.participantName, programmingExerciseStudentParticipation.participantName) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(presentationScore, student, team, repositoryUrl, buildPlanId, branch, userIndependentRepositoryUrl, participantIdentifier, participantName, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgrammingExerciseStudentParticipation {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    presentationScore: ").append(toIndentedString(presentationScore)).append("\n");
    sb.append("    student: ").append(toIndentedString(student)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    repositoryUrl: ").append(toIndentedString(repositoryUrl)).append("\n");
    sb.append("    buildPlanId: ").append(toIndentedString(buildPlanId)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    userIndependentRepositoryUrl: ").append(toIndentedString(userIndependentRepositoryUrl)).append("\n");
    sb.append("    participantIdentifier: ").append(toIndentedString(participantIdentifier)).append("\n");
    sb.append("    participantName: ").append(toIndentedString(participantName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("initializationState");
    openapiFields.add("initializationDate");
    openapiFields.add("individualDueDate");
    openapiFields.add("testRun");
    openapiFields.add("exercise");
    openapiFields.add("results");
    openapiFields.add("submissions");
    openapiFields.add("submissionCount");
    openapiFields.add("type");
    openapiFields.add("presentationScore");
    openapiFields.add("student");
    openapiFields.add("team");
    openapiFields.add("repositoryUrl");
    openapiFields.add("buildPlanId");
    openapiFields.add("branch");
    openapiFields.add("userIndependentRepositoryUrl");
    openapiFields.add("participantIdentifier");
    openapiFields.add("participantName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProgrammingExerciseStudentParticipation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProgrammingExerciseStudentParticipation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProgrammingExerciseStudentParticipation is not found in the empty JSON string", ProgrammingExerciseStudentParticipation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProgrammingExerciseStudentParticipation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProgrammingExerciseStudentParticipation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProgrammingExerciseStudentParticipation.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProgrammingExerciseStudentParticipation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProgrammingExerciseStudentParticipation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProgrammingExerciseStudentParticipation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProgrammingExerciseStudentParticipation.class));

       return (TypeAdapter<T>) new TypeAdapter<ProgrammingExerciseStudentParticipation>() {
           @Override
           public void write(JsonWriter out, ProgrammingExerciseStudentParticipation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProgrammingExerciseStudentParticipation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProgrammingExerciseStudentParticipation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProgrammingExerciseStudentParticipation
  * @throws IOException if the JSON string is invalid with respect to ProgrammingExerciseStudentParticipation
  */
  public static ProgrammingExerciseStudentParticipation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProgrammingExerciseStudentParticipation.class);
  }

 /**
  * Convert an instance of ProgrammingExerciseStudentParticipation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

