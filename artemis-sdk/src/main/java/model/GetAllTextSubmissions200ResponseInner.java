/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.BuildLogEntry;
import org.openapitools.client.model.FileUploadSubmission;
import org.openapitools.client.model.ModelingSubmission;
import org.openapitools.client.model.Participation;
import org.openapitools.client.model.ProgrammingSubmission;
import org.openapitools.client.model.QuizSubmission;
import org.openapitools.client.model.Result;
import org.openapitools.client.model.SimilarElementCount;
import org.openapitools.client.model.SubmittedAnswer;
import org.openapitools.client.model.TextBlock;
import org.openapitools.client.model.TextSubmission;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class GetAllTextSubmissions200ResponseInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetAllTextSubmissions200ResponseInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetAllTextSubmissions200ResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetAllTextSubmissions200ResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FileUploadSubmission> adapterFileUploadSubmission = gson.getDelegateAdapter(this, TypeToken.get(FileUploadSubmission.class));
            final TypeAdapter<ModelingSubmission> adapterModelingSubmission = gson.getDelegateAdapter(this, TypeToken.get(ModelingSubmission.class));
            final TypeAdapter<ProgrammingSubmission> adapterProgrammingSubmission = gson.getDelegateAdapter(this, TypeToken.get(ProgrammingSubmission.class));
            final TypeAdapter<QuizSubmission> adapterQuizSubmission = gson.getDelegateAdapter(this, TypeToken.get(QuizSubmission.class));
            final TypeAdapter<TextSubmission> adapterTextSubmission = gson.getDelegateAdapter(this, TypeToken.get(TextSubmission.class));

            return (TypeAdapter<T>) new TypeAdapter<GetAllTextSubmissions200ResponseInner>() {
                @Override
                public void write(JsonWriter out, GetAllTextSubmissions200ResponseInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `FileUploadSubmission`
                    if (value.getActualInstance() instanceof FileUploadSubmission) {
                        JsonObject obj = adapterFileUploadSubmission.toJsonTree((FileUploadSubmission)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ModelingSubmission`
                    if (value.getActualInstance() instanceof ModelingSubmission) {
                        JsonObject obj = adapterModelingSubmission.toJsonTree((ModelingSubmission)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ProgrammingSubmission`
                    if (value.getActualInstance() instanceof ProgrammingSubmission) {
                        JsonObject obj = adapterProgrammingSubmission.toJsonTree((ProgrammingSubmission)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `QuizSubmission`
                    if (value.getActualInstance() instanceof QuizSubmission) {
                        JsonObject obj = adapterQuizSubmission.toJsonTree((QuizSubmission)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `TextSubmission`
                    if (value.getActualInstance() instanceof TextSubmission) {
                        JsonObject obj = adapterTextSubmission.toJsonTree((TextSubmission)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: FileUploadSubmission, ModelingSubmission, ProgrammingSubmission, QuizSubmission, TextSubmission");
                }

                @Override
                public GetAllTextSubmissions200ResponseInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize FileUploadSubmission
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FileUploadSubmission.validateJsonObject(jsonObject);
                        actualAdapter = adapterFileUploadSubmission;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FileUploadSubmission'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FileUploadSubmission failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FileUploadSubmission'", e);
                    }

                    // deserialize ModelingSubmission
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ModelingSubmission.validateJsonObject(jsonObject);
                        actualAdapter = adapterModelingSubmission;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ModelingSubmission'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ModelingSubmission failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ModelingSubmission'", e);
                    }

                    // deserialize ProgrammingSubmission
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ProgrammingSubmission.validateJsonObject(jsonObject);
                        actualAdapter = adapterProgrammingSubmission;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ProgrammingSubmission'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ProgrammingSubmission failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ProgrammingSubmission'", e);
                    }

                    // deserialize QuizSubmission
                    try {
                        // validate the JSON object to see if any exception is thrown
                        QuizSubmission.validateJsonObject(jsonObject);
                        actualAdapter = adapterQuizSubmission;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'QuizSubmission'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for QuizSubmission failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'QuizSubmission'", e);
                    }

                    // deserialize TextSubmission
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TextSubmission.validateJsonObject(jsonObject);
                        actualAdapter = adapterTextSubmission;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TextSubmission'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TextSubmission failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TextSubmission'", e);
                    }

                    if (match == 1) {
                        GetAllTextSubmissions200ResponseInner ret = new GetAllTextSubmissions200ResponseInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetAllTextSubmissions200ResponseInner: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public GetAllTextSubmissions200ResponseInner() {
        super("oneOf", Boolean.FALSE);
    }

    public GetAllTextSubmissions200ResponseInner(FileUploadSubmission o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetAllTextSubmissions200ResponseInner(ModelingSubmission o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetAllTextSubmissions200ResponseInner(ProgrammingSubmission o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetAllTextSubmissions200ResponseInner(QuizSubmission o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetAllTextSubmissions200ResponseInner(TextSubmission o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("FileUploadSubmission", new GenericType<FileUploadSubmission>() {
        });
        schemas.put("ModelingSubmission", new GenericType<ModelingSubmission>() {
        });
        schemas.put("ProgrammingSubmission", new GenericType<ProgrammingSubmission>() {
        });
        schemas.put("QuizSubmission", new GenericType<QuizSubmission>() {
        });
        schemas.put("TextSubmission", new GenericType<TextSubmission>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return GetAllTextSubmissions200ResponseInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * FileUploadSubmission, ModelingSubmission, ProgrammingSubmission, QuizSubmission, TextSubmission
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof FileUploadSubmission) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ModelingSubmission) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ProgrammingSubmission) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof QuizSubmission) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TextSubmission) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be FileUploadSubmission, ModelingSubmission, ProgrammingSubmission, QuizSubmission, TextSubmission");
    }

    /**
     * Get the actual instance, which can be the following:
     * FileUploadSubmission, ModelingSubmission, ProgrammingSubmission, QuizSubmission, TextSubmission
     *
     * @return The actual instance (FileUploadSubmission, ModelingSubmission, ProgrammingSubmission, QuizSubmission, TextSubmission)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `FileUploadSubmission`. If the actual instance is not `FileUploadSubmission`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FileUploadSubmission`
     * @throws ClassCastException if the instance is not `FileUploadSubmission`
     */
    public FileUploadSubmission getFileUploadSubmission() throws ClassCastException {
        return (FileUploadSubmission)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ModelingSubmission`. If the actual instance is not `ModelingSubmission`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ModelingSubmission`
     * @throws ClassCastException if the instance is not `ModelingSubmission`
     */
    public ModelingSubmission getModelingSubmission() throws ClassCastException {
        return (ModelingSubmission)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ProgrammingSubmission`. If the actual instance is not `ProgrammingSubmission`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProgrammingSubmission`
     * @throws ClassCastException if the instance is not `ProgrammingSubmission`
     */
    public ProgrammingSubmission getProgrammingSubmission() throws ClassCastException {
        return (ProgrammingSubmission)super.getActualInstance();
    }

    /**
     * Get the actual instance of `QuizSubmission`. If the actual instance is not `QuizSubmission`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `QuizSubmission`
     * @throws ClassCastException if the instance is not `QuizSubmission`
     */
    public QuizSubmission getQuizSubmission() throws ClassCastException {
        return (QuizSubmission)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TextSubmission`. If the actual instance is not `TextSubmission`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TextSubmission`
     * @throws ClassCastException if the instance is not `TextSubmission`
     */
    public TextSubmission getTextSubmission() throws ClassCastException {
        return (TextSubmission)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetAllTextSubmissions200ResponseInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with FileUploadSubmission
    try {
      FileUploadSubmission.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for FileUploadSubmission failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ModelingSubmission
    try {
      ModelingSubmission.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ModelingSubmission failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ProgrammingSubmission
    try {
      ProgrammingSubmission.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ProgrammingSubmission failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with QuizSubmission
    try {
      QuizSubmission.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for QuizSubmission failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TextSubmission
    try {
      TextSubmission.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TextSubmission failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for GetAllTextSubmissions200ResponseInner with oneOf schemas: FileUploadSubmission, ModelingSubmission, ProgrammingSubmission, QuizSubmission, TextSubmission. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of GetAllTextSubmissions200ResponseInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetAllTextSubmissions200ResponseInner
  * @throws IOException if the JSON string is invalid with respect to GetAllTextSubmissions200ResponseInner
  */
  public static GetAllTextSubmissions200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAllTextSubmissions200ResponseInner.class);
  }

 /**
  * Convert an instance of GetAllTextSubmissions200ResponseInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

