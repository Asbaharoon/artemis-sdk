/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExamExerciseStartPreparationStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ExamExerciseStartPreparationStatus {
  public static final String SERIALIZED_NAME_FINISHED = "finished";
  @SerializedName(SERIALIZED_NAME_FINISHED)
  private Integer finished;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private Integer failed;

  public static final String SERIALIZED_NAME_OVERALL = "overall";
  @SerializedName(SERIALIZED_NAME_OVERALL)
  private Integer overall;

  public static final String SERIALIZED_NAME_PARTICIPATION_COUNT = "participationCount";
  @SerializedName(SERIALIZED_NAME_PARTICIPATION_COUNT)
  private Integer participationCount;

  public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public ExamExerciseStartPreparationStatus() {
  }

  public ExamExerciseStartPreparationStatus finished(Integer finished) {
    
    this.finished = finished;
    return this;
  }

   /**
   * Get finished
   * @return finished
  **/
  @javax.annotation.Nullable

  public Integer getFinished() {
    return finished;
  }


  public void setFinished(Integer finished) {
    this.finished = finished;
  }


  public ExamExerciseStartPreparationStatus failed(Integer failed) {
    
    this.failed = failed;
    return this;
  }

   /**
   * Get failed
   * @return failed
  **/
  @javax.annotation.Nullable

  public Integer getFailed() {
    return failed;
  }


  public void setFailed(Integer failed) {
    this.failed = failed;
  }


  public ExamExerciseStartPreparationStatus overall(Integer overall) {
    
    this.overall = overall;
    return this;
  }

   /**
   * Get overall
   * @return overall
  **/
  @javax.annotation.Nullable

  public Integer getOverall() {
    return overall;
  }


  public void setOverall(Integer overall) {
    this.overall = overall;
  }


  public ExamExerciseStartPreparationStatus participationCount(Integer participationCount) {
    
    this.participationCount = participationCount;
    return this;
  }

   /**
   * Get participationCount
   * @return participationCount
  **/
  @javax.annotation.Nullable

  public Integer getParticipationCount() {
    return participationCount;
  }


  public void setParticipationCount(Integer participationCount) {
    this.participationCount = participationCount;
  }


  public ExamExerciseStartPreparationStatus startedAt(OffsetDateTime startedAt) {
    
    this.startedAt = startedAt;
    return this;
  }

   /**
   * Get startedAt
   * @return startedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getStartedAt() {
    return startedAt;
  }


  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExamExerciseStartPreparationStatus examExerciseStartPreparationStatus = (ExamExerciseStartPreparationStatus) o;
    return Objects.equals(this.finished, examExerciseStartPreparationStatus.finished) &&
        Objects.equals(this.failed, examExerciseStartPreparationStatus.failed) &&
        Objects.equals(this.overall, examExerciseStartPreparationStatus.overall) &&
        Objects.equals(this.participationCount, examExerciseStartPreparationStatus.participationCount) &&
        Objects.equals(this.startedAt, examExerciseStartPreparationStatus.startedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(finished, failed, overall, participationCount, startedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExamExerciseStartPreparationStatus {\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    overall: ").append(toIndentedString(overall)).append("\n");
    sb.append("    participationCount: ").append(toIndentedString(participationCount)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("finished");
    openapiFields.add("failed");
    openapiFields.add("overall");
    openapiFields.add("participationCount");
    openapiFields.add("startedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExamExerciseStartPreparationStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExamExerciseStartPreparationStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExamExerciseStartPreparationStatus is not found in the empty JSON string", ExamExerciseStartPreparationStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExamExerciseStartPreparationStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExamExerciseStartPreparationStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExamExerciseStartPreparationStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExamExerciseStartPreparationStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExamExerciseStartPreparationStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExamExerciseStartPreparationStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ExamExerciseStartPreparationStatus>() {
           @Override
           public void write(JsonWriter out, ExamExerciseStartPreparationStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExamExerciseStartPreparationStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExamExerciseStartPreparationStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExamExerciseStartPreparationStatus
  * @throws IOException if the JSON string is invalid with respect to ExamExerciseStartPreparationStatus
  */
  public static ExamExerciseStartPreparationStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExamExerciseStartPreparationStatus.class);
  }

 /**
  * Convert an instance of ExamExerciseStartPreparationStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

