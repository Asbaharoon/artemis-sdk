/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Result;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Complaint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class Complaint {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_COMPLAINT_TEXT = "complaintText";
  @SerializedName(SERIALIZED_NAME_COMPLAINT_TEXT)
  private String complaintText;

  public static final String SERIALIZED_NAME_ACCEPTED = "accepted";
  @SerializedName(SERIALIZED_NAME_ACCEPTED)
  private Boolean accepted;

  public static final String SERIALIZED_NAME_SUBMITTED_TIME = "submittedTime";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_TIME)
  private OffsetDateTime submittedTime;

  /**
   * Gets or Sets complaintType
   */
  @JsonAdapter(ComplaintTypeEnum.Adapter.class)
  public enum ComplaintTypeEnum {
    COMPLAINT("COMPLAINT"),
    
    MORE_FEEDBACK("MORE_FEEDBACK");

    private String value;

    ComplaintTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComplaintTypeEnum fromValue(String value) {
      for (ComplaintTypeEnum b : ComplaintTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComplaintTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComplaintTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComplaintTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComplaintTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMPLAINT_TYPE = "complaintType";
  @SerializedName(SERIALIZED_NAME_COMPLAINT_TYPE)
  private ComplaintTypeEnum complaintType;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private Result result;

  public static final String SERIALIZED_NAME_STUDENT = "student";
  @SerializedName(SERIALIZED_NAME_STUDENT)
  private User student;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private Team team;

  public Complaint() {
  }

  public Complaint id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public Complaint complaintText(String complaintText) {
    
    this.complaintText = complaintText;
    return this;
  }

   /**
   * Get complaintText
   * @return complaintText
  **/
  @javax.annotation.Nullable

  public String getComplaintText() {
    return complaintText;
  }


  public void setComplaintText(String complaintText) {
    this.complaintText = complaintText;
  }


  public Complaint accepted(Boolean accepted) {
    
    this.accepted = accepted;
    return this;
  }

   /**
   * Get accepted
   * @return accepted
  **/
  @javax.annotation.Nullable

  public Boolean getAccepted() {
    return accepted;
  }


  public void setAccepted(Boolean accepted) {
    this.accepted = accepted;
  }


  public Complaint submittedTime(OffsetDateTime submittedTime) {
    
    this.submittedTime = submittedTime;
    return this;
  }

   /**
   * Get submittedTime
   * @return submittedTime
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getSubmittedTime() {
    return submittedTime;
  }


  public void setSubmittedTime(OffsetDateTime submittedTime) {
    this.submittedTime = submittedTime;
  }


  public Complaint complaintType(ComplaintTypeEnum complaintType) {
    
    this.complaintType = complaintType;
    return this;
  }

   /**
   * Get complaintType
   * @return complaintType
  **/
  @javax.annotation.Nullable

  public ComplaintTypeEnum getComplaintType() {
    return complaintType;
  }


  public void setComplaintType(ComplaintTypeEnum complaintType) {
    this.complaintType = complaintType;
  }


  public Complaint result(Result result) {
    
    this.result = result;
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @javax.annotation.Nullable

  public Result getResult() {
    return result;
  }


  public void setResult(Result result) {
    this.result = result;
  }


  public Complaint student(User student) {
    
    this.student = student;
    return this;
  }

   /**
   * Get student
   * @return student
  **/
  @javax.annotation.Nullable

  public User getStudent() {
    return student;
  }


  public void setStudent(User student) {
    this.student = student;
  }


  public Complaint team(Team team) {
    
    this.team = team;
    return this;
  }

   /**
   * Get team
   * @return team
  **/
  @javax.annotation.Nullable

  public Team getTeam() {
    return team;
  }


  public void setTeam(Team team) {
    this.team = team;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Complaint complaint = (Complaint) o;
    return Objects.equals(this.id, complaint.id) &&
        Objects.equals(this.complaintText, complaint.complaintText) &&
        Objects.equals(this.accepted, complaint.accepted) &&
        Objects.equals(this.submittedTime, complaint.submittedTime) &&
        Objects.equals(this.complaintType, complaint.complaintType) &&
        Objects.equals(this.result, complaint.result) &&
        Objects.equals(this.student, complaint.student) &&
        Objects.equals(this.team, complaint.team);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, complaintText, accepted, submittedTime, complaintType, result, student, team);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Complaint {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    complaintText: ").append(toIndentedString(complaintText)).append("\n");
    sb.append("    accepted: ").append(toIndentedString(accepted)).append("\n");
    sb.append("    submittedTime: ").append(toIndentedString(submittedTime)).append("\n");
    sb.append("    complaintType: ").append(toIndentedString(complaintType)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    student: ").append(toIndentedString(student)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("complaintText");
    openapiFields.add("accepted");
    openapiFields.add("submittedTime");
    openapiFields.add("complaintType");
    openapiFields.add("result");
    openapiFields.add("student");
    openapiFields.add("team");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Complaint
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Complaint.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Complaint is not found in the empty JSON string", Complaint.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Complaint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Complaint` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("complaintText") != null && !jsonObj.get("complaintText").isJsonNull()) && !jsonObj.get("complaintText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complaintText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complaintText").toString()));
      }
      if ((jsonObj.get("complaintType") != null && !jsonObj.get("complaintType").isJsonNull()) && !jsonObj.get("complaintType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complaintType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complaintType").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        Result.validateJsonObject(jsonObj.getAsJsonObject("result"));
      }
      // validate the optional field `student`
      if (jsonObj.get("student") != null && !jsonObj.get("student").isJsonNull()) {
        User.validateJsonObject(jsonObj.getAsJsonObject("student"));
      }
      // validate the optional field `team`
      if (jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) {
        Team.validateJsonObject(jsonObj.getAsJsonObject("team"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Complaint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Complaint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Complaint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Complaint.class));

       return (TypeAdapter<T>) new TypeAdapter<Complaint>() {
           @Override
           public void write(JsonWriter out, Complaint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Complaint read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Complaint given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Complaint
  * @throws IOException if the JSON string is invalid with respect to Complaint
  */
  public static Complaint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Complaint.class);
  }

 /**
  * Convert an instance of Complaint to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

