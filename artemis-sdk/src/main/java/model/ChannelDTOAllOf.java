/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelDTOAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ChannelDTOAllOf {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_IS_ANNOUNCEMENT_CHANNEL = "isAnnouncementChannel";
  @SerializedName(SERIALIZED_NAME_IS_ANNOUNCEMENT_CHANNEL)
  private Boolean isAnnouncementChannel;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "isArchived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_HAS_CHANNEL_MODERATION_RIGHTS = "hasChannelModerationRights";
  @SerializedName(SERIALIZED_NAME_HAS_CHANNEL_MODERATION_RIGHTS)
  private Boolean hasChannelModerationRights;

  public static final String SERIALIZED_NAME_IS_CHANNEL_MODERATOR = "isChannelModerator";
  @SerializedName(SERIALIZED_NAME_IS_CHANNEL_MODERATOR)
  private Boolean isChannelModerator;

  public ChannelDTOAllOf() {
  }

  public ChannelDTOAllOf name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ChannelDTOAllOf description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ChannelDTOAllOf topic(String topic) {
    
    this.topic = topic;
    return this;
  }

   /**
   * Get topic
   * @return topic
  **/
  @javax.annotation.Nullable

  public String getTopic() {
    return topic;
  }


  public void setTopic(String topic) {
    this.topic = topic;
  }


  public ChannelDTOAllOf isPublic(Boolean isPublic) {
    
    this.isPublic = isPublic;
    return this;
  }

   /**
   * Get isPublic
   * @return isPublic
  **/
  @javax.annotation.Nullable

  public Boolean getIsPublic() {
    return isPublic;
  }


  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public ChannelDTOAllOf isAnnouncementChannel(Boolean isAnnouncementChannel) {
    
    this.isAnnouncementChannel = isAnnouncementChannel;
    return this;
  }

   /**
   * Get isAnnouncementChannel
   * @return isAnnouncementChannel
  **/
  @javax.annotation.Nullable

  public Boolean getIsAnnouncementChannel() {
    return isAnnouncementChannel;
  }


  public void setIsAnnouncementChannel(Boolean isAnnouncementChannel) {
    this.isAnnouncementChannel = isAnnouncementChannel;
  }


  public ChannelDTOAllOf isArchived(Boolean isArchived) {
    
    this.isArchived = isArchived;
    return this;
  }

   /**
   * Get isArchived
   * @return isArchived
  **/
  @javax.annotation.Nullable

  public Boolean getIsArchived() {
    return isArchived;
  }


  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }


  public ChannelDTOAllOf hasChannelModerationRights(Boolean hasChannelModerationRights) {
    
    this.hasChannelModerationRights = hasChannelModerationRights;
    return this;
  }

   /**
   * Get hasChannelModerationRights
   * @return hasChannelModerationRights
  **/
  @javax.annotation.Nullable

  public Boolean getHasChannelModerationRights() {
    return hasChannelModerationRights;
  }


  public void setHasChannelModerationRights(Boolean hasChannelModerationRights) {
    this.hasChannelModerationRights = hasChannelModerationRights;
  }


  public ChannelDTOAllOf isChannelModerator(Boolean isChannelModerator) {
    
    this.isChannelModerator = isChannelModerator;
    return this;
  }

   /**
   * Get isChannelModerator
   * @return isChannelModerator
  **/
  @javax.annotation.Nullable

  public Boolean getIsChannelModerator() {
    return isChannelModerator;
  }


  public void setIsChannelModerator(Boolean isChannelModerator) {
    this.isChannelModerator = isChannelModerator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelDTOAllOf channelDTOAllOf = (ChannelDTOAllOf) o;
    return Objects.equals(this.name, channelDTOAllOf.name) &&
        Objects.equals(this.description, channelDTOAllOf.description) &&
        Objects.equals(this.topic, channelDTOAllOf.topic) &&
        Objects.equals(this.isPublic, channelDTOAllOf.isPublic) &&
        Objects.equals(this.isAnnouncementChannel, channelDTOAllOf.isAnnouncementChannel) &&
        Objects.equals(this.isArchived, channelDTOAllOf.isArchived) &&
        Objects.equals(this.hasChannelModerationRights, channelDTOAllOf.hasChannelModerationRights) &&
        Objects.equals(this.isChannelModerator, channelDTOAllOf.isChannelModerator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, topic, isPublic, isAnnouncementChannel, isArchived, hasChannelModerationRights, isChannelModerator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelDTOAllOf {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    isAnnouncementChannel: ").append(toIndentedString(isAnnouncementChannel)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    hasChannelModerationRights: ").append(toIndentedString(hasChannelModerationRights)).append("\n");
    sb.append("    isChannelModerator: ").append(toIndentedString(isChannelModerator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("topic");
    openapiFields.add("isPublic");
    openapiFields.add("isAnnouncementChannel");
    openapiFields.add("isArchived");
    openapiFields.add("hasChannelModerationRights");
    openapiFields.add("isChannelModerator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ChannelDTOAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ChannelDTOAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelDTOAllOf is not found in the empty JSON string", ChannelDTOAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ChannelDTOAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelDTOAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelDTOAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelDTOAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelDTOAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelDTOAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelDTOAllOf>() {
           @Override
           public void write(JsonWriter out, ChannelDTOAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelDTOAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChannelDTOAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChannelDTOAllOf
  * @throws IOException if the JSON string is invalid with respect to ChannelDTOAllOf
  */
  public static ChannelDTOAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelDTOAllOf.class);
  }

 /**
  * Convert an instance of ChannelDTOAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

