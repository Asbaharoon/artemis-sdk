/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserPageableSearchDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class UserPageableSearchDTO {
  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_SEARCH_TERM = "searchTerm";
  @SerializedName(SERIALIZED_NAME_SEARCH_TERM)
  private String searchTerm;

  /**
   * Gets or Sets sortingOrder
   */
  @JsonAdapter(SortingOrderEnum.Adapter.class)
  public enum SortingOrderEnum {
    ASCENDING("ASCENDING"),
    
    DESCENDING("DESCENDING");

    private String value;

    SortingOrderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortingOrderEnum fromValue(String value) {
      for (SortingOrderEnum b : SortingOrderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortingOrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortingOrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortingOrderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortingOrderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SORTING_ORDER = "sortingOrder";
  @SerializedName(SERIALIZED_NAME_SORTING_ORDER)
  private SortingOrderEnum sortingOrder;

  public static final String SERIALIZED_NAME_SORTED_COLUMN = "sortedColumn";
  @SerializedName(SERIALIZED_NAME_SORTED_COLUMN)
  private String sortedColumn;

  public static final String SERIALIZED_NAME_AUTHORITIES = "authorities";
  @SerializedName(SERIALIZED_NAME_AUTHORITIES)
  private Set<String> authorities = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ORIGINS = "origins";
  @SerializedName(SERIALIZED_NAME_ORIGINS)
  private Set<String> origins = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Set<String> status = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_COURSE_IDS = "courseIds";
  @SerializedName(SERIALIZED_NAME_COURSE_IDS)
  private Set<Long> courseIds = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBERS = "registrationNumbers";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBERS)
  private Set<String> registrationNumbers = new LinkedHashSet<>();

  public UserPageableSearchDTO() {
  }

  public UserPageableSearchDTO page(Integer page) {
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable

  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    this.page = page;
  }


  public UserPageableSearchDTO pageSize(Integer pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @javax.annotation.Nullable

  public Integer getPageSize() {
    return pageSize;
  }


  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public UserPageableSearchDTO searchTerm(String searchTerm) {
    
    this.searchTerm = searchTerm;
    return this;
  }

   /**
   * Get searchTerm
   * @return searchTerm
  **/
  @javax.annotation.Nullable

  public String getSearchTerm() {
    return searchTerm;
  }


  public void setSearchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
  }


  public UserPageableSearchDTO sortingOrder(SortingOrderEnum sortingOrder) {
    
    this.sortingOrder = sortingOrder;
    return this;
  }

   /**
   * Get sortingOrder
   * @return sortingOrder
  **/
  @javax.annotation.Nullable

  public SortingOrderEnum getSortingOrder() {
    return sortingOrder;
  }


  public void setSortingOrder(SortingOrderEnum sortingOrder) {
    this.sortingOrder = sortingOrder;
  }


  public UserPageableSearchDTO sortedColumn(String sortedColumn) {
    
    this.sortedColumn = sortedColumn;
    return this;
  }

   /**
   * Get sortedColumn
   * @return sortedColumn
  **/
  @javax.annotation.Nullable

  public String getSortedColumn() {
    return sortedColumn;
  }


  public void setSortedColumn(String sortedColumn) {
    this.sortedColumn = sortedColumn;
  }


  public UserPageableSearchDTO authorities(Set<String> authorities) {
    
    this.authorities = authorities;
    return this;
  }

  public UserPageableSearchDTO addAuthoritiesItem(String authoritiesItem) {
    if (this.authorities == null) {
      this.authorities = new LinkedHashSet<>();
    }
    this.authorities.add(authoritiesItem);
    return this;
  }

   /**
   * Get authorities
   * @return authorities
  **/
  @javax.annotation.Nullable

  public Set<String> getAuthorities() {
    return authorities;
  }


  public void setAuthorities(Set<String> authorities) {
    this.authorities = authorities;
  }


  public UserPageableSearchDTO origins(Set<String> origins) {
    
    this.origins = origins;
    return this;
  }

  public UserPageableSearchDTO addOriginsItem(String originsItem) {
    if (this.origins == null) {
      this.origins = new LinkedHashSet<>();
    }
    this.origins.add(originsItem);
    return this;
  }

   /**
   * Get origins
   * @return origins
  **/
  @javax.annotation.Nullable

  public Set<String> getOrigins() {
    return origins;
  }


  public void setOrigins(Set<String> origins) {
    this.origins = origins;
  }


  public UserPageableSearchDTO status(Set<String> status) {
    
    this.status = status;
    return this;
  }

  public UserPageableSearchDTO addStatusItem(String statusItem) {
    if (this.status == null) {
      this.status = new LinkedHashSet<>();
    }
    this.status.add(statusItem);
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable

  public Set<String> getStatus() {
    return status;
  }


  public void setStatus(Set<String> status) {
    this.status = status;
  }


  public UserPageableSearchDTO courseIds(Set<Long> courseIds) {
    
    this.courseIds = courseIds;
    return this;
  }

  public UserPageableSearchDTO addCourseIdsItem(Long courseIdsItem) {
    if (this.courseIds == null) {
      this.courseIds = new LinkedHashSet<>();
    }
    this.courseIds.add(courseIdsItem);
    return this;
  }

   /**
   * Get courseIds
   * @return courseIds
  **/
  @javax.annotation.Nullable

  public Set<Long> getCourseIds() {
    return courseIds;
  }


  public void setCourseIds(Set<Long> courseIds) {
    this.courseIds = courseIds;
  }


  public UserPageableSearchDTO registrationNumbers(Set<String> registrationNumbers) {
    
    this.registrationNumbers = registrationNumbers;
    return this;
  }

  public UserPageableSearchDTO addRegistrationNumbersItem(String registrationNumbersItem) {
    if (this.registrationNumbers == null) {
      this.registrationNumbers = new LinkedHashSet<>();
    }
    this.registrationNumbers.add(registrationNumbersItem);
    return this;
  }

   /**
   * Get registrationNumbers
   * @return registrationNumbers
  **/
  @javax.annotation.Nullable

  public Set<String> getRegistrationNumbers() {
    return registrationNumbers;
  }


  public void setRegistrationNumbers(Set<String> registrationNumbers) {
    this.registrationNumbers = registrationNumbers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserPageableSearchDTO userPageableSearchDTO = (UserPageableSearchDTO) o;
    return Objects.equals(this.page, userPageableSearchDTO.page) &&
        Objects.equals(this.pageSize, userPageableSearchDTO.pageSize) &&
        Objects.equals(this.searchTerm, userPageableSearchDTO.searchTerm) &&
        Objects.equals(this.sortingOrder, userPageableSearchDTO.sortingOrder) &&
        Objects.equals(this.sortedColumn, userPageableSearchDTO.sortedColumn) &&
        Objects.equals(this.authorities, userPageableSearchDTO.authorities) &&
        Objects.equals(this.origins, userPageableSearchDTO.origins) &&
        Objects.equals(this.status, userPageableSearchDTO.status) &&
        Objects.equals(this.courseIds, userPageableSearchDTO.courseIds) &&
        Objects.equals(this.registrationNumbers, userPageableSearchDTO.registrationNumbers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(page, pageSize, searchTerm, sortingOrder, sortedColumn, authorities, origins, status, courseIds, registrationNumbers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserPageableSearchDTO {\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    searchTerm: ").append(toIndentedString(searchTerm)).append("\n");
    sb.append("    sortingOrder: ").append(toIndentedString(sortingOrder)).append("\n");
    sb.append("    sortedColumn: ").append(toIndentedString(sortedColumn)).append("\n");
    sb.append("    authorities: ").append(toIndentedString(authorities)).append("\n");
    sb.append("    origins: ").append(toIndentedString(origins)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    courseIds: ").append(toIndentedString(courseIds)).append("\n");
    sb.append("    registrationNumbers: ").append(toIndentedString(registrationNumbers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("page");
    openapiFields.add("pageSize");
    openapiFields.add("searchTerm");
    openapiFields.add("sortingOrder");
    openapiFields.add("sortedColumn");
    openapiFields.add("authorities");
    openapiFields.add("origins");
    openapiFields.add("status");
    openapiFields.add("courseIds");
    openapiFields.add("registrationNumbers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserPageableSearchDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserPageableSearchDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserPageableSearchDTO is not found in the empty JSON string", UserPageableSearchDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserPageableSearchDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserPageableSearchDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("searchTerm") != null && !jsonObj.get("searchTerm").isJsonNull()) && !jsonObj.get("searchTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchTerm").toString()));
      }
      if ((jsonObj.get("sortingOrder") != null && !jsonObj.get("sortingOrder").isJsonNull()) && !jsonObj.get("sortingOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortingOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortingOrder").toString()));
      }
      if ((jsonObj.get("sortedColumn") != null && !jsonObj.get("sortedColumn").isJsonNull()) && !jsonObj.get("sortedColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortedColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortedColumn").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("authorities") != null && !jsonObj.get("authorities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorities` to be an array in the JSON string but got `%s`", jsonObj.get("authorities").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("origins") != null && !jsonObj.get("origins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `origins` to be an array in the JSON string but got `%s`", jsonObj.get("origins").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("courseIds") != null && !jsonObj.get("courseIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseIds` to be an array in the JSON string but got `%s`", jsonObj.get("courseIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("registrationNumbers") != null && !jsonObj.get("registrationNumbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("registrationNumbers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserPageableSearchDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserPageableSearchDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserPageableSearchDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserPageableSearchDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UserPageableSearchDTO>() {
           @Override
           public void write(JsonWriter out, UserPageableSearchDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserPageableSearchDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserPageableSearchDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserPageableSearchDTO
  * @throws IOException if the JSON string is invalid with respect to UserPageableSearchDTO
  */
  public static UserPageableSearchDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserPageableSearchDTO.class);
  }

 /**
  * Convert an instance of UserPageableSearchDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

