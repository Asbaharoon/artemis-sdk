/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.AuxiliaryRepository;
import org.openapitools.client.model.ExerciseHint;
import org.openapitools.client.model.ProgrammingExerciseTask;
import org.openapitools.client.model.ProgrammingExerciseTestCase;
import org.openapitools.client.model.SolutionProgrammingExerciseParticipation;
import org.openapitools.client.model.StaticCodeAnalysisCategory;
import org.openapitools.client.model.SubmissionPolicy;
import org.openapitools.client.model.TemplateProgrammingExerciseParticipation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProgrammingExerciseAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ProgrammingExerciseAllOf {
  public static final String SERIALIZED_NAME_TEST_REPOSITORY_URL = "testRepositoryUrl";
  @SerializedName(SERIALIZED_NAME_TEST_REPOSITORY_URL)
  private String testRepositoryUrl;

  public static final String SERIALIZED_NAME_AUXILIARY_REPOSITORIES = "auxiliaryRepositories";
  @SerializedName(SERIALIZED_NAME_AUXILIARY_REPOSITORIES)
  private List<AuxiliaryRepository> auxiliaryRepositories = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLISH_BUILD_PLAN_URL = "publishBuildPlanUrl";
  @SerializedName(SERIALIZED_NAME_PUBLISH_BUILD_PLAN_URL)
  private Boolean publishBuildPlanUrl;

  public static final String SERIALIZED_NAME_ALLOW_ONLINE_EDITOR = "allowOnlineEditor";
  @SerializedName(SERIALIZED_NAME_ALLOW_ONLINE_EDITOR)
  private Boolean allowOnlineEditor;

  public static final String SERIALIZED_NAME_ALLOW_OFFLINE_IDE = "allowOfflineIde";
  @SerializedName(SERIALIZED_NAME_ALLOW_OFFLINE_IDE)
  private Boolean allowOfflineIde;

  public static final String SERIALIZED_NAME_STATIC_CODE_ANALYSIS_ENABLED = "staticCodeAnalysisEnabled";
  @SerializedName(SERIALIZED_NAME_STATIC_CODE_ANALYSIS_ENABLED)
  private Boolean staticCodeAnalysisEnabled;

  public static final String SERIALIZED_NAME_MAX_STATIC_CODE_ANALYSIS_PENALTY = "maxStaticCodeAnalysisPenalty";
  @SerializedName(SERIALIZED_NAME_MAX_STATIC_CODE_ANALYSIS_PENALTY)
  private Integer maxStaticCodeAnalysisPenalty;

  /**
   * Gets or Sets programmingLanguage
   */
  @JsonAdapter(ProgrammingLanguageEnum.Adapter.class)
  public enum ProgrammingLanguageEnum {
    JAVA("JAVA"),
    
    PYTHON("PYTHON"),
    
    C("C"),
    
    HASKELL("HASKELL"),
    
    KOTLIN("KOTLIN"),
    
    VHDL("VHDL"),
    
    ASSEMBLER("ASSEMBLER"),
    
    SWIFT("SWIFT"),
    
    OCAML("OCAML"),
    
    EMPTY("EMPTY");

    private String value;

    ProgrammingLanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProgrammingLanguageEnum fromValue(String value) {
      for (ProgrammingLanguageEnum b : ProgrammingLanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProgrammingLanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProgrammingLanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProgrammingLanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProgrammingLanguageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROGRAMMING_LANGUAGE = "programmingLanguage";
  @SerializedName(SERIALIZED_NAME_PROGRAMMING_LANGUAGE)
  private ProgrammingLanguageEnum programmingLanguage;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "packageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_SEQUENTIAL_TEST_RUNS = "sequentialTestRuns";
  @SerializedName(SERIALIZED_NAME_SEQUENTIAL_TEST_RUNS)
  private Boolean sequentialTestRuns;

  public static final String SERIALIZED_NAME_SHOW_TEST_NAMES_TO_STUDENTS = "showTestNamesToStudents";
  @SerializedName(SERIALIZED_NAME_SHOW_TEST_NAMES_TO_STUDENTS)
  private Boolean showTestNamesToStudents;

  public static final String SERIALIZED_NAME_BUILD_AND_TEST_STUDENT_SUBMISSIONS_AFTER_DUE_DATE = "buildAndTestStudentSubmissionsAfterDueDate";
  @SerializedName(SERIALIZED_NAME_BUILD_AND_TEST_STUDENT_SUBMISSIONS_AFTER_DUE_DATE)
  private OffsetDateTime buildAndTestStudentSubmissionsAfterDueDate;

  public static final String SERIALIZED_NAME_TEST_CASES_CHANGED = "testCasesChanged";
  @SerializedName(SERIALIZED_NAME_TEST_CASES_CHANGED)
  private Boolean testCasesChanged;

  public static final String SERIALIZED_NAME_PROJECT_KEY = "projectKey";
  @SerializedName(SERIALIZED_NAME_PROJECT_KEY)
  private String projectKey;

  public static final String SERIALIZED_NAME_BUILD_PLAN_ACCESS_SECRET = "buildPlanAccessSecret";
  @SerializedName(SERIALIZED_NAME_BUILD_PLAN_ACCESS_SECRET)
  private String buildPlanAccessSecret;

  public static final String SERIALIZED_NAME_TEMPLATE_PARTICIPATION = "templateParticipation";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_PARTICIPATION)
  private TemplateProgrammingExerciseParticipation templateParticipation;

  public static final String SERIALIZED_NAME_SOLUTION_PARTICIPATION = "solutionParticipation";
  @SerializedName(SERIALIZED_NAME_SOLUTION_PARTICIPATION)
  private SolutionProgrammingExerciseParticipation solutionParticipation;

  public static final String SERIALIZED_NAME_TEST_CASES = "testCases";
  @SerializedName(SERIALIZED_NAME_TEST_CASES)
  private Set<ProgrammingExerciseTestCase> testCases = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<ProgrammingExerciseTask> tasks = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATIC_CODE_ANALYSIS_CATEGORIES = "staticCodeAnalysisCategories";
  @SerializedName(SERIALIZED_NAME_STATIC_CODE_ANALYSIS_CATEGORIES)
  private Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SUBMISSION_POLICY = "submissionPolicy";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_POLICY)
  private SubmissionPolicy submissionPolicy;

  /**
   * Gets or Sets projectType
   */
  @JsonAdapter(ProjectTypeEnum.Adapter.class)
  public enum ProjectTypeEnum {
    MAVEN_MAVEN("MAVEN_MAVEN"),
    
    PLAIN_MAVEN("PLAIN_MAVEN"),
    
    PLAIN("PLAIN"),
    
    XCODE("XCODE"),
    
    FACT("FACT"),
    
    GCC("GCC"),
    
    PLAIN_GRADLE("PLAIN_GRADLE"),
    
    GRADLE_GRADLE("GRADLE_GRADLE");

    private String value;

    ProjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProjectTypeEnum fromValue(String value) {
      for (ProjectTypeEnum b : ProjectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProjectTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROJECT_TYPE = "projectType";
  @SerializedName(SERIALIZED_NAME_PROJECT_TYPE)
  private ProjectTypeEnum projectType;

  public static final String SERIALIZED_NAME_EXERCISE_HINTS = "exerciseHints";
  @SerializedName(SERIALIZED_NAME_EXERCISE_HINTS)
  private Set<ExerciseHint> exerciseHints = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TESTWISE_COVERAGE_ENABLED = "testwiseCoverageEnabled";
  @SerializedName(SERIALIZED_NAME_TESTWISE_COVERAGE_ENABLED)
  private Boolean testwiseCoverageEnabled;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_RELEASE_TESTS_WITH_EXAMPLE_SOLUTION = "releaseTestsWithExampleSolution";
  @SerializedName(SERIALIZED_NAME_RELEASE_TESTS_WITH_EXAMPLE_SOLUTION)
  private Boolean releaseTestsWithExampleSolution;

  public static final String SERIALIZED_NAME_IS_LOCAL_SIMULATION = "isLocalSimulation";
  @SerializedName(SERIALIZED_NAME_IS_LOCAL_SIMULATION)
  private Boolean isLocalSimulation;

  public static final String SERIALIZED_NAME_CHECKOUT_SOLUTION_REPOSITORY = "checkoutSolutionRepository";
  @SerializedName(SERIALIZED_NAME_CHECKOUT_SOLUTION_REPOSITORY)
  private Boolean checkoutSolutionRepository;

  public ProgrammingExerciseAllOf() {
  }

  public ProgrammingExerciseAllOf testRepositoryUrl(String testRepositoryUrl) {
    
    this.testRepositoryUrl = testRepositoryUrl;
    return this;
  }

   /**
   * Get testRepositoryUrl
   * @return testRepositoryUrl
  **/
  @javax.annotation.Nullable

  public String getTestRepositoryUrl() {
    return testRepositoryUrl;
  }


  public void setTestRepositoryUrl(String testRepositoryUrl) {
    this.testRepositoryUrl = testRepositoryUrl;
  }


  public ProgrammingExerciseAllOf auxiliaryRepositories(List<AuxiliaryRepository> auxiliaryRepositories) {
    
    this.auxiliaryRepositories = auxiliaryRepositories;
    return this;
  }

  public ProgrammingExerciseAllOf addAuxiliaryRepositoriesItem(AuxiliaryRepository auxiliaryRepositoriesItem) {
    if (this.auxiliaryRepositories == null) {
      this.auxiliaryRepositories = new ArrayList<>();
    }
    this.auxiliaryRepositories.add(auxiliaryRepositoriesItem);
    return this;
  }

   /**
   * Get auxiliaryRepositories
   * @return auxiliaryRepositories
  **/
  @javax.annotation.Nullable

  public List<AuxiliaryRepository> getAuxiliaryRepositories() {
    return auxiliaryRepositories;
  }


  public void setAuxiliaryRepositories(List<AuxiliaryRepository> auxiliaryRepositories) {
    this.auxiliaryRepositories = auxiliaryRepositories;
  }


  public ProgrammingExerciseAllOf publishBuildPlanUrl(Boolean publishBuildPlanUrl) {
    
    this.publishBuildPlanUrl = publishBuildPlanUrl;
    return this;
  }

   /**
   * Get publishBuildPlanUrl
   * @return publishBuildPlanUrl
  **/
  @javax.annotation.Nullable

  public Boolean getPublishBuildPlanUrl() {
    return publishBuildPlanUrl;
  }


  public void setPublishBuildPlanUrl(Boolean publishBuildPlanUrl) {
    this.publishBuildPlanUrl = publishBuildPlanUrl;
  }


  public ProgrammingExerciseAllOf allowOnlineEditor(Boolean allowOnlineEditor) {
    
    this.allowOnlineEditor = allowOnlineEditor;
    return this;
  }

   /**
   * Get allowOnlineEditor
   * @return allowOnlineEditor
  **/
  @javax.annotation.Nullable

  public Boolean getAllowOnlineEditor() {
    return allowOnlineEditor;
  }


  public void setAllowOnlineEditor(Boolean allowOnlineEditor) {
    this.allowOnlineEditor = allowOnlineEditor;
  }


  public ProgrammingExerciseAllOf allowOfflineIde(Boolean allowOfflineIde) {
    
    this.allowOfflineIde = allowOfflineIde;
    return this;
  }

   /**
   * Get allowOfflineIde
   * @return allowOfflineIde
  **/
  @javax.annotation.Nullable

  public Boolean getAllowOfflineIde() {
    return allowOfflineIde;
  }


  public void setAllowOfflineIde(Boolean allowOfflineIde) {
    this.allowOfflineIde = allowOfflineIde;
  }


  public ProgrammingExerciseAllOf staticCodeAnalysisEnabled(Boolean staticCodeAnalysisEnabled) {
    
    this.staticCodeAnalysisEnabled = staticCodeAnalysisEnabled;
    return this;
  }

   /**
   * Get staticCodeAnalysisEnabled
   * @return staticCodeAnalysisEnabled
  **/
  @javax.annotation.Nullable

  public Boolean getStaticCodeAnalysisEnabled() {
    return staticCodeAnalysisEnabled;
  }


  public void setStaticCodeAnalysisEnabled(Boolean staticCodeAnalysisEnabled) {
    this.staticCodeAnalysisEnabled = staticCodeAnalysisEnabled;
  }


  public ProgrammingExerciseAllOf maxStaticCodeAnalysisPenalty(Integer maxStaticCodeAnalysisPenalty) {
    
    this.maxStaticCodeAnalysisPenalty = maxStaticCodeAnalysisPenalty;
    return this;
  }

   /**
   * Get maxStaticCodeAnalysisPenalty
   * @return maxStaticCodeAnalysisPenalty
  **/
  @javax.annotation.Nullable

  public Integer getMaxStaticCodeAnalysisPenalty() {
    return maxStaticCodeAnalysisPenalty;
  }


  public void setMaxStaticCodeAnalysisPenalty(Integer maxStaticCodeAnalysisPenalty) {
    this.maxStaticCodeAnalysisPenalty = maxStaticCodeAnalysisPenalty;
  }


  public ProgrammingExerciseAllOf programmingLanguage(ProgrammingLanguageEnum programmingLanguage) {
    
    this.programmingLanguage = programmingLanguage;
    return this;
  }

   /**
   * Get programmingLanguage
   * @return programmingLanguage
  **/
  @javax.annotation.Nullable

  public ProgrammingLanguageEnum getProgrammingLanguage() {
    return programmingLanguage;
  }


  public void setProgrammingLanguage(ProgrammingLanguageEnum programmingLanguage) {
    this.programmingLanguage = programmingLanguage;
  }


  public ProgrammingExerciseAllOf packageName(String packageName) {
    
    this.packageName = packageName;
    return this;
  }

   /**
   * Get packageName
   * @return packageName
  **/
  @javax.annotation.Nullable

  public String getPackageName() {
    return packageName;
  }


  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public ProgrammingExerciseAllOf sequentialTestRuns(Boolean sequentialTestRuns) {
    
    this.sequentialTestRuns = sequentialTestRuns;
    return this;
  }

   /**
   * Get sequentialTestRuns
   * @return sequentialTestRuns
  **/
  @javax.annotation.Nullable

  public Boolean getSequentialTestRuns() {
    return sequentialTestRuns;
  }


  public void setSequentialTestRuns(Boolean sequentialTestRuns) {
    this.sequentialTestRuns = sequentialTestRuns;
  }


  public ProgrammingExerciseAllOf showTestNamesToStudents(Boolean showTestNamesToStudents) {
    
    this.showTestNamesToStudents = showTestNamesToStudents;
    return this;
  }

   /**
   * Get showTestNamesToStudents
   * @return showTestNamesToStudents
  **/
  @javax.annotation.Nullable

  public Boolean getShowTestNamesToStudents() {
    return showTestNamesToStudents;
  }


  public void setShowTestNamesToStudents(Boolean showTestNamesToStudents) {
    this.showTestNamesToStudents = showTestNamesToStudents;
  }


  public ProgrammingExerciseAllOf buildAndTestStudentSubmissionsAfterDueDate(OffsetDateTime buildAndTestStudentSubmissionsAfterDueDate) {
    
    this.buildAndTestStudentSubmissionsAfterDueDate = buildAndTestStudentSubmissionsAfterDueDate;
    return this;
  }

   /**
   * Get buildAndTestStudentSubmissionsAfterDueDate
   * @return buildAndTestStudentSubmissionsAfterDueDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getBuildAndTestStudentSubmissionsAfterDueDate() {
    return buildAndTestStudentSubmissionsAfterDueDate;
  }


  public void setBuildAndTestStudentSubmissionsAfterDueDate(OffsetDateTime buildAndTestStudentSubmissionsAfterDueDate) {
    this.buildAndTestStudentSubmissionsAfterDueDate = buildAndTestStudentSubmissionsAfterDueDate;
  }


  public ProgrammingExerciseAllOf testCasesChanged(Boolean testCasesChanged) {
    
    this.testCasesChanged = testCasesChanged;
    return this;
  }

   /**
   * Get testCasesChanged
   * @return testCasesChanged
  **/
  @javax.annotation.Nullable

  public Boolean getTestCasesChanged() {
    return testCasesChanged;
  }


  public void setTestCasesChanged(Boolean testCasesChanged) {
    this.testCasesChanged = testCasesChanged;
  }


  public ProgrammingExerciseAllOf projectKey(String projectKey) {
    
    this.projectKey = projectKey;
    return this;
  }

   /**
   * Get projectKey
   * @return projectKey
  **/
  @javax.annotation.Nullable

  public String getProjectKey() {
    return projectKey;
  }


  public void setProjectKey(String projectKey) {
    this.projectKey = projectKey;
  }


  public ProgrammingExerciseAllOf buildPlanAccessSecret(String buildPlanAccessSecret) {
    
    this.buildPlanAccessSecret = buildPlanAccessSecret;
    return this;
  }

   /**
   * Get buildPlanAccessSecret
   * @return buildPlanAccessSecret
  **/
  @javax.annotation.Nullable

  public String getBuildPlanAccessSecret() {
    return buildPlanAccessSecret;
  }


  public void setBuildPlanAccessSecret(String buildPlanAccessSecret) {
    this.buildPlanAccessSecret = buildPlanAccessSecret;
  }


  public ProgrammingExerciseAllOf templateParticipation(TemplateProgrammingExerciseParticipation templateParticipation) {
    
    this.templateParticipation = templateParticipation;
    return this;
  }

   /**
   * Get templateParticipation
   * @return templateParticipation
  **/
  @javax.annotation.Nullable

  public TemplateProgrammingExerciseParticipation getTemplateParticipation() {
    return templateParticipation;
  }


  public void setTemplateParticipation(TemplateProgrammingExerciseParticipation templateParticipation) {
    this.templateParticipation = templateParticipation;
  }


  public ProgrammingExerciseAllOf solutionParticipation(SolutionProgrammingExerciseParticipation solutionParticipation) {
    
    this.solutionParticipation = solutionParticipation;
    return this;
  }

   /**
   * Get solutionParticipation
   * @return solutionParticipation
  **/
  @javax.annotation.Nullable

  public SolutionProgrammingExerciseParticipation getSolutionParticipation() {
    return solutionParticipation;
  }


  public void setSolutionParticipation(SolutionProgrammingExerciseParticipation solutionParticipation) {
    this.solutionParticipation = solutionParticipation;
  }


  public ProgrammingExerciseAllOf testCases(Set<ProgrammingExerciseTestCase> testCases) {
    
    this.testCases = testCases;
    return this;
  }

  public ProgrammingExerciseAllOf addTestCasesItem(ProgrammingExerciseTestCase testCasesItem) {
    if (this.testCases == null) {
      this.testCases = new LinkedHashSet<>();
    }
    this.testCases.add(testCasesItem);
    return this;
  }

   /**
   * Get testCases
   * @return testCases
  **/
  @javax.annotation.Nullable

  public Set<ProgrammingExerciseTestCase> getTestCases() {
    return testCases;
  }


  public void setTestCases(Set<ProgrammingExerciseTestCase> testCases) {
    this.testCases = testCases;
  }


  public ProgrammingExerciseAllOf tasks(List<ProgrammingExerciseTask> tasks) {
    
    this.tasks = tasks;
    return this;
  }

  public ProgrammingExerciseAllOf addTasksItem(ProgrammingExerciseTask tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Get tasks
   * @return tasks
  **/
  @javax.annotation.Nullable

  public List<ProgrammingExerciseTask> getTasks() {
    return tasks;
  }


  public void setTasks(List<ProgrammingExerciseTask> tasks) {
    this.tasks = tasks;
  }


  public ProgrammingExerciseAllOf staticCodeAnalysisCategories(Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories) {
    
    this.staticCodeAnalysisCategories = staticCodeAnalysisCategories;
    return this;
  }

  public ProgrammingExerciseAllOf addStaticCodeAnalysisCategoriesItem(StaticCodeAnalysisCategory staticCodeAnalysisCategoriesItem) {
    if (this.staticCodeAnalysisCategories == null) {
      this.staticCodeAnalysisCategories = new LinkedHashSet<>();
    }
    this.staticCodeAnalysisCategories.add(staticCodeAnalysisCategoriesItem);
    return this;
  }

   /**
   * Get staticCodeAnalysisCategories
   * @return staticCodeAnalysisCategories
  **/
  @javax.annotation.Nullable

  public Set<StaticCodeAnalysisCategory> getStaticCodeAnalysisCategories() {
    return staticCodeAnalysisCategories;
  }


  public void setStaticCodeAnalysisCategories(Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories) {
    this.staticCodeAnalysisCategories = staticCodeAnalysisCategories;
  }


  public ProgrammingExerciseAllOf submissionPolicy(SubmissionPolicy submissionPolicy) {
    
    this.submissionPolicy = submissionPolicy;
    return this;
  }

   /**
   * Get submissionPolicy
   * @return submissionPolicy
  **/
  @javax.annotation.Nullable

  public SubmissionPolicy getSubmissionPolicy() {
    return submissionPolicy;
  }


  public void setSubmissionPolicy(SubmissionPolicy submissionPolicy) {
    this.submissionPolicy = submissionPolicy;
  }


  public ProgrammingExerciseAllOf projectType(ProjectTypeEnum projectType) {
    
    this.projectType = projectType;
    return this;
  }

   /**
   * Get projectType
   * @return projectType
  **/
  @javax.annotation.Nullable

  public ProjectTypeEnum getProjectType() {
    return projectType;
  }


  public void setProjectType(ProjectTypeEnum projectType) {
    this.projectType = projectType;
  }


  public ProgrammingExerciseAllOf exerciseHints(Set<ExerciseHint> exerciseHints) {
    
    this.exerciseHints = exerciseHints;
    return this;
  }

  public ProgrammingExerciseAllOf addExerciseHintsItem(ExerciseHint exerciseHintsItem) {
    if (this.exerciseHints == null) {
      this.exerciseHints = new LinkedHashSet<>();
    }
    this.exerciseHints.add(exerciseHintsItem);
    return this;
  }

   /**
   * Get exerciseHints
   * @return exerciseHints
  **/
  @javax.annotation.Nullable

  public Set<ExerciseHint> getExerciseHints() {
    return exerciseHints;
  }


  public void setExerciseHints(Set<ExerciseHint> exerciseHints) {
    this.exerciseHints = exerciseHints;
  }


  public ProgrammingExerciseAllOf testwiseCoverageEnabled(Boolean testwiseCoverageEnabled) {
    
    this.testwiseCoverageEnabled = testwiseCoverageEnabled;
    return this;
  }

   /**
   * Get testwiseCoverageEnabled
   * @return testwiseCoverageEnabled
  **/
  @javax.annotation.Nullable

  public Boolean getTestwiseCoverageEnabled() {
    return testwiseCoverageEnabled;
  }


  public void setTestwiseCoverageEnabled(Boolean testwiseCoverageEnabled) {
    this.testwiseCoverageEnabled = testwiseCoverageEnabled;
  }


  public ProgrammingExerciseAllOf branch(String branch) {
    
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @javax.annotation.Nullable

  public String getBranch() {
    return branch;
  }


  public void setBranch(String branch) {
    this.branch = branch;
  }


  public ProgrammingExerciseAllOf releaseTestsWithExampleSolution(Boolean releaseTestsWithExampleSolution) {
    
    this.releaseTestsWithExampleSolution = releaseTestsWithExampleSolution;
    return this;
  }

   /**
   * Get releaseTestsWithExampleSolution
   * @return releaseTestsWithExampleSolution
  **/
  @javax.annotation.Nullable

  public Boolean getReleaseTestsWithExampleSolution() {
    return releaseTestsWithExampleSolution;
  }


  public void setReleaseTestsWithExampleSolution(Boolean releaseTestsWithExampleSolution) {
    this.releaseTestsWithExampleSolution = releaseTestsWithExampleSolution;
  }


  public ProgrammingExerciseAllOf isLocalSimulation(Boolean isLocalSimulation) {
    
    this.isLocalSimulation = isLocalSimulation;
    return this;
  }

   /**
   * Get isLocalSimulation
   * @return isLocalSimulation
  **/
  @javax.annotation.Nullable

  public Boolean getIsLocalSimulation() {
    return isLocalSimulation;
  }


  public void setIsLocalSimulation(Boolean isLocalSimulation) {
    this.isLocalSimulation = isLocalSimulation;
  }


  public ProgrammingExerciseAllOf checkoutSolutionRepository(Boolean checkoutSolutionRepository) {
    
    this.checkoutSolutionRepository = checkoutSolutionRepository;
    return this;
  }

   /**
   * Get checkoutSolutionRepository
   * @return checkoutSolutionRepository
  **/
  @javax.annotation.Nullable

  public Boolean getCheckoutSolutionRepository() {
    return checkoutSolutionRepository;
  }


  public void setCheckoutSolutionRepository(Boolean checkoutSolutionRepository) {
    this.checkoutSolutionRepository = checkoutSolutionRepository;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgrammingExerciseAllOf programmingExerciseAllOf = (ProgrammingExerciseAllOf) o;
    return Objects.equals(this.testRepositoryUrl, programmingExerciseAllOf.testRepositoryUrl) &&
        Objects.equals(this.auxiliaryRepositories, programmingExerciseAllOf.auxiliaryRepositories) &&
        Objects.equals(this.publishBuildPlanUrl, programmingExerciseAllOf.publishBuildPlanUrl) &&
        Objects.equals(this.allowOnlineEditor, programmingExerciseAllOf.allowOnlineEditor) &&
        Objects.equals(this.allowOfflineIde, programmingExerciseAllOf.allowOfflineIde) &&
        Objects.equals(this.staticCodeAnalysisEnabled, programmingExerciseAllOf.staticCodeAnalysisEnabled) &&
        Objects.equals(this.maxStaticCodeAnalysisPenalty, programmingExerciseAllOf.maxStaticCodeAnalysisPenalty) &&
        Objects.equals(this.programmingLanguage, programmingExerciseAllOf.programmingLanguage) &&
        Objects.equals(this.packageName, programmingExerciseAllOf.packageName) &&
        Objects.equals(this.sequentialTestRuns, programmingExerciseAllOf.sequentialTestRuns) &&
        Objects.equals(this.showTestNamesToStudents, programmingExerciseAllOf.showTestNamesToStudents) &&
        Objects.equals(this.buildAndTestStudentSubmissionsAfterDueDate, programmingExerciseAllOf.buildAndTestStudentSubmissionsAfterDueDate) &&
        Objects.equals(this.testCasesChanged, programmingExerciseAllOf.testCasesChanged) &&
        Objects.equals(this.projectKey, programmingExerciseAllOf.projectKey) &&
        Objects.equals(this.buildPlanAccessSecret, programmingExerciseAllOf.buildPlanAccessSecret) &&
        Objects.equals(this.templateParticipation, programmingExerciseAllOf.templateParticipation) &&
        Objects.equals(this.solutionParticipation, programmingExerciseAllOf.solutionParticipation) &&
        Objects.equals(this.testCases, programmingExerciseAllOf.testCases) &&
        Objects.equals(this.tasks, programmingExerciseAllOf.tasks) &&
        Objects.equals(this.staticCodeAnalysisCategories, programmingExerciseAllOf.staticCodeAnalysisCategories) &&
        Objects.equals(this.submissionPolicy, programmingExerciseAllOf.submissionPolicy) &&
        Objects.equals(this.projectType, programmingExerciseAllOf.projectType) &&
        Objects.equals(this.exerciseHints, programmingExerciseAllOf.exerciseHints) &&
        Objects.equals(this.testwiseCoverageEnabled, programmingExerciseAllOf.testwiseCoverageEnabled) &&
        Objects.equals(this.branch, programmingExerciseAllOf.branch) &&
        Objects.equals(this.releaseTestsWithExampleSolution, programmingExerciseAllOf.releaseTestsWithExampleSolution) &&
        Objects.equals(this.isLocalSimulation, programmingExerciseAllOf.isLocalSimulation) &&
        Objects.equals(this.checkoutSolutionRepository, programmingExerciseAllOf.checkoutSolutionRepository);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testRepositoryUrl, auxiliaryRepositories, publishBuildPlanUrl, allowOnlineEditor, allowOfflineIde, staticCodeAnalysisEnabled, maxStaticCodeAnalysisPenalty, programmingLanguage, packageName, sequentialTestRuns, showTestNamesToStudents, buildAndTestStudentSubmissionsAfterDueDate, testCasesChanged, projectKey, buildPlanAccessSecret, templateParticipation, solutionParticipation, testCases, tasks, staticCodeAnalysisCategories, submissionPolicy, projectType, exerciseHints, testwiseCoverageEnabled, branch, releaseTestsWithExampleSolution, isLocalSimulation, checkoutSolutionRepository);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgrammingExerciseAllOf {\n");
    sb.append("    testRepositoryUrl: ").append(toIndentedString(testRepositoryUrl)).append("\n");
    sb.append("    auxiliaryRepositories: ").append(toIndentedString(auxiliaryRepositories)).append("\n");
    sb.append("    publishBuildPlanUrl: ").append(toIndentedString(publishBuildPlanUrl)).append("\n");
    sb.append("    allowOnlineEditor: ").append(toIndentedString(allowOnlineEditor)).append("\n");
    sb.append("    allowOfflineIde: ").append(toIndentedString(allowOfflineIde)).append("\n");
    sb.append("    staticCodeAnalysisEnabled: ").append(toIndentedString(staticCodeAnalysisEnabled)).append("\n");
    sb.append("    maxStaticCodeAnalysisPenalty: ").append(toIndentedString(maxStaticCodeAnalysisPenalty)).append("\n");
    sb.append("    programmingLanguage: ").append(toIndentedString(programmingLanguage)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    sequentialTestRuns: ").append(toIndentedString(sequentialTestRuns)).append("\n");
    sb.append("    showTestNamesToStudents: ").append(toIndentedString(showTestNamesToStudents)).append("\n");
    sb.append("    buildAndTestStudentSubmissionsAfterDueDate: ").append(toIndentedString(buildAndTestStudentSubmissionsAfterDueDate)).append("\n");
    sb.append("    testCasesChanged: ").append(toIndentedString(testCasesChanged)).append("\n");
    sb.append("    projectKey: ").append(toIndentedString(projectKey)).append("\n");
    sb.append("    buildPlanAccessSecret: ").append(toIndentedString(buildPlanAccessSecret)).append("\n");
    sb.append("    templateParticipation: ").append(toIndentedString(templateParticipation)).append("\n");
    sb.append("    solutionParticipation: ").append(toIndentedString(solutionParticipation)).append("\n");
    sb.append("    testCases: ").append(toIndentedString(testCases)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    staticCodeAnalysisCategories: ").append(toIndentedString(staticCodeAnalysisCategories)).append("\n");
    sb.append("    submissionPolicy: ").append(toIndentedString(submissionPolicy)).append("\n");
    sb.append("    projectType: ").append(toIndentedString(projectType)).append("\n");
    sb.append("    exerciseHints: ").append(toIndentedString(exerciseHints)).append("\n");
    sb.append("    testwiseCoverageEnabled: ").append(toIndentedString(testwiseCoverageEnabled)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    releaseTestsWithExampleSolution: ").append(toIndentedString(releaseTestsWithExampleSolution)).append("\n");
    sb.append("    isLocalSimulation: ").append(toIndentedString(isLocalSimulation)).append("\n");
    sb.append("    checkoutSolutionRepository: ").append(toIndentedString(checkoutSolutionRepository)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testRepositoryUrl");
    openapiFields.add("auxiliaryRepositories");
    openapiFields.add("publishBuildPlanUrl");
    openapiFields.add("allowOnlineEditor");
    openapiFields.add("allowOfflineIde");
    openapiFields.add("staticCodeAnalysisEnabled");
    openapiFields.add("maxStaticCodeAnalysisPenalty");
    openapiFields.add("programmingLanguage");
    openapiFields.add("packageName");
    openapiFields.add("sequentialTestRuns");
    openapiFields.add("showTestNamesToStudents");
    openapiFields.add("buildAndTestStudentSubmissionsAfterDueDate");
    openapiFields.add("testCasesChanged");
    openapiFields.add("projectKey");
    openapiFields.add("buildPlanAccessSecret");
    openapiFields.add("templateParticipation");
    openapiFields.add("solutionParticipation");
    openapiFields.add("testCases");
    openapiFields.add("tasks");
    openapiFields.add("staticCodeAnalysisCategories");
    openapiFields.add("submissionPolicy");
    openapiFields.add("projectType");
    openapiFields.add("exerciseHints");
    openapiFields.add("testwiseCoverageEnabled");
    openapiFields.add("branch");
    openapiFields.add("releaseTestsWithExampleSolution");
    openapiFields.add("isLocalSimulation");
    openapiFields.add("checkoutSolutionRepository");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProgrammingExerciseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProgrammingExerciseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProgrammingExerciseAllOf is not found in the empty JSON string", ProgrammingExerciseAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProgrammingExerciseAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProgrammingExerciseAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("testRepositoryUrl") != null && !jsonObj.get("testRepositoryUrl").isJsonNull()) && !jsonObj.get("testRepositoryUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testRepositoryUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testRepositoryUrl").toString()));
      }
      if (jsonObj.get("auxiliaryRepositories") != null && !jsonObj.get("auxiliaryRepositories").isJsonNull()) {
        JsonArray jsonArrayauxiliaryRepositories = jsonObj.getAsJsonArray("auxiliaryRepositories");
        if (jsonArrayauxiliaryRepositories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("auxiliaryRepositories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `auxiliaryRepositories` to be an array in the JSON string but got `%s`", jsonObj.get("auxiliaryRepositories").toString()));
          }

          // validate the optional field `auxiliaryRepositories` (array)
          for (int i = 0; i < jsonArrayauxiliaryRepositories.size(); i++) {
            AuxiliaryRepository.validateJsonObject(jsonArrayauxiliaryRepositories.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("programmingLanguage") != null && !jsonObj.get("programmingLanguage").isJsonNull()) && !jsonObj.get("programmingLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programmingLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programmingLanguage").toString()));
      }
      if ((jsonObj.get("packageName") != null && !jsonObj.get("packageName").isJsonNull()) && !jsonObj.get("packageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageName").toString()));
      }
      if ((jsonObj.get("projectKey") != null && !jsonObj.get("projectKey").isJsonNull()) && !jsonObj.get("projectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectKey").toString()));
      }
      if ((jsonObj.get("buildPlanAccessSecret") != null && !jsonObj.get("buildPlanAccessSecret").isJsonNull()) && !jsonObj.get("buildPlanAccessSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildPlanAccessSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildPlanAccessSecret").toString()));
      }
      // validate the optional field `templateParticipation`
      if (jsonObj.get("templateParticipation") != null && !jsonObj.get("templateParticipation").isJsonNull()) {
        TemplateProgrammingExerciseParticipation.validateJsonObject(jsonObj.getAsJsonObject("templateParticipation"));
      }
      // validate the optional field `solutionParticipation`
      if (jsonObj.get("solutionParticipation") != null && !jsonObj.get("solutionParticipation").isJsonNull()) {
        SolutionProgrammingExerciseParticipation.validateJsonObject(jsonObj.getAsJsonObject("solutionParticipation"));
      }
      if (jsonObj.get("testCases") != null && !jsonObj.get("testCases").isJsonNull()) {
        JsonArray jsonArraytestCases = jsonObj.getAsJsonArray("testCases");
        if (jsonArraytestCases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testCases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testCases` to be an array in the JSON string but got `%s`", jsonObj.get("testCases").toString()));
          }

          // validate the optional field `testCases` (array)
          for (int i = 0; i < jsonArraytestCases.size(); i++) {
            ProgrammingExerciseTestCase.validateJsonObject(jsonArraytestCases.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) {
        JsonArray jsonArraytasks = jsonObj.getAsJsonArray("tasks");
        if (jsonArraytasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tasks` to be an array in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
          }

          // validate the optional field `tasks` (array)
          for (int i = 0; i < jsonArraytasks.size(); i++) {
            ProgrammingExerciseTask.validateJsonObject(jsonArraytasks.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("staticCodeAnalysisCategories") != null && !jsonObj.get("staticCodeAnalysisCategories").isJsonNull()) {
        JsonArray jsonArraystaticCodeAnalysisCategories = jsonObj.getAsJsonArray("staticCodeAnalysisCategories");
        if (jsonArraystaticCodeAnalysisCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("staticCodeAnalysisCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `staticCodeAnalysisCategories` to be an array in the JSON string but got `%s`", jsonObj.get("staticCodeAnalysisCategories").toString()));
          }

          // validate the optional field `staticCodeAnalysisCategories` (array)
          for (int i = 0; i < jsonArraystaticCodeAnalysisCategories.size(); i++) {
            StaticCodeAnalysisCategory.validateJsonObject(jsonArraystaticCodeAnalysisCategories.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `submissionPolicy`
      if (jsonObj.get("submissionPolicy") != null && !jsonObj.get("submissionPolicy").isJsonNull()) {
        SubmissionPolicy.validateJsonObject(jsonObj.getAsJsonObject("submissionPolicy"));
      }
      if ((jsonObj.get("projectType") != null && !jsonObj.get("projectType").isJsonNull()) && !jsonObj.get("projectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectType").toString()));
      }
      if (jsonObj.get("exerciseHints") != null && !jsonObj.get("exerciseHints").isJsonNull()) {
        JsonArray jsonArrayexerciseHints = jsonObj.getAsJsonArray("exerciseHints");
        if (jsonArrayexerciseHints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exerciseHints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exerciseHints` to be an array in the JSON string but got `%s`", jsonObj.get("exerciseHints").toString()));
          }

          // validate the optional field `exerciseHints` (array)
          for (int i = 0; i < jsonArrayexerciseHints.size(); i++) {
            ExerciseHint.validateJsonObject(jsonArrayexerciseHints.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) && !jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProgrammingExerciseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProgrammingExerciseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProgrammingExerciseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProgrammingExerciseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ProgrammingExerciseAllOf>() {
           @Override
           public void write(JsonWriter out, ProgrammingExerciseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProgrammingExerciseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProgrammingExerciseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProgrammingExerciseAllOf
  * @throws IOException if the JSON string is invalid with respect to ProgrammingExerciseAllOf
  */
  public static ProgrammingExerciseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProgrammingExerciseAllOf.class);
  }

 /**
  * Convert an instance of ProgrammingExerciseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

