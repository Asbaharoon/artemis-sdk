/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.IPAddressNetworkObjectObjectObjectObjectObject;
import org.openapitools.client.model.IPAddressSection;
import org.openapitools.client.model.IPAddressSegment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IPAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class IPAddress {
  public static final String SERIALIZED_NAME_LOOPBACK = "loopback";
  @SerializedName(SERIALIZED_NAME_LOOPBACK)
  private Boolean loopback;

  public static final String SERIALIZED_NAME_NETWORK_PREFIX_LENGTH = "networkPrefixLength";
  @SerializedName(SERIALIZED_NAME_NETWORK_PREFIX_LENGTH)
  private Integer networkPrefixLength;

  public static final String SERIALIZED_NAME_LOWER = "lower";
  @SerializedName(SERIALIZED_NAME_LOWER)
  private IPAddress lower;

  public static final String SERIALIZED_NAME_UPPER = "upper";
  @SerializedName(SERIALIZED_NAME_UPPER)
  private IPAddress upper;

  public static final String SERIALIZED_NAME_LOCAL = "local";
  @SerializedName(SERIALIZED_NAME_LOCAL)
  private Boolean local;

  public static final String SERIALIZED_NAME_IPV4 = "ipv4";
  @SerializedName(SERIALIZED_NAME_IPV4)
  private Boolean ipv4;

  public static final String SERIALIZED_NAME_SECTION = "section";
  @SerializedName(SERIALIZED_NAME_SECTION)
  private IPAddressSection section;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private IPAddressNetworkObjectObjectObjectObjectObject network;

  public static final String SERIALIZED_NAME_MAX_SEGMENT_VALUE = "maxSegmentValue";
  @SerializedName(SERIALIZED_NAME_MAX_SEGMENT_VALUE)
  private Integer maxSegmentValue;

  public static final String SERIALIZED_NAME_NON_ZERO_HOST_COUNT = "nonZeroHostCount";
  @SerializedName(SERIALIZED_NAME_NON_ZERO_HOST_COUNT)
  private Integer nonZeroHostCount;

  public static final String SERIALIZED_NAME_BYTES_PER_SEGMENT = "bytesPerSegment";
  @SerializedName(SERIALIZED_NAME_BYTES_PER_SEGMENT)
  private Integer bytesPerSegment;

  public static final String SERIALIZED_NAME_BITS_PER_SEGMENT = "bitsPerSegment";
  @SerializedName(SERIALIZED_NAME_BITS_PER_SEGMENT)
  private Integer bitsPerSegment;

  public static final String SERIALIZED_NAME_BYTE_COUNT = "byteCount";
  @SerializedName(SERIALIZED_NAME_BYTE_COUNT)
  private Integer byteCount;

  public static final String SERIALIZED_NAME_LOWER_NON_ZERO_HOST = "lowerNonZeroHost";
  @SerializedName(SERIALIZED_NAME_LOWER_NON_ZERO_HOST)
  private IPAddress lowerNonZeroHost;

  public static final String SERIALIZED_NAME_SEQUENTIAL_BLOCK_COUNT = "sequentialBlockCount";
  @SerializedName(SERIALIZED_NAME_SEQUENTIAL_BLOCK_COUNT)
  private Integer sequentialBlockCount;

  public static final String SERIALIZED_NAME_ITERABLE = "iterable";
  @SerializedName(SERIALIZED_NAME_ITERABLE)
  private Object iterable;

  public static final String SERIALIZED_NAME_IPADDRESS = "ipaddress";
  @SerializedName(SERIALIZED_NAME_IPADDRESS)
  private Boolean ipaddress;

  /**
   * Gets or Sets ipversion
   */
  @JsonAdapter(IpversionEnum.Adapter.class)
  public enum IpversionEnum {
    IPV4("IPv4"),
    
    IPV6("IPv6");

    private String value;

    IpversionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IpversionEnum fromValue(String value) {
      for (IpversionEnum b : IpversionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IpversionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpversionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpversionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IpversionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IPVERSION = "ipversion";
  @SerializedName(SERIALIZED_NAME_IPVERSION)
  private IpversionEnum ipversion;

  public static final String SERIALIZED_NAME_IPV4_CONVERTIBLE = "ipv4Convertible";
  @SerializedName(SERIALIZED_NAME_IPV4_CONVERTIBLE)
  private Boolean ipv4Convertible;

  public static final String SERIALIZED_NAME_IPV6_CONVERTIBLE = "ipv6Convertible";
  @SerializedName(SERIALIZED_NAME_IPV6_CONVERTIBLE)
  private Boolean ipv6Convertible;

  public static final String SERIALIZED_NAME_LINK_LOCAL = "linkLocal";
  @SerializedName(SERIALIZED_NAME_LINK_LOCAL)
  private Boolean linkLocal;

  public static final String SERIALIZED_NAME_UNSPECIFIED = "unspecified";
  @SerializedName(SERIALIZED_NAME_UNSPECIFIED)
  private Boolean unspecified;

  public static final String SERIALIZED_NAME_ANY_LOCAL = "anyLocal";
  @SerializedName(SERIALIZED_NAME_ANY_LOCAL)
  private Boolean anyLocal;

  public static final String SERIALIZED_NAME_ZERO_HOST = "zeroHost";
  @SerializedName(SERIALIZED_NAME_ZERO_HOST)
  private Boolean zeroHost;

  public static final String SERIALIZED_NAME_HOST_MASK = "hostMask";
  @SerializedName(SERIALIZED_NAME_HOST_MASK)
  private IPAddress hostMask;

  public static final String SERIALIZED_NAME_NETWORK_MASK = "networkMask";
  @SerializedName(SERIALIZED_NAME_NETWORK_MASK)
  private IPAddress networkMask;

  public static final String SERIALIZED_NAME_SINGLE_NETWORK = "singleNetwork";
  @SerializedName(SERIALIZED_NAME_SINGLE_NETWORK)
  private Boolean singleNetwork;

  public static final String SERIALIZED_NAME_PREFIX_LENGTH = "prefixLength";
  @SerializedName(SERIALIZED_NAME_PREFIX_LENGTH)
  private Integer prefixLength;

  public static final String SERIALIZED_NAME_IPV6 = "ipv6";
  @SerializedName(SERIALIZED_NAME_IPV6)
  private Boolean ipv6;

  public static final String SERIALIZED_NAME_HOST_SECTION = "hostSection";
  @SerializedName(SERIALIZED_NAME_HOST_SECTION)
  private IPAddressSection hostSection;

  public static final String SERIALIZED_NAME_NETWORK_SECTION = "networkSection";
  @SerializedName(SERIALIZED_NAME_NETWORK_SECTION)
  private IPAddressSection networkSection;

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private List<IPAddressSegment> segments = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_BIT_COUNT = "bitCount";
  @SerializedName(SERIALIZED_NAME_BIT_COUNT)
  private Integer bitCount;

  public static final String SERIALIZED_NAME_PREFIXED = "prefixed";
  @SerializedName(SERIALIZED_NAME_PREFIXED)
  private Boolean prefixed;

  public static final String SERIALIZED_NAME_PREFIX_BLOCK = "prefixBlock";
  @SerializedName(SERIALIZED_NAME_PREFIX_BLOCK)
  private Boolean prefixBlock;

  public static final String SERIALIZED_NAME_SEQUENTIAL_BLOCK_INDEX = "sequentialBlockIndex";
  @SerializedName(SERIALIZED_NAME_SEQUENTIAL_BLOCK_INDEX)
  private Integer sequentialBlockIndex;

  public static final String SERIALIZED_NAME_SEQUENTIAL = "sequential";
  @SerializedName(SERIALIZED_NAME_SEQUENTIAL)
  private Boolean sequential;

  public static final String SERIALIZED_NAME_SINGLE_PREFIX_BLOCK = "singlePrefixBlock";
  @SerializedName(SERIALIZED_NAME_SINGLE_PREFIX_BLOCK)
  private Boolean singlePrefixBlock;

  public static final String SERIALIZED_NAME_DIVISION_STRINGS = "divisionStrings";
  @SerializedName(SERIALIZED_NAME_DIVISION_STRINGS)
  private List<String> divisionStrings = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFIX_COUNT = "prefixCount";
  @SerializedName(SERIALIZED_NAME_PREFIX_COUNT)
  private Integer prefixCount;

  public static final String SERIALIZED_NAME_BYTES = "bytes";
  @SerializedName(SERIALIZED_NAME_BYTES)
  private List<byte[]> bytes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public static final String SERIALIZED_NAME_ZERO = "zero";
  @SerializedName(SERIALIZED_NAME_ZERO)
  private Boolean zero;

  public static final String SERIALIZED_NAME_PREFIX_LENGTH_FOR_SINGLE_BLOCK = "prefixLengthForSingleBlock";
  @SerializedName(SERIALIZED_NAME_PREFIX_LENGTH_FOR_SINGLE_BLOCK)
  private Integer prefixLengthForSingleBlock;

  public static final String SERIALIZED_NAME_MIN_PREFIX_LENGTH_FOR_BLOCK = "minPrefixLengthForBlock";
  @SerializedName(SERIALIZED_NAME_MIN_PREFIX_LENGTH_FOR_BLOCK)
  private Integer minPrefixLengthForBlock;

  public static final String SERIALIZED_NAME_FULL_RANGE = "fullRange";
  @SerializedName(SERIALIZED_NAME_FULL_RANGE)
  private Boolean fullRange;

  public static final String SERIALIZED_NAME_UPPER_BYTES = "upperBytes";
  @SerializedName(SERIALIZED_NAME_UPPER_BYTES)
  private List<byte[]> upperBytes = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPPER_VALUE = "upperValue";
  @SerializedName(SERIALIZED_NAME_UPPER_VALUE)
  private Integer upperValue;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Boolean max;

  public static final String SERIALIZED_NAME_MULTIPLE = "multiple";
  @SerializedName(SERIALIZED_NAME_MULTIPLE)
  private Boolean multiple;

  public static final String SERIALIZED_NAME_DIVISION_COUNT = "divisionCount";
  @SerializedName(SERIALIZED_NAME_DIVISION_COUNT)
  private Integer divisionCount;

  public static final String SERIALIZED_NAME_SEGMENT_COUNT = "segmentCount";
  @SerializedName(SERIALIZED_NAME_SEGMENT_COUNT)
  private Integer segmentCount;

  public static final String SERIALIZED_NAME_SEGMENT_STRINGS = "segmentStrings";
  @SerializedName(SERIALIZED_NAME_SEGMENT_STRINGS)
  private List<String> segmentStrings = new ArrayList<>();

  public static final String SERIALIZED_NAME_MACADDRESS = "macaddress";
  @SerializedName(SERIALIZED_NAME_MACADDRESS)
  private Boolean macaddress;

  public static final String SERIALIZED_NAME_MULTICAST = "multicast";
  @SerializedName(SERIALIZED_NAME_MULTICAST)
  private Boolean multicast;

  public IPAddress() {
  }

  public IPAddress loopback(Boolean loopback) {
    
    this.loopback = loopback;
    return this;
  }

   /**
   * Get loopback
   * @return loopback
  **/
  @javax.annotation.Nullable

  public Boolean getLoopback() {
    return loopback;
  }


  public void setLoopback(Boolean loopback) {
    this.loopback = loopback;
  }


  public IPAddress networkPrefixLength(Integer networkPrefixLength) {
    
    this.networkPrefixLength = networkPrefixLength;
    return this;
  }

   /**
   * Get networkPrefixLength
   * @return networkPrefixLength
  **/
  @javax.annotation.Nullable

  public Integer getNetworkPrefixLength() {
    return networkPrefixLength;
  }


  public void setNetworkPrefixLength(Integer networkPrefixLength) {
    this.networkPrefixLength = networkPrefixLength;
  }


  public IPAddress lower(IPAddress lower) {
    
    this.lower = lower;
    return this;
  }

   /**
   * Get lower
   * @return lower
  **/
  @javax.annotation.Nullable

  public IPAddress getLower() {
    return lower;
  }


  public void setLower(IPAddress lower) {
    this.lower = lower;
  }


  public IPAddress upper(IPAddress upper) {
    
    this.upper = upper;
    return this;
  }

   /**
   * Get upper
   * @return upper
  **/
  @javax.annotation.Nullable

  public IPAddress getUpper() {
    return upper;
  }


  public void setUpper(IPAddress upper) {
    this.upper = upper;
  }


  public IPAddress local(Boolean local) {
    
    this.local = local;
    return this;
  }

   /**
   * Get local
   * @return local
  **/
  @javax.annotation.Nullable

  public Boolean getLocal() {
    return local;
  }


  public void setLocal(Boolean local) {
    this.local = local;
  }


  public IPAddress ipv4(Boolean ipv4) {
    
    this.ipv4 = ipv4;
    return this;
  }

   /**
   * Get ipv4
   * @return ipv4
  **/
  @javax.annotation.Nullable

  public Boolean getIpv4() {
    return ipv4;
  }


  public void setIpv4(Boolean ipv4) {
    this.ipv4 = ipv4;
  }


  public IPAddress section(IPAddressSection section) {
    
    this.section = section;
    return this;
  }

   /**
   * Get section
   * @return section
  **/
  @javax.annotation.Nullable

  public IPAddressSection getSection() {
    return section;
  }


  public void setSection(IPAddressSection section) {
    this.section = section;
  }


  public IPAddress network(IPAddressNetworkObjectObjectObjectObjectObject network) {
    
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @javax.annotation.Nullable

  public IPAddressNetworkObjectObjectObjectObjectObject getNetwork() {
    return network;
  }


  public void setNetwork(IPAddressNetworkObjectObjectObjectObjectObject network) {
    this.network = network;
  }


  public IPAddress maxSegmentValue(Integer maxSegmentValue) {
    
    this.maxSegmentValue = maxSegmentValue;
    return this;
  }

   /**
   * Get maxSegmentValue
   * @return maxSegmentValue
  **/
  @javax.annotation.Nullable

  public Integer getMaxSegmentValue() {
    return maxSegmentValue;
  }


  public void setMaxSegmentValue(Integer maxSegmentValue) {
    this.maxSegmentValue = maxSegmentValue;
  }


  public IPAddress nonZeroHostCount(Integer nonZeroHostCount) {
    
    this.nonZeroHostCount = nonZeroHostCount;
    return this;
  }

   /**
   * Get nonZeroHostCount
   * @return nonZeroHostCount
  **/
  @javax.annotation.Nullable

  public Integer getNonZeroHostCount() {
    return nonZeroHostCount;
  }


  public void setNonZeroHostCount(Integer nonZeroHostCount) {
    this.nonZeroHostCount = nonZeroHostCount;
  }


  public IPAddress bytesPerSegment(Integer bytesPerSegment) {
    
    this.bytesPerSegment = bytesPerSegment;
    return this;
  }

   /**
   * Get bytesPerSegment
   * @return bytesPerSegment
  **/
  @javax.annotation.Nullable

  public Integer getBytesPerSegment() {
    return bytesPerSegment;
  }


  public void setBytesPerSegment(Integer bytesPerSegment) {
    this.bytesPerSegment = bytesPerSegment;
  }


  public IPAddress bitsPerSegment(Integer bitsPerSegment) {
    
    this.bitsPerSegment = bitsPerSegment;
    return this;
  }

   /**
   * Get bitsPerSegment
   * @return bitsPerSegment
  **/
  @javax.annotation.Nullable

  public Integer getBitsPerSegment() {
    return bitsPerSegment;
  }


  public void setBitsPerSegment(Integer bitsPerSegment) {
    this.bitsPerSegment = bitsPerSegment;
  }


  public IPAddress byteCount(Integer byteCount) {
    
    this.byteCount = byteCount;
    return this;
  }

   /**
   * Get byteCount
   * @return byteCount
  **/
  @javax.annotation.Nullable

  public Integer getByteCount() {
    return byteCount;
  }


  public void setByteCount(Integer byteCount) {
    this.byteCount = byteCount;
  }


  public IPAddress lowerNonZeroHost(IPAddress lowerNonZeroHost) {
    
    this.lowerNonZeroHost = lowerNonZeroHost;
    return this;
  }

   /**
   * Get lowerNonZeroHost
   * @return lowerNonZeroHost
  **/
  @javax.annotation.Nullable

  public IPAddress getLowerNonZeroHost() {
    return lowerNonZeroHost;
  }


  public void setLowerNonZeroHost(IPAddress lowerNonZeroHost) {
    this.lowerNonZeroHost = lowerNonZeroHost;
  }


  public IPAddress sequentialBlockCount(Integer sequentialBlockCount) {
    
    this.sequentialBlockCount = sequentialBlockCount;
    return this;
  }

   /**
   * Get sequentialBlockCount
   * @return sequentialBlockCount
  **/
  @javax.annotation.Nullable

  public Integer getSequentialBlockCount() {
    return sequentialBlockCount;
  }


  public void setSequentialBlockCount(Integer sequentialBlockCount) {
    this.sequentialBlockCount = sequentialBlockCount;
  }


  public IPAddress iterable(Object iterable) {
    
    this.iterable = iterable;
    return this;
  }

   /**
   * Get iterable
   * @return iterable
  **/
  @javax.annotation.Nullable

  public Object getIterable() {
    return iterable;
  }


  public void setIterable(Object iterable) {
    this.iterable = iterable;
  }


  public IPAddress ipaddress(Boolean ipaddress) {
    
    this.ipaddress = ipaddress;
    return this;
  }

   /**
   * Get ipaddress
   * @return ipaddress
  **/
  @javax.annotation.Nullable

  public Boolean getIpaddress() {
    return ipaddress;
  }


  public void setIpaddress(Boolean ipaddress) {
    this.ipaddress = ipaddress;
  }


  public IPAddress ipversion(IpversionEnum ipversion) {
    
    this.ipversion = ipversion;
    return this;
  }

   /**
   * Get ipversion
   * @return ipversion
  **/
  @javax.annotation.Nullable

  public IpversionEnum getIpversion() {
    return ipversion;
  }


  public void setIpversion(IpversionEnum ipversion) {
    this.ipversion = ipversion;
  }


  public IPAddress ipv4Convertible(Boolean ipv4Convertible) {
    
    this.ipv4Convertible = ipv4Convertible;
    return this;
  }

   /**
   * Get ipv4Convertible
   * @return ipv4Convertible
  **/
  @javax.annotation.Nullable

  public Boolean getIpv4Convertible() {
    return ipv4Convertible;
  }


  public void setIpv4Convertible(Boolean ipv4Convertible) {
    this.ipv4Convertible = ipv4Convertible;
  }


  public IPAddress ipv6Convertible(Boolean ipv6Convertible) {
    
    this.ipv6Convertible = ipv6Convertible;
    return this;
  }

   /**
   * Get ipv6Convertible
   * @return ipv6Convertible
  **/
  @javax.annotation.Nullable

  public Boolean getIpv6Convertible() {
    return ipv6Convertible;
  }


  public void setIpv6Convertible(Boolean ipv6Convertible) {
    this.ipv6Convertible = ipv6Convertible;
  }


  public IPAddress linkLocal(Boolean linkLocal) {
    
    this.linkLocal = linkLocal;
    return this;
  }

   /**
   * Get linkLocal
   * @return linkLocal
  **/
  @javax.annotation.Nullable

  public Boolean getLinkLocal() {
    return linkLocal;
  }


  public void setLinkLocal(Boolean linkLocal) {
    this.linkLocal = linkLocal;
  }


  public IPAddress unspecified(Boolean unspecified) {
    
    this.unspecified = unspecified;
    return this;
  }

   /**
   * Get unspecified
   * @return unspecified
  **/
  @javax.annotation.Nullable

  public Boolean getUnspecified() {
    return unspecified;
  }


  public void setUnspecified(Boolean unspecified) {
    this.unspecified = unspecified;
  }


  public IPAddress anyLocal(Boolean anyLocal) {
    
    this.anyLocal = anyLocal;
    return this;
  }

   /**
   * Get anyLocal
   * @return anyLocal
  **/
  @javax.annotation.Nullable

  public Boolean getAnyLocal() {
    return anyLocal;
  }


  public void setAnyLocal(Boolean anyLocal) {
    this.anyLocal = anyLocal;
  }


  public IPAddress zeroHost(Boolean zeroHost) {
    
    this.zeroHost = zeroHost;
    return this;
  }

   /**
   * Get zeroHost
   * @return zeroHost
  **/
  @javax.annotation.Nullable

  public Boolean getZeroHost() {
    return zeroHost;
  }


  public void setZeroHost(Boolean zeroHost) {
    this.zeroHost = zeroHost;
  }


  public IPAddress hostMask(IPAddress hostMask) {
    
    this.hostMask = hostMask;
    return this;
  }

   /**
   * Get hostMask
   * @return hostMask
  **/
  @javax.annotation.Nullable

  public IPAddress getHostMask() {
    return hostMask;
  }


  public void setHostMask(IPAddress hostMask) {
    this.hostMask = hostMask;
  }


  public IPAddress networkMask(IPAddress networkMask) {
    
    this.networkMask = networkMask;
    return this;
  }

   /**
   * Get networkMask
   * @return networkMask
  **/
  @javax.annotation.Nullable

  public IPAddress getNetworkMask() {
    return networkMask;
  }


  public void setNetworkMask(IPAddress networkMask) {
    this.networkMask = networkMask;
  }


  public IPAddress singleNetwork(Boolean singleNetwork) {
    
    this.singleNetwork = singleNetwork;
    return this;
  }

   /**
   * Get singleNetwork
   * @return singleNetwork
  **/
  @javax.annotation.Nullable

  public Boolean getSingleNetwork() {
    return singleNetwork;
  }


  public void setSingleNetwork(Boolean singleNetwork) {
    this.singleNetwork = singleNetwork;
  }


  public IPAddress prefixLength(Integer prefixLength) {
    
    this.prefixLength = prefixLength;
    return this;
  }

   /**
   * Get prefixLength
   * @return prefixLength
  **/
  @javax.annotation.Nullable

  public Integer getPrefixLength() {
    return prefixLength;
  }


  public void setPrefixLength(Integer prefixLength) {
    this.prefixLength = prefixLength;
  }


  public IPAddress ipv6(Boolean ipv6) {
    
    this.ipv6 = ipv6;
    return this;
  }

   /**
   * Get ipv6
   * @return ipv6
  **/
  @javax.annotation.Nullable

  public Boolean getIpv6() {
    return ipv6;
  }


  public void setIpv6(Boolean ipv6) {
    this.ipv6 = ipv6;
  }


  public IPAddress hostSection(IPAddressSection hostSection) {
    
    this.hostSection = hostSection;
    return this;
  }

   /**
   * Get hostSection
   * @return hostSection
  **/
  @javax.annotation.Nullable

  public IPAddressSection getHostSection() {
    return hostSection;
  }


  public void setHostSection(IPAddressSection hostSection) {
    this.hostSection = hostSection;
  }


  public IPAddress networkSection(IPAddressSection networkSection) {
    
    this.networkSection = networkSection;
    return this;
  }

   /**
   * Get networkSection
   * @return networkSection
  **/
  @javax.annotation.Nullable

  public IPAddressSection getNetworkSection() {
    return networkSection;
  }


  public void setNetworkSection(IPAddressSection networkSection) {
    this.networkSection = networkSection;
  }


  public IPAddress segments(List<IPAddressSegment> segments) {
    
    this.segments = segments;
    return this;
  }

  public IPAddress addSegmentsItem(IPAddressSegment segmentsItem) {
    if (this.segments == null) {
      this.segments = new ArrayList<>();
    }
    this.segments.add(segmentsItem);
    return this;
  }

   /**
   * Get segments
   * @return segments
  **/
  @javax.annotation.Nullable

  public List<IPAddressSegment> getSegments() {
    return segments;
  }


  public void setSegments(List<IPAddressSegment> segments) {
    this.segments = segments;
  }


  public IPAddress count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @javax.annotation.Nullable

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    this.count = count;
  }


  public IPAddress bitCount(Integer bitCount) {
    
    this.bitCount = bitCount;
    return this;
  }

   /**
   * Get bitCount
   * @return bitCount
  **/
  @javax.annotation.Nullable

  public Integer getBitCount() {
    return bitCount;
  }


  public void setBitCount(Integer bitCount) {
    this.bitCount = bitCount;
  }


  public IPAddress prefixed(Boolean prefixed) {
    
    this.prefixed = prefixed;
    return this;
  }

   /**
   * Get prefixed
   * @return prefixed
  **/
  @javax.annotation.Nullable

  public Boolean getPrefixed() {
    return prefixed;
  }


  public void setPrefixed(Boolean prefixed) {
    this.prefixed = prefixed;
  }


  public IPAddress prefixBlock(Boolean prefixBlock) {
    
    this.prefixBlock = prefixBlock;
    return this;
  }

   /**
   * Get prefixBlock
   * @return prefixBlock
  **/
  @javax.annotation.Nullable

  public Boolean getPrefixBlock() {
    return prefixBlock;
  }


  public void setPrefixBlock(Boolean prefixBlock) {
    this.prefixBlock = prefixBlock;
  }


  public IPAddress sequentialBlockIndex(Integer sequentialBlockIndex) {
    
    this.sequentialBlockIndex = sequentialBlockIndex;
    return this;
  }

   /**
   * Get sequentialBlockIndex
   * @return sequentialBlockIndex
  **/
  @javax.annotation.Nullable

  public Integer getSequentialBlockIndex() {
    return sequentialBlockIndex;
  }


  public void setSequentialBlockIndex(Integer sequentialBlockIndex) {
    this.sequentialBlockIndex = sequentialBlockIndex;
  }


  public IPAddress sequential(Boolean sequential) {
    
    this.sequential = sequential;
    return this;
  }

   /**
   * Get sequential
   * @return sequential
  **/
  @javax.annotation.Nullable

  public Boolean getSequential() {
    return sequential;
  }


  public void setSequential(Boolean sequential) {
    this.sequential = sequential;
  }


  public IPAddress singlePrefixBlock(Boolean singlePrefixBlock) {
    
    this.singlePrefixBlock = singlePrefixBlock;
    return this;
  }

   /**
   * Get singlePrefixBlock
   * @return singlePrefixBlock
  **/
  @javax.annotation.Nullable

  public Boolean getSinglePrefixBlock() {
    return singlePrefixBlock;
  }


  public void setSinglePrefixBlock(Boolean singlePrefixBlock) {
    this.singlePrefixBlock = singlePrefixBlock;
  }


  public IPAddress divisionStrings(List<String> divisionStrings) {
    
    this.divisionStrings = divisionStrings;
    return this;
  }

  public IPAddress addDivisionStringsItem(String divisionStringsItem) {
    if (this.divisionStrings == null) {
      this.divisionStrings = new ArrayList<>();
    }
    this.divisionStrings.add(divisionStringsItem);
    return this;
  }

   /**
   * Get divisionStrings
   * @return divisionStrings
  **/
  @javax.annotation.Nullable

  public List<String> getDivisionStrings() {
    return divisionStrings;
  }


  public void setDivisionStrings(List<String> divisionStrings) {
    this.divisionStrings = divisionStrings;
  }


  public IPAddress prefixCount(Integer prefixCount) {
    
    this.prefixCount = prefixCount;
    return this;
  }

   /**
   * Get prefixCount
   * @return prefixCount
  **/
  @javax.annotation.Nullable

  public Integer getPrefixCount() {
    return prefixCount;
  }


  public void setPrefixCount(Integer prefixCount) {
    this.prefixCount = prefixCount;
  }


  public IPAddress bytes(List<byte[]> bytes) {
    
    this.bytes = bytes;
    return this;
  }

  public IPAddress addBytesItem(byte[] bytesItem) {
    if (this.bytes == null) {
      this.bytes = new ArrayList<>();
    }
    this.bytes.add(bytesItem);
    return this;
  }

   /**
   * Get bytes
   * @return bytes
  **/
  @javax.annotation.Nullable

  public List<byte[]> getBytes() {
    return bytes;
  }


  public void setBytes(List<byte[]> bytes) {
    this.bytes = bytes;
  }


  public IPAddress value(Integer value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable

  public Integer getValue() {
    return value;
  }


  public void setValue(Integer value) {
    this.value = value;
  }


  public IPAddress zero(Boolean zero) {
    
    this.zero = zero;
    return this;
  }

   /**
   * Get zero
   * @return zero
  **/
  @javax.annotation.Nullable

  public Boolean getZero() {
    return zero;
  }


  public void setZero(Boolean zero) {
    this.zero = zero;
  }


  public IPAddress prefixLengthForSingleBlock(Integer prefixLengthForSingleBlock) {
    
    this.prefixLengthForSingleBlock = prefixLengthForSingleBlock;
    return this;
  }

   /**
   * Get prefixLengthForSingleBlock
   * @return prefixLengthForSingleBlock
  **/
  @javax.annotation.Nullable

  public Integer getPrefixLengthForSingleBlock() {
    return prefixLengthForSingleBlock;
  }


  public void setPrefixLengthForSingleBlock(Integer prefixLengthForSingleBlock) {
    this.prefixLengthForSingleBlock = prefixLengthForSingleBlock;
  }


  public IPAddress minPrefixLengthForBlock(Integer minPrefixLengthForBlock) {
    
    this.minPrefixLengthForBlock = minPrefixLengthForBlock;
    return this;
  }

   /**
   * Get minPrefixLengthForBlock
   * @return minPrefixLengthForBlock
  **/
  @javax.annotation.Nullable

  public Integer getMinPrefixLengthForBlock() {
    return minPrefixLengthForBlock;
  }


  public void setMinPrefixLengthForBlock(Integer minPrefixLengthForBlock) {
    this.minPrefixLengthForBlock = minPrefixLengthForBlock;
  }


  public IPAddress fullRange(Boolean fullRange) {
    
    this.fullRange = fullRange;
    return this;
  }

   /**
   * Get fullRange
   * @return fullRange
  **/
  @javax.annotation.Nullable

  public Boolean getFullRange() {
    return fullRange;
  }


  public void setFullRange(Boolean fullRange) {
    this.fullRange = fullRange;
  }


  public IPAddress upperBytes(List<byte[]> upperBytes) {
    
    this.upperBytes = upperBytes;
    return this;
  }

  public IPAddress addUpperBytesItem(byte[] upperBytesItem) {
    if (this.upperBytes == null) {
      this.upperBytes = new ArrayList<>();
    }
    this.upperBytes.add(upperBytesItem);
    return this;
  }

   /**
   * Get upperBytes
   * @return upperBytes
  **/
  @javax.annotation.Nullable

  public List<byte[]> getUpperBytes() {
    return upperBytes;
  }


  public void setUpperBytes(List<byte[]> upperBytes) {
    this.upperBytes = upperBytes;
  }


  public IPAddress upperValue(Integer upperValue) {
    
    this.upperValue = upperValue;
    return this;
  }

   /**
   * Get upperValue
   * @return upperValue
  **/
  @javax.annotation.Nullable

  public Integer getUpperValue() {
    return upperValue;
  }


  public void setUpperValue(Integer upperValue) {
    this.upperValue = upperValue;
  }


  public IPAddress max(Boolean max) {
    
    this.max = max;
    return this;
  }

   /**
   * Get max
   * @return max
  **/
  @javax.annotation.Nullable

  public Boolean getMax() {
    return max;
  }


  public void setMax(Boolean max) {
    this.max = max;
  }


  public IPAddress multiple(Boolean multiple) {
    
    this.multiple = multiple;
    return this;
  }

   /**
   * Get multiple
   * @return multiple
  **/
  @javax.annotation.Nullable

  public Boolean getMultiple() {
    return multiple;
  }


  public void setMultiple(Boolean multiple) {
    this.multiple = multiple;
  }


  public IPAddress divisionCount(Integer divisionCount) {
    
    this.divisionCount = divisionCount;
    return this;
  }

   /**
   * Get divisionCount
   * @return divisionCount
  **/
  @javax.annotation.Nullable

  public Integer getDivisionCount() {
    return divisionCount;
  }


  public void setDivisionCount(Integer divisionCount) {
    this.divisionCount = divisionCount;
  }


  public IPAddress segmentCount(Integer segmentCount) {
    
    this.segmentCount = segmentCount;
    return this;
  }

   /**
   * Get segmentCount
   * @return segmentCount
  **/
  @javax.annotation.Nullable

  public Integer getSegmentCount() {
    return segmentCount;
  }


  public void setSegmentCount(Integer segmentCount) {
    this.segmentCount = segmentCount;
  }


  public IPAddress segmentStrings(List<String> segmentStrings) {
    
    this.segmentStrings = segmentStrings;
    return this;
  }

  public IPAddress addSegmentStringsItem(String segmentStringsItem) {
    if (this.segmentStrings == null) {
      this.segmentStrings = new ArrayList<>();
    }
    this.segmentStrings.add(segmentStringsItem);
    return this;
  }

   /**
   * Get segmentStrings
   * @return segmentStrings
  **/
  @javax.annotation.Nullable

  public List<String> getSegmentStrings() {
    return segmentStrings;
  }


  public void setSegmentStrings(List<String> segmentStrings) {
    this.segmentStrings = segmentStrings;
  }


  public IPAddress macaddress(Boolean macaddress) {
    
    this.macaddress = macaddress;
    return this;
  }

   /**
   * Get macaddress
   * @return macaddress
  **/
  @javax.annotation.Nullable

  public Boolean getMacaddress() {
    return macaddress;
  }


  public void setMacaddress(Boolean macaddress) {
    this.macaddress = macaddress;
  }


  public IPAddress multicast(Boolean multicast) {
    
    this.multicast = multicast;
    return this;
  }

   /**
   * Get multicast
   * @return multicast
  **/
  @javax.annotation.Nullable

  public Boolean getMulticast() {
    return multicast;
  }


  public void setMulticast(Boolean multicast) {
    this.multicast = multicast;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPAddress ipAddress = (IPAddress) o;
    return Objects.equals(this.loopback, ipAddress.loopback) &&
        Objects.equals(this.networkPrefixLength, ipAddress.networkPrefixLength) &&
        Objects.equals(this.lower, ipAddress.lower) &&
        Objects.equals(this.upper, ipAddress.upper) &&
        Objects.equals(this.local, ipAddress.local) &&
        Objects.equals(this.ipv4, ipAddress.ipv4) &&
        Objects.equals(this.section, ipAddress.section) &&
        Objects.equals(this.network, ipAddress.network) &&
        Objects.equals(this.maxSegmentValue, ipAddress.maxSegmentValue) &&
        Objects.equals(this.nonZeroHostCount, ipAddress.nonZeroHostCount) &&
        Objects.equals(this.bytesPerSegment, ipAddress.bytesPerSegment) &&
        Objects.equals(this.bitsPerSegment, ipAddress.bitsPerSegment) &&
        Objects.equals(this.byteCount, ipAddress.byteCount) &&
        Objects.equals(this.lowerNonZeroHost, ipAddress.lowerNonZeroHost) &&
        Objects.equals(this.sequentialBlockCount, ipAddress.sequentialBlockCount) &&
        Objects.equals(this.iterable, ipAddress.iterable) &&
        Objects.equals(this.ipaddress, ipAddress.ipaddress) &&
        Objects.equals(this.ipversion, ipAddress.ipversion) &&
        Objects.equals(this.ipv4Convertible, ipAddress.ipv4Convertible) &&
        Objects.equals(this.ipv6Convertible, ipAddress.ipv6Convertible) &&
        Objects.equals(this.linkLocal, ipAddress.linkLocal) &&
        Objects.equals(this.unspecified, ipAddress.unspecified) &&
        Objects.equals(this.anyLocal, ipAddress.anyLocal) &&
        Objects.equals(this.zeroHost, ipAddress.zeroHost) &&
        Objects.equals(this.hostMask, ipAddress.hostMask) &&
        Objects.equals(this.networkMask, ipAddress.networkMask) &&
        Objects.equals(this.singleNetwork, ipAddress.singleNetwork) &&
        Objects.equals(this.prefixLength, ipAddress.prefixLength) &&
        Objects.equals(this.ipv6, ipAddress.ipv6) &&
        Objects.equals(this.hostSection, ipAddress.hostSection) &&
        Objects.equals(this.networkSection, ipAddress.networkSection) &&
        Objects.equals(this.segments, ipAddress.segments) &&
        Objects.equals(this.count, ipAddress.count) &&
        Objects.equals(this.bitCount, ipAddress.bitCount) &&
        Objects.equals(this.prefixed, ipAddress.prefixed) &&
        Objects.equals(this.prefixBlock, ipAddress.prefixBlock) &&
        Objects.equals(this.sequentialBlockIndex, ipAddress.sequentialBlockIndex) &&
        Objects.equals(this.sequential, ipAddress.sequential) &&
        Objects.equals(this.singlePrefixBlock, ipAddress.singlePrefixBlock) &&
        Objects.equals(this.divisionStrings, ipAddress.divisionStrings) &&
        Objects.equals(this.prefixCount, ipAddress.prefixCount) &&
        Objects.equals(this.bytes, ipAddress.bytes) &&
        Objects.equals(this.value, ipAddress.value) &&
        Objects.equals(this.zero, ipAddress.zero) &&
        Objects.equals(this.prefixLengthForSingleBlock, ipAddress.prefixLengthForSingleBlock) &&
        Objects.equals(this.minPrefixLengthForBlock, ipAddress.minPrefixLengthForBlock) &&
        Objects.equals(this.fullRange, ipAddress.fullRange) &&
        Objects.equals(this.upperBytes, ipAddress.upperBytes) &&
        Objects.equals(this.upperValue, ipAddress.upperValue) &&
        Objects.equals(this.max, ipAddress.max) &&
        Objects.equals(this.multiple, ipAddress.multiple) &&
        Objects.equals(this.divisionCount, ipAddress.divisionCount) &&
        Objects.equals(this.segmentCount, ipAddress.segmentCount) &&
        Objects.equals(this.segmentStrings, ipAddress.segmentStrings) &&
        Objects.equals(this.macaddress, ipAddress.macaddress) &&
        Objects.equals(this.multicast, ipAddress.multicast);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loopback, networkPrefixLength, lower, upper, local, ipv4, section, network, maxSegmentValue, nonZeroHostCount, bytesPerSegment, bitsPerSegment, byteCount, lowerNonZeroHost, sequentialBlockCount, iterable, ipaddress, ipversion, ipv4Convertible, ipv6Convertible, linkLocal, unspecified, anyLocal, zeroHost, hostMask, networkMask, singleNetwork, prefixLength, ipv6, hostSection, networkSection, segments, count, bitCount, prefixed, prefixBlock, sequentialBlockIndex, sequential, singlePrefixBlock, divisionStrings, prefixCount, bytes, value, zero, prefixLengthForSingleBlock, minPrefixLengthForBlock, fullRange, upperBytes, upperValue, max, multiple, divisionCount, segmentCount, segmentStrings, macaddress, multicast);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPAddress {\n");
    sb.append("    loopback: ").append(toIndentedString(loopback)).append("\n");
    sb.append("    networkPrefixLength: ").append(toIndentedString(networkPrefixLength)).append("\n");
    sb.append("    lower: ").append(toIndentedString(lower)).append("\n");
    sb.append("    upper: ").append(toIndentedString(upper)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    ipv4: ").append(toIndentedString(ipv4)).append("\n");
    sb.append("    section: ").append(toIndentedString(section)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    maxSegmentValue: ").append(toIndentedString(maxSegmentValue)).append("\n");
    sb.append("    nonZeroHostCount: ").append(toIndentedString(nonZeroHostCount)).append("\n");
    sb.append("    bytesPerSegment: ").append(toIndentedString(bytesPerSegment)).append("\n");
    sb.append("    bitsPerSegment: ").append(toIndentedString(bitsPerSegment)).append("\n");
    sb.append("    byteCount: ").append(toIndentedString(byteCount)).append("\n");
    sb.append("    lowerNonZeroHost: ").append(toIndentedString(lowerNonZeroHost)).append("\n");
    sb.append("    sequentialBlockCount: ").append(toIndentedString(sequentialBlockCount)).append("\n");
    sb.append("    iterable: ").append(toIndentedString(iterable)).append("\n");
    sb.append("    ipaddress: ").append(toIndentedString(ipaddress)).append("\n");
    sb.append("    ipversion: ").append(toIndentedString(ipversion)).append("\n");
    sb.append("    ipv4Convertible: ").append(toIndentedString(ipv4Convertible)).append("\n");
    sb.append("    ipv6Convertible: ").append(toIndentedString(ipv6Convertible)).append("\n");
    sb.append("    linkLocal: ").append(toIndentedString(linkLocal)).append("\n");
    sb.append("    unspecified: ").append(toIndentedString(unspecified)).append("\n");
    sb.append("    anyLocal: ").append(toIndentedString(anyLocal)).append("\n");
    sb.append("    zeroHost: ").append(toIndentedString(zeroHost)).append("\n");
    sb.append("    hostMask: ").append(toIndentedString(hostMask)).append("\n");
    sb.append("    networkMask: ").append(toIndentedString(networkMask)).append("\n");
    sb.append("    singleNetwork: ").append(toIndentedString(singleNetwork)).append("\n");
    sb.append("    prefixLength: ").append(toIndentedString(prefixLength)).append("\n");
    sb.append("    ipv6: ").append(toIndentedString(ipv6)).append("\n");
    sb.append("    hostSection: ").append(toIndentedString(hostSection)).append("\n");
    sb.append("    networkSection: ").append(toIndentedString(networkSection)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    bitCount: ").append(toIndentedString(bitCount)).append("\n");
    sb.append("    prefixed: ").append(toIndentedString(prefixed)).append("\n");
    sb.append("    prefixBlock: ").append(toIndentedString(prefixBlock)).append("\n");
    sb.append("    sequentialBlockIndex: ").append(toIndentedString(sequentialBlockIndex)).append("\n");
    sb.append("    sequential: ").append(toIndentedString(sequential)).append("\n");
    sb.append("    singlePrefixBlock: ").append(toIndentedString(singlePrefixBlock)).append("\n");
    sb.append("    divisionStrings: ").append(toIndentedString(divisionStrings)).append("\n");
    sb.append("    prefixCount: ").append(toIndentedString(prefixCount)).append("\n");
    sb.append("    bytes: ").append(toIndentedString(bytes)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    zero: ").append(toIndentedString(zero)).append("\n");
    sb.append("    prefixLengthForSingleBlock: ").append(toIndentedString(prefixLengthForSingleBlock)).append("\n");
    sb.append("    minPrefixLengthForBlock: ").append(toIndentedString(minPrefixLengthForBlock)).append("\n");
    sb.append("    fullRange: ").append(toIndentedString(fullRange)).append("\n");
    sb.append("    upperBytes: ").append(toIndentedString(upperBytes)).append("\n");
    sb.append("    upperValue: ").append(toIndentedString(upperValue)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    multiple: ").append(toIndentedString(multiple)).append("\n");
    sb.append("    divisionCount: ").append(toIndentedString(divisionCount)).append("\n");
    sb.append("    segmentCount: ").append(toIndentedString(segmentCount)).append("\n");
    sb.append("    segmentStrings: ").append(toIndentedString(segmentStrings)).append("\n");
    sb.append("    macaddress: ").append(toIndentedString(macaddress)).append("\n");
    sb.append("    multicast: ").append(toIndentedString(multicast)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("loopback");
    openapiFields.add("networkPrefixLength");
    openapiFields.add("lower");
    openapiFields.add("upper");
    openapiFields.add("local");
    openapiFields.add("ipv4");
    openapiFields.add("section");
    openapiFields.add("network");
    openapiFields.add("maxSegmentValue");
    openapiFields.add("nonZeroHostCount");
    openapiFields.add("bytesPerSegment");
    openapiFields.add("bitsPerSegment");
    openapiFields.add("byteCount");
    openapiFields.add("lowerNonZeroHost");
    openapiFields.add("sequentialBlockCount");
    openapiFields.add("iterable");
    openapiFields.add("ipaddress");
    openapiFields.add("ipversion");
    openapiFields.add("ipv4Convertible");
    openapiFields.add("ipv6Convertible");
    openapiFields.add("linkLocal");
    openapiFields.add("unspecified");
    openapiFields.add("anyLocal");
    openapiFields.add("zeroHost");
    openapiFields.add("hostMask");
    openapiFields.add("networkMask");
    openapiFields.add("singleNetwork");
    openapiFields.add("prefixLength");
    openapiFields.add("ipv6");
    openapiFields.add("hostSection");
    openapiFields.add("networkSection");
    openapiFields.add("segments");
    openapiFields.add("count");
    openapiFields.add("bitCount");
    openapiFields.add("prefixed");
    openapiFields.add("prefixBlock");
    openapiFields.add("sequentialBlockIndex");
    openapiFields.add("sequential");
    openapiFields.add("singlePrefixBlock");
    openapiFields.add("divisionStrings");
    openapiFields.add("prefixCount");
    openapiFields.add("bytes");
    openapiFields.add("value");
    openapiFields.add("zero");
    openapiFields.add("prefixLengthForSingleBlock");
    openapiFields.add("minPrefixLengthForBlock");
    openapiFields.add("fullRange");
    openapiFields.add("upperBytes");
    openapiFields.add("upperValue");
    openapiFields.add("max");
    openapiFields.add("multiple");
    openapiFields.add("divisionCount");
    openapiFields.add("segmentCount");
    openapiFields.add("segmentStrings");
    openapiFields.add("macaddress");
    openapiFields.add("multicast");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IPAddress
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IPAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPAddress is not found in the empty JSON string", IPAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IPAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPAddress` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `lower`
      if (jsonObj.get("lower") != null && !jsonObj.get("lower").isJsonNull()) {
        IPAddress.validateJsonObject(jsonObj.getAsJsonObject("lower"));
      }
      // validate the optional field `upper`
      if (jsonObj.get("upper") != null && !jsonObj.get("upper").isJsonNull()) {
        IPAddress.validateJsonObject(jsonObj.getAsJsonObject("upper"));
      }
      // validate the optional field `section`
      if (jsonObj.get("section") != null && !jsonObj.get("section").isJsonNull()) {
        IPAddressSection.validateJsonObject(jsonObj.getAsJsonObject("section"));
      }
      // validate the optional field `network`
      if (jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) {
        IPAddressNetworkObjectObjectObjectObjectObject.validateJsonObject(jsonObj.getAsJsonObject("network"));
      }
      // validate the optional field `lowerNonZeroHost`
      if (jsonObj.get("lowerNonZeroHost") != null && !jsonObj.get("lowerNonZeroHost").isJsonNull()) {
        IPAddress.validateJsonObject(jsonObj.getAsJsonObject("lowerNonZeroHost"));
      }
      if ((jsonObj.get("ipversion") != null && !jsonObj.get("ipversion").isJsonNull()) && !jsonObj.get("ipversion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipversion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipversion").toString()));
      }
      // validate the optional field `hostMask`
      if (jsonObj.get("hostMask") != null && !jsonObj.get("hostMask").isJsonNull()) {
        IPAddress.validateJsonObject(jsonObj.getAsJsonObject("hostMask"));
      }
      // validate the optional field `networkMask`
      if (jsonObj.get("networkMask") != null && !jsonObj.get("networkMask").isJsonNull()) {
        IPAddress.validateJsonObject(jsonObj.getAsJsonObject("networkMask"));
      }
      // validate the optional field `hostSection`
      if (jsonObj.get("hostSection") != null && !jsonObj.get("hostSection").isJsonNull()) {
        IPAddressSection.validateJsonObject(jsonObj.getAsJsonObject("hostSection"));
      }
      // validate the optional field `networkSection`
      if (jsonObj.get("networkSection") != null && !jsonObj.get("networkSection").isJsonNull()) {
        IPAddressSection.validateJsonObject(jsonObj.getAsJsonObject("networkSection"));
      }
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull()) {
        JsonArray jsonArraysegments = jsonObj.getAsJsonArray("segments");
        if (jsonArraysegments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("segments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `segments` to be an array in the JSON string but got `%s`", jsonObj.get("segments").toString()));
          }

          // validate the optional field `segments` (array)
          for (int i = 0; i < jsonArraysegments.size(); i++) {
            IPAddressSegment.validateJsonObject(jsonArraysegments.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("divisionStrings") != null && !jsonObj.get("divisionStrings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `divisionStrings` to be an array in the JSON string but got `%s`", jsonObj.get("divisionStrings").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bytes") != null && !jsonObj.get("bytes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bytes` to be an array in the JSON string but got `%s`", jsonObj.get("bytes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("upperBytes") != null && !jsonObj.get("upperBytes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `upperBytes` to be an array in the JSON string but got `%s`", jsonObj.get("upperBytes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("segmentStrings") != null && !jsonObj.get("segmentStrings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentStrings` to be an array in the JSON string but got `%s`", jsonObj.get("segmentStrings").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<IPAddress>() {
           @Override
           public void write(JsonWriter out, IPAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPAddress read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IPAddress given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IPAddress
  * @throws IOException if the JSON string is invalid with respect to IPAddress
  */
  public static IPAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPAddress.class);
  }

 /**
  * Convert an instance of IPAddress to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

