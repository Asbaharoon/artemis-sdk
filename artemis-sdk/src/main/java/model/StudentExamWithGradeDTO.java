/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.StudentExam;
import org.openapitools.client.model.StudentResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StudentExamWithGradeDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class StudentExamWithGradeDTO {
  public static final String SERIALIZED_NAME_MAX_POINTS = "maxPoints";
  @SerializedName(SERIALIZED_NAME_MAX_POINTS)
  private Double maxPoints;

  public static final String SERIALIZED_NAME_MAX_BONUS_POINTS = "maxBonusPoints";
  @SerializedName(SERIALIZED_NAME_MAX_BONUS_POINTS)
  private Double maxBonusPoints;

  /**
   * Gets or Sets gradeType
   */
  @JsonAdapter(GradeTypeEnum.Adapter.class)
  public enum GradeTypeEnum {
    NONE("NONE"),
    
    BONUS("BONUS"),
    
    GRADE("GRADE");

    private String value;

    GradeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GradeTypeEnum fromValue(String value) {
      for (GradeTypeEnum b : GradeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GradeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GradeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GradeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GradeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GRADE_TYPE = "gradeType";
  @SerializedName(SERIALIZED_NAME_GRADE_TYPE)
  private GradeTypeEnum gradeType;

  public static final String SERIALIZED_NAME_STUDENT_EXAM = "studentExam";
  @SerializedName(SERIALIZED_NAME_STUDENT_EXAM)
  private StudentExam studentExam;

  public static final String SERIALIZED_NAME_STUDENT_RESULT = "studentResult";
  @SerializedName(SERIALIZED_NAME_STUDENT_RESULT)
  private StudentResult studentResult;

  public static final String SERIALIZED_NAME_ACHIEVED_POINTS_PER_EXERCISE = "achievedPointsPerExercise";
  @SerializedName(SERIALIZED_NAME_ACHIEVED_POINTS_PER_EXERCISE)
  private Map<String, Double> achievedPointsPerExercise = new HashMap<>();

  public StudentExamWithGradeDTO() {
  }

  public StudentExamWithGradeDTO maxPoints(Double maxPoints) {
    
    this.maxPoints = maxPoints;
    return this;
  }

   /**
   * Get maxPoints
   * @return maxPoints
  **/
  @javax.annotation.Nullable

  public Double getMaxPoints() {
    return maxPoints;
  }


  public void setMaxPoints(Double maxPoints) {
    this.maxPoints = maxPoints;
  }


  public StudentExamWithGradeDTO maxBonusPoints(Double maxBonusPoints) {
    
    this.maxBonusPoints = maxBonusPoints;
    return this;
  }

   /**
   * Get maxBonusPoints
   * @return maxBonusPoints
  **/
  @javax.annotation.Nullable

  public Double getMaxBonusPoints() {
    return maxBonusPoints;
  }


  public void setMaxBonusPoints(Double maxBonusPoints) {
    this.maxBonusPoints = maxBonusPoints;
  }


  public StudentExamWithGradeDTO gradeType(GradeTypeEnum gradeType) {
    
    this.gradeType = gradeType;
    return this;
  }

   /**
   * Get gradeType
   * @return gradeType
  **/
  @javax.annotation.Nullable

  public GradeTypeEnum getGradeType() {
    return gradeType;
  }


  public void setGradeType(GradeTypeEnum gradeType) {
    this.gradeType = gradeType;
  }


  public StudentExamWithGradeDTO studentExam(StudentExam studentExam) {
    
    this.studentExam = studentExam;
    return this;
  }

   /**
   * Get studentExam
   * @return studentExam
  **/
  @javax.annotation.Nullable

  public StudentExam getStudentExam() {
    return studentExam;
  }


  public void setStudentExam(StudentExam studentExam) {
    this.studentExam = studentExam;
  }


  public StudentExamWithGradeDTO studentResult(StudentResult studentResult) {
    
    this.studentResult = studentResult;
    return this;
  }

   /**
   * Get studentResult
   * @return studentResult
  **/
  @javax.annotation.Nullable

  public StudentResult getStudentResult() {
    return studentResult;
  }


  public void setStudentResult(StudentResult studentResult) {
    this.studentResult = studentResult;
  }


  public StudentExamWithGradeDTO achievedPointsPerExercise(Map<String, Double> achievedPointsPerExercise) {
    
    this.achievedPointsPerExercise = achievedPointsPerExercise;
    return this;
  }

  public StudentExamWithGradeDTO putAchievedPointsPerExerciseItem(String key, Double achievedPointsPerExerciseItem) {
    if (this.achievedPointsPerExercise == null) {
      this.achievedPointsPerExercise = new HashMap<>();
    }
    this.achievedPointsPerExercise.put(key, achievedPointsPerExerciseItem);
    return this;
  }

   /**
   * Get achievedPointsPerExercise
   * @return achievedPointsPerExercise
  **/
  @javax.annotation.Nullable

  public Map<String, Double> getAchievedPointsPerExercise() {
    return achievedPointsPerExercise;
  }


  public void setAchievedPointsPerExercise(Map<String, Double> achievedPointsPerExercise) {
    this.achievedPointsPerExercise = achievedPointsPerExercise;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StudentExamWithGradeDTO studentExamWithGradeDTO = (StudentExamWithGradeDTO) o;
    return Objects.equals(this.maxPoints, studentExamWithGradeDTO.maxPoints) &&
        Objects.equals(this.maxBonusPoints, studentExamWithGradeDTO.maxBonusPoints) &&
        Objects.equals(this.gradeType, studentExamWithGradeDTO.gradeType) &&
        Objects.equals(this.studentExam, studentExamWithGradeDTO.studentExam) &&
        Objects.equals(this.studentResult, studentExamWithGradeDTO.studentResult) &&
        Objects.equals(this.achievedPointsPerExercise, studentExamWithGradeDTO.achievedPointsPerExercise);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxPoints, maxBonusPoints, gradeType, studentExam, studentResult, achievedPointsPerExercise);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StudentExamWithGradeDTO {\n");
    sb.append("    maxPoints: ").append(toIndentedString(maxPoints)).append("\n");
    sb.append("    maxBonusPoints: ").append(toIndentedString(maxBonusPoints)).append("\n");
    sb.append("    gradeType: ").append(toIndentedString(gradeType)).append("\n");
    sb.append("    studentExam: ").append(toIndentedString(studentExam)).append("\n");
    sb.append("    studentResult: ").append(toIndentedString(studentResult)).append("\n");
    sb.append("    achievedPointsPerExercise: ").append(toIndentedString(achievedPointsPerExercise)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxPoints");
    openapiFields.add("maxBonusPoints");
    openapiFields.add("gradeType");
    openapiFields.add("studentExam");
    openapiFields.add("studentResult");
    openapiFields.add("achievedPointsPerExercise");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StudentExamWithGradeDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StudentExamWithGradeDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StudentExamWithGradeDTO is not found in the empty JSON string", StudentExamWithGradeDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!StudentExamWithGradeDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StudentExamWithGradeDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("gradeType") != null && !jsonObj.get("gradeType").isJsonNull()) && !jsonObj.get("gradeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gradeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gradeType").toString()));
      }
      // validate the optional field `studentExam`
      if (jsonObj.get("studentExam") != null && !jsonObj.get("studentExam").isJsonNull()) {
        StudentExam.validateJsonObject(jsonObj.getAsJsonObject("studentExam"));
      }
      // validate the optional field `studentResult`
      if (jsonObj.get("studentResult") != null && !jsonObj.get("studentResult").isJsonNull()) {
        StudentResult.validateJsonObject(jsonObj.getAsJsonObject("studentResult"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StudentExamWithGradeDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StudentExamWithGradeDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StudentExamWithGradeDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StudentExamWithGradeDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<StudentExamWithGradeDTO>() {
           @Override
           public void write(JsonWriter out, StudentExamWithGradeDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StudentExamWithGradeDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StudentExamWithGradeDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StudentExamWithGradeDTO
  * @throws IOException if the JSON string is invalid with respect to StudentExamWithGradeDTO
  */
  public static StudentExamWithGradeDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StudentExamWithGradeDTO.class);
  }

 /**
  * Convert an instance of StudentExamWithGradeDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

