/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.GroupNotification;
import org.openapitools.client.model.NotificationTarget;
import org.openapitools.client.model.SingleUserNotification;
import org.openapitools.client.model.SystemNotification;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Notification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class Notification {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_NOTIFICATION_DATE = "notificationDate";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_DATE)
  private OffsetDateTime notificationDate;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_TARGET_TRANSIENT = "targetTransient";
  @SerializedName(SERIALIZED_NAME_TARGET_TRANSIENT)
  private NotificationTarget targetTransient;

  /**
   * Gets or Sets priority
   */
  @JsonAdapter(PriorityEnum.Adapter.class)
  public enum PriorityEnum {
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH");

    private String value;

    PriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriorityEnum fromValue(String value) {
      for (PriorityEnum b : PriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriorityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private PriorityEnum priority;

  public static final String SERIALIZED_NAME_OUTDATED = "outdated";
  @SerializedName(SERIALIZED_NAME_OUTDATED)
  private Boolean outdated;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private User author;

  public static final String SERIALIZED_NAME_TRANSIENT_AND_STRING_TARGET = "transientAndStringTarget";
  @SerializedName(SERIALIZED_NAME_TRANSIENT_AND_STRING_TARGET)
  private NotificationTarget transientAndStringTarget;

  public static final String SERIALIZED_NAME_NOTIFICATION_TYPE = "notificationType";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TYPE)
  protected String notificationType;

  public Notification() {
    this.notificationType = this.getClass().getSimpleName();
  }

  public Notification id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public Notification title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public Notification text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nullable

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  public Notification notificationDate(OffsetDateTime notificationDate) {
    
    this.notificationDate = notificationDate;
    return this;
  }

   /**
   * Get notificationDate
   * @return notificationDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getNotificationDate() {
    return notificationDate;
  }


  public void setNotificationDate(OffsetDateTime notificationDate) {
    this.notificationDate = notificationDate;
  }


  public Notification target(String target) {
    
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable

  public String getTarget() {
    return target;
  }


  public void setTarget(String target) {
    this.target = target;
  }


  public Notification targetTransient(NotificationTarget targetTransient) {
    
    this.targetTransient = targetTransient;
    return this;
  }

   /**
   * Get targetTransient
   * @return targetTransient
  **/
  @javax.annotation.Nullable

  public NotificationTarget getTargetTransient() {
    return targetTransient;
  }


  public void setTargetTransient(NotificationTarget targetTransient) {
    this.targetTransient = targetTransient;
  }


  public Notification priority(PriorityEnum priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nullable

  public PriorityEnum getPriority() {
    return priority;
  }


  public void setPriority(PriorityEnum priority) {
    this.priority = priority;
  }


  public Notification outdated(Boolean outdated) {
    
    this.outdated = outdated;
    return this;
  }

   /**
   * Get outdated
   * @return outdated
  **/
  @javax.annotation.Nullable

  public Boolean getOutdated() {
    return outdated;
  }


  public void setOutdated(Boolean outdated) {
    this.outdated = outdated;
  }


  public Notification author(User author) {
    
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @javax.annotation.Nullable

  public User getAuthor() {
    return author;
  }


  public void setAuthor(User author) {
    this.author = author;
  }


  public Notification transientAndStringTarget(NotificationTarget transientAndStringTarget) {
    
    this.transientAndStringTarget = transientAndStringTarget;
    return this;
  }

   /**
   * Get transientAndStringTarget
   * @return transientAndStringTarget
  **/
  @javax.annotation.Nullable

  public NotificationTarget getTransientAndStringTarget() {
    return transientAndStringTarget;
  }


  public void setTransientAndStringTarget(NotificationTarget transientAndStringTarget) {
    this.transientAndStringTarget = transientAndStringTarget;
  }


  public Notification notificationType(String notificationType) {
    
    this.notificationType = notificationType;
    return this;
  }

   /**
   * Get notificationType
   * @return notificationType
  **/
  @javax.annotation.Nonnull

  public String getNotificationType() {
    return notificationType;
  }


  public void setNotificationType(String notificationType) {
    this.notificationType = notificationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Notification notification = (Notification) o;
    return Objects.equals(this.id, notification.id) &&
        Objects.equals(this.title, notification.title) &&
        Objects.equals(this.text, notification.text) &&
        Objects.equals(this.notificationDate, notification.notificationDate) &&
        Objects.equals(this.target, notification.target) &&
        Objects.equals(this.targetTransient, notification.targetTransient) &&
        Objects.equals(this.priority, notification.priority) &&
        Objects.equals(this.outdated, notification.outdated) &&
        Objects.equals(this.author, notification.author) &&
        Objects.equals(this.transientAndStringTarget, notification.transientAndStringTarget) &&
        Objects.equals(this.notificationType, notification.notificationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, text, notificationDate, target, targetTransient, priority, outdated, author, transientAndStringTarget, notificationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Notification {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    notificationDate: ").append(toIndentedString(notificationDate)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    targetTransient: ").append(toIndentedString(targetTransient)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    outdated: ").append(toIndentedString(outdated)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    transientAndStringTarget: ").append(toIndentedString(transientAndStringTarget)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("text");
    openapiFields.add("notificationDate");
    openapiFields.add("target");
    openapiFields.add("targetTransient");
    openapiFields.add("priority");
    openapiFields.add("outdated");
    openapiFields.add("author");
    openapiFields.add("transientAndStringTarget");
    openapiFields.add("notificationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("notificationType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Notification
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Notification.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Notification is not found in the empty JSON string", Notification.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonObj.get("notificationType").getAsString();
      switch (discriminatorValue) {
        case "GroupNotification":
          GroupNotification.validateJsonObject(jsonObj);
          break;
        case "SingleUserNotification":
          SingleUserNotification.validateJsonObject(jsonObj);
          break;
        case "SystemNotification":
          SystemNotification.validateJsonObject(jsonObj);
          break;
        default: 
          throw new IllegalArgumentException(String.format("The value of the `notificationType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of Notification given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Notification
  * @throws IOException if the JSON string is invalid with respect to Notification
  */
  public static Notification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Notification.class);
  }

 /**
  * Convert an instance of Notification to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

