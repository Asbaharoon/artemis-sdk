/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExerciseScoresDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ExerciseScoresDTO {
  public static final String SERIALIZED_NAME_EXERCISE_ID = "exerciseId";
  @SerializedName(SERIALIZED_NAME_EXERCISE_ID)
  private Long exerciseId;

  public static final String SERIALIZED_NAME_EXERCISE_TITLE = "exerciseTitle";
  @SerializedName(SERIALIZED_NAME_EXERCISE_TITLE)
  private String exerciseTitle;

  /**
   * Gets or Sets exerciseType
   */
  @JsonAdapter(ExerciseTypeEnum.Adapter.class)
  public enum ExerciseTypeEnum {
    TEXT("TEXT"),
    
    PROGRAMMING("PROGRAMMING"),
    
    MODELING("MODELING"),
    
    FILE_UPLOAD("FILE_UPLOAD"),
    
    QUIZ("QUIZ");

    private String value;

    ExerciseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExerciseTypeEnum fromValue(String value) {
      for (ExerciseTypeEnum b : ExerciseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExerciseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExerciseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExerciseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExerciseTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EXERCISE_TYPE = "exerciseType";
  @SerializedName(SERIALIZED_NAME_EXERCISE_TYPE)
  private ExerciseTypeEnum exerciseType;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private OffsetDateTime releaseDate;

  public static final String SERIALIZED_NAME_SCORE_OF_STUDENT = "scoreOfStudent";
  @SerializedName(SERIALIZED_NAME_SCORE_OF_STUDENT)
  private Double scoreOfStudent;

  public static final String SERIALIZED_NAME_AVERAGE_SCORE_ACHIEVED = "averageScoreAchieved";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SCORE_ACHIEVED)
  private Double averageScoreAchieved;

  public static final String SERIALIZED_NAME_MAX_SCORE_ACHIEVED = "maxScoreAchieved";
  @SerializedName(SERIALIZED_NAME_MAX_SCORE_ACHIEVED)
  private Double maxScoreAchieved;

  public ExerciseScoresDTO() {
  }

  public ExerciseScoresDTO exerciseId(Long exerciseId) {
    
    this.exerciseId = exerciseId;
    return this;
  }

   /**
   * Get exerciseId
   * @return exerciseId
  **/
  @javax.annotation.Nullable

  public Long getExerciseId() {
    return exerciseId;
  }


  public void setExerciseId(Long exerciseId) {
    this.exerciseId = exerciseId;
  }


  public ExerciseScoresDTO exerciseTitle(String exerciseTitle) {
    
    this.exerciseTitle = exerciseTitle;
    return this;
  }

   /**
   * Get exerciseTitle
   * @return exerciseTitle
  **/
  @javax.annotation.Nullable

  public String getExerciseTitle() {
    return exerciseTitle;
  }


  public void setExerciseTitle(String exerciseTitle) {
    this.exerciseTitle = exerciseTitle;
  }


  public ExerciseScoresDTO exerciseType(ExerciseTypeEnum exerciseType) {
    
    this.exerciseType = exerciseType;
    return this;
  }

   /**
   * Get exerciseType
   * @return exerciseType
  **/
  @javax.annotation.Nullable

  public ExerciseTypeEnum getExerciseType() {
    return exerciseType;
  }


  public void setExerciseType(ExerciseTypeEnum exerciseType) {
    this.exerciseType = exerciseType;
  }


  public ExerciseScoresDTO releaseDate(OffsetDateTime releaseDate) {
    
    this.releaseDate = releaseDate;
    return this;
  }

   /**
   * Get releaseDate
   * @return releaseDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getReleaseDate() {
    return releaseDate;
  }


  public void setReleaseDate(OffsetDateTime releaseDate) {
    this.releaseDate = releaseDate;
  }


  public ExerciseScoresDTO scoreOfStudent(Double scoreOfStudent) {
    
    this.scoreOfStudent = scoreOfStudent;
    return this;
  }

   /**
   * Get scoreOfStudent
   * @return scoreOfStudent
  **/
  @javax.annotation.Nullable

  public Double getScoreOfStudent() {
    return scoreOfStudent;
  }


  public void setScoreOfStudent(Double scoreOfStudent) {
    this.scoreOfStudent = scoreOfStudent;
  }


  public ExerciseScoresDTO averageScoreAchieved(Double averageScoreAchieved) {
    
    this.averageScoreAchieved = averageScoreAchieved;
    return this;
  }

   /**
   * Get averageScoreAchieved
   * @return averageScoreAchieved
  **/
  @javax.annotation.Nullable

  public Double getAverageScoreAchieved() {
    return averageScoreAchieved;
  }


  public void setAverageScoreAchieved(Double averageScoreAchieved) {
    this.averageScoreAchieved = averageScoreAchieved;
  }


  public ExerciseScoresDTO maxScoreAchieved(Double maxScoreAchieved) {
    
    this.maxScoreAchieved = maxScoreAchieved;
    return this;
  }

   /**
   * Get maxScoreAchieved
   * @return maxScoreAchieved
  **/
  @javax.annotation.Nullable

  public Double getMaxScoreAchieved() {
    return maxScoreAchieved;
  }


  public void setMaxScoreAchieved(Double maxScoreAchieved) {
    this.maxScoreAchieved = maxScoreAchieved;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExerciseScoresDTO exerciseScoresDTO = (ExerciseScoresDTO) o;
    return Objects.equals(this.exerciseId, exerciseScoresDTO.exerciseId) &&
        Objects.equals(this.exerciseTitle, exerciseScoresDTO.exerciseTitle) &&
        Objects.equals(this.exerciseType, exerciseScoresDTO.exerciseType) &&
        Objects.equals(this.releaseDate, exerciseScoresDTO.releaseDate) &&
        Objects.equals(this.scoreOfStudent, exerciseScoresDTO.scoreOfStudent) &&
        Objects.equals(this.averageScoreAchieved, exerciseScoresDTO.averageScoreAchieved) &&
        Objects.equals(this.maxScoreAchieved, exerciseScoresDTO.maxScoreAchieved);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exerciseId, exerciseTitle, exerciseType, releaseDate, scoreOfStudent, averageScoreAchieved, maxScoreAchieved);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExerciseScoresDTO {\n");
    sb.append("    exerciseId: ").append(toIndentedString(exerciseId)).append("\n");
    sb.append("    exerciseTitle: ").append(toIndentedString(exerciseTitle)).append("\n");
    sb.append("    exerciseType: ").append(toIndentedString(exerciseType)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    scoreOfStudent: ").append(toIndentedString(scoreOfStudent)).append("\n");
    sb.append("    averageScoreAchieved: ").append(toIndentedString(averageScoreAchieved)).append("\n");
    sb.append("    maxScoreAchieved: ").append(toIndentedString(maxScoreAchieved)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exerciseId");
    openapiFields.add("exerciseTitle");
    openapiFields.add("exerciseType");
    openapiFields.add("releaseDate");
    openapiFields.add("scoreOfStudent");
    openapiFields.add("averageScoreAchieved");
    openapiFields.add("maxScoreAchieved");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExerciseScoresDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExerciseScoresDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExerciseScoresDTO is not found in the empty JSON string", ExerciseScoresDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExerciseScoresDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExerciseScoresDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("exerciseTitle") != null && !jsonObj.get("exerciseTitle").isJsonNull()) && !jsonObj.get("exerciseTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exerciseTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exerciseTitle").toString()));
      }
      if ((jsonObj.get("exerciseType") != null && !jsonObj.get("exerciseType").isJsonNull()) && !jsonObj.get("exerciseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exerciseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exerciseType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExerciseScoresDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExerciseScoresDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExerciseScoresDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExerciseScoresDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ExerciseScoresDTO>() {
           @Override
           public void write(JsonWriter out, ExerciseScoresDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExerciseScoresDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExerciseScoresDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExerciseScoresDTO
  * @throws IOException if the JSON string is invalid with respect to ExerciseScoresDTO
  */
  public static ExerciseScoresDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExerciseScoresDTO.class);
  }

 /**
  * Convert an instance of ExerciseScoresDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

