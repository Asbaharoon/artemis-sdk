/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.PlagiarismMatch;
import org.openapitools.client.model.PlagiarismResultTextSubmissionElement;
import org.openapitools.client.model.PlagiarismSubmissionTextSubmissionElement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlagiarismComparisonTextSubmissionElement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class PlagiarismComparisonTextSubmissionElement {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_PLAGIARISM_RESULT = "plagiarismResult";
  @SerializedName(SERIALIZED_NAME_PLAGIARISM_RESULT)
  private PlagiarismResultTextSubmissionElement plagiarismResult;

  public static final String SERIALIZED_NAME_SUBMISSION_A = "submissionA";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_A)
  private PlagiarismSubmissionTextSubmissionElement submissionA;

  public static final String SERIALIZED_NAME_SUBMISSION_B = "submissionB";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_B)
  private PlagiarismSubmissionTextSubmissionElement submissionB;

  public static final String SERIALIZED_NAME_MATCHES = "matches";
  @SerializedName(SERIALIZED_NAME_MATCHES)
  private Set<PlagiarismMatch> matches = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SIMILARITY = "similarity";
  @SerializedName(SERIALIZED_NAME_SIMILARITY)
  private Double similarity;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CONFIRMED("CONFIRMED"),
    
    DENIED("DENIED"),
    
    NONE("NONE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public PlagiarismComparisonTextSubmissionElement() {
  }

  public PlagiarismComparisonTextSubmissionElement id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public PlagiarismComparisonTextSubmissionElement plagiarismResult(PlagiarismResultTextSubmissionElement plagiarismResult) {
    
    this.plagiarismResult = plagiarismResult;
    return this;
  }

   /**
   * Get plagiarismResult
   * @return plagiarismResult
  **/
  @javax.annotation.Nullable

  public PlagiarismResultTextSubmissionElement getPlagiarismResult() {
    return plagiarismResult;
  }


  public void setPlagiarismResult(PlagiarismResultTextSubmissionElement plagiarismResult) {
    this.plagiarismResult = plagiarismResult;
  }


  public PlagiarismComparisonTextSubmissionElement submissionA(PlagiarismSubmissionTextSubmissionElement submissionA) {
    
    this.submissionA = submissionA;
    return this;
  }

   /**
   * Get submissionA
   * @return submissionA
  **/
  @javax.annotation.Nullable

  public PlagiarismSubmissionTextSubmissionElement getSubmissionA() {
    return submissionA;
  }


  public void setSubmissionA(PlagiarismSubmissionTextSubmissionElement submissionA) {
    this.submissionA = submissionA;
  }


  public PlagiarismComparisonTextSubmissionElement submissionB(PlagiarismSubmissionTextSubmissionElement submissionB) {
    
    this.submissionB = submissionB;
    return this;
  }

   /**
   * Get submissionB
   * @return submissionB
  **/
  @javax.annotation.Nullable

  public PlagiarismSubmissionTextSubmissionElement getSubmissionB() {
    return submissionB;
  }


  public void setSubmissionB(PlagiarismSubmissionTextSubmissionElement submissionB) {
    this.submissionB = submissionB;
  }


  public PlagiarismComparisonTextSubmissionElement matches(Set<PlagiarismMatch> matches) {
    
    this.matches = matches;
    return this;
  }

  public PlagiarismComparisonTextSubmissionElement addMatchesItem(PlagiarismMatch matchesItem) {
    if (this.matches == null) {
      this.matches = new LinkedHashSet<>();
    }
    this.matches.add(matchesItem);
    return this;
  }

   /**
   * Get matches
   * @return matches
  **/
  @javax.annotation.Nullable

  public Set<PlagiarismMatch> getMatches() {
    return matches;
  }


  public void setMatches(Set<PlagiarismMatch> matches) {
    this.matches = matches;
  }


  public PlagiarismComparisonTextSubmissionElement similarity(Double similarity) {
    
    this.similarity = similarity;
    return this;
  }

   /**
   * Get similarity
   * @return similarity
  **/
  @javax.annotation.Nullable

  public Double getSimilarity() {
    return similarity;
  }


  public void setSimilarity(Double similarity) {
    this.similarity = similarity;
  }


  public PlagiarismComparisonTextSubmissionElement status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlagiarismComparisonTextSubmissionElement plagiarismComparisonTextSubmissionElement = (PlagiarismComparisonTextSubmissionElement) o;
    return Objects.equals(this.id, plagiarismComparisonTextSubmissionElement.id) &&
        Objects.equals(this.plagiarismResult, plagiarismComparisonTextSubmissionElement.plagiarismResult) &&
        Objects.equals(this.submissionA, plagiarismComparisonTextSubmissionElement.submissionA) &&
        Objects.equals(this.submissionB, plagiarismComparisonTextSubmissionElement.submissionB) &&
        Objects.equals(this.matches, plagiarismComparisonTextSubmissionElement.matches) &&
        Objects.equals(this.similarity, plagiarismComparisonTextSubmissionElement.similarity) &&
        Objects.equals(this.status, plagiarismComparisonTextSubmissionElement.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, plagiarismResult, submissionA, submissionB, matches, similarity, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlagiarismComparisonTextSubmissionElement {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    plagiarismResult: ").append(toIndentedString(plagiarismResult)).append("\n");
    sb.append("    submissionA: ").append(toIndentedString(submissionA)).append("\n");
    sb.append("    submissionB: ").append(toIndentedString(submissionB)).append("\n");
    sb.append("    matches: ").append(toIndentedString(matches)).append("\n");
    sb.append("    similarity: ").append(toIndentedString(similarity)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("plagiarismResult");
    openapiFields.add("submissionA");
    openapiFields.add("submissionB");
    openapiFields.add("matches");
    openapiFields.add("similarity");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PlagiarismComparisonTextSubmissionElement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PlagiarismComparisonTextSubmissionElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlagiarismComparisonTextSubmissionElement is not found in the empty JSON string", PlagiarismComparisonTextSubmissionElement.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PlagiarismComparisonTextSubmissionElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlagiarismComparisonTextSubmissionElement` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `plagiarismResult`
      if (jsonObj.get("plagiarismResult") != null && !jsonObj.get("plagiarismResult").isJsonNull()) {
        PlagiarismResultTextSubmissionElement.validateJsonObject(jsonObj.getAsJsonObject("plagiarismResult"));
      }
      // validate the optional field `submissionA`
      if (jsonObj.get("submissionA") != null && !jsonObj.get("submissionA").isJsonNull()) {
        PlagiarismSubmissionTextSubmissionElement.validateJsonObject(jsonObj.getAsJsonObject("submissionA"));
      }
      // validate the optional field `submissionB`
      if (jsonObj.get("submissionB") != null && !jsonObj.get("submissionB").isJsonNull()) {
        PlagiarismSubmissionTextSubmissionElement.validateJsonObject(jsonObj.getAsJsonObject("submissionB"));
      }
      if (jsonObj.get("matches") != null && !jsonObj.get("matches").isJsonNull()) {
        JsonArray jsonArraymatches = jsonObj.getAsJsonArray("matches");
        if (jsonArraymatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matches` to be an array in the JSON string but got `%s`", jsonObj.get("matches").toString()));
          }

          // validate the optional field `matches` (array)
          for (int i = 0; i < jsonArraymatches.size(); i++) {
            PlagiarismMatch.validateJsonObject(jsonArraymatches.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlagiarismComparisonTextSubmissionElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlagiarismComparisonTextSubmissionElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlagiarismComparisonTextSubmissionElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlagiarismComparisonTextSubmissionElement.class));

       return (TypeAdapter<T>) new TypeAdapter<PlagiarismComparisonTextSubmissionElement>() {
           @Override
           public void write(JsonWriter out, PlagiarismComparisonTextSubmissionElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlagiarismComparisonTextSubmissionElement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlagiarismComparisonTextSubmissionElement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlagiarismComparisonTextSubmissionElement
  * @throws IOException if the JSON string is invalid with respect to PlagiarismComparisonTextSubmissionElement
  */
  public static PlagiarismComparisonTextSubmissionElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlagiarismComparisonTextSubmissionElement.class);
  }

 /**
  * Convert an instance of PlagiarismComparisonTextSubmissionElement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

