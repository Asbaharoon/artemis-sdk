/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.BuildLogEntry;
import org.openapitools.client.model.Participation;
import org.openapitools.client.model.Result;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProgrammingSubmissionAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ProgrammingSubmissionAllOf {
  public static final String SERIALIZED_NAME_PARTICIPATION = "participation";
  @SerializedName(SERIALIZED_NAME_PARTICIPATION)
  private Participation participation;

  public static final String SERIALIZED_NAME_COMMIT_HASH = "commitHash";
  @SerializedName(SERIALIZED_NAME_COMMIT_HASH)
  private String commitHash;

  public static final String SERIALIZED_NAME_BUILD_FAILED = "buildFailed";
  @SerializedName(SERIALIZED_NAME_BUILD_FAILED)
  private Boolean buildFailed;

  public static final String SERIALIZED_NAME_BUILD_ARTIFACT = "buildArtifact";
  @SerializedName(SERIALIZED_NAME_BUILD_ARTIFACT)
  private Boolean buildArtifact;

  public static final String SERIALIZED_NAME_BUILD_LOG_ENTRIES = "buildLogEntries";
  @SerializedName(SERIALIZED_NAME_BUILD_LOG_ENTRIES)
  private List<BuildLogEntry> buildLogEntries = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<Result> results = new ArrayList<>();

  public ProgrammingSubmissionAllOf() {
  }

  
  public ProgrammingSubmissionAllOf(
     List<Result> results
  ) {
    this();
    this.results = results;
  }

  public ProgrammingSubmissionAllOf participation(Participation participation) {
    
    this.participation = participation;
    return this;
  }

   /**
   * Get participation
   * @return participation
  **/
  @javax.annotation.Nullable

  public Participation getParticipation() {
    return participation;
  }


  public void setParticipation(Participation participation) {
    this.participation = participation;
  }


  public ProgrammingSubmissionAllOf commitHash(String commitHash) {
    
    this.commitHash = commitHash;
    return this;
  }

   /**
   * Get commitHash
   * @return commitHash
  **/
  @javax.annotation.Nullable

  public String getCommitHash() {
    return commitHash;
  }


  public void setCommitHash(String commitHash) {
    this.commitHash = commitHash;
  }


  public ProgrammingSubmissionAllOf buildFailed(Boolean buildFailed) {
    
    this.buildFailed = buildFailed;
    return this;
  }

   /**
   * Get buildFailed
   * @return buildFailed
  **/
  @javax.annotation.Nullable

  public Boolean getBuildFailed() {
    return buildFailed;
  }


  public void setBuildFailed(Boolean buildFailed) {
    this.buildFailed = buildFailed;
  }


  public ProgrammingSubmissionAllOf buildArtifact(Boolean buildArtifact) {
    
    this.buildArtifact = buildArtifact;
    return this;
  }

   /**
   * Get buildArtifact
   * @return buildArtifact
  **/
  @javax.annotation.Nullable

  public Boolean getBuildArtifact() {
    return buildArtifact;
  }


  public void setBuildArtifact(Boolean buildArtifact) {
    this.buildArtifact = buildArtifact;
  }


  public ProgrammingSubmissionAllOf buildLogEntries(List<BuildLogEntry> buildLogEntries) {
    
    this.buildLogEntries = buildLogEntries;
    return this;
  }

  public ProgrammingSubmissionAllOf addBuildLogEntriesItem(BuildLogEntry buildLogEntriesItem) {
    if (this.buildLogEntries == null) {
      this.buildLogEntries = new ArrayList<>();
    }
    this.buildLogEntries.add(buildLogEntriesItem);
    return this;
  }

   /**
   * Get buildLogEntries
   * @return buildLogEntries
  **/
  @javax.annotation.Nullable

  public List<BuildLogEntry> getBuildLogEntries() {
    return buildLogEntries;
  }


  public void setBuildLogEntries(List<BuildLogEntry> buildLogEntries) {
    this.buildLogEntries = buildLogEntries;
  }


   /**
   * Get results
   * @return results
  **/
  @javax.annotation.Nullable

  public List<Result> getResults() {
    return results;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgrammingSubmissionAllOf programmingSubmissionAllOf = (ProgrammingSubmissionAllOf) o;
    return Objects.equals(this.participation, programmingSubmissionAllOf.participation) &&
        Objects.equals(this.commitHash, programmingSubmissionAllOf.commitHash) &&
        Objects.equals(this.buildFailed, programmingSubmissionAllOf.buildFailed) &&
        Objects.equals(this.buildArtifact, programmingSubmissionAllOf.buildArtifact) &&
        Objects.equals(this.buildLogEntries, programmingSubmissionAllOf.buildLogEntries) &&
        Objects.equals(this.results, programmingSubmissionAllOf.results);
  }

  @Override
  public int hashCode() {
    return Objects.hash(participation, commitHash, buildFailed, buildArtifact, buildLogEntries, results);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgrammingSubmissionAllOf {\n");
    sb.append("    participation: ").append(toIndentedString(participation)).append("\n");
    sb.append("    commitHash: ").append(toIndentedString(commitHash)).append("\n");
    sb.append("    buildFailed: ").append(toIndentedString(buildFailed)).append("\n");
    sb.append("    buildArtifact: ").append(toIndentedString(buildArtifact)).append("\n");
    sb.append("    buildLogEntries: ").append(toIndentedString(buildLogEntries)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("participation");
    openapiFields.add("commitHash");
    openapiFields.add("buildFailed");
    openapiFields.add("buildArtifact");
    openapiFields.add("buildLogEntries");
    openapiFields.add("results");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProgrammingSubmissionAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProgrammingSubmissionAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProgrammingSubmissionAllOf is not found in the empty JSON string", ProgrammingSubmissionAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProgrammingSubmissionAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProgrammingSubmissionAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `participation`
      if (jsonObj.get("participation") != null && !jsonObj.get("participation").isJsonNull()) {
        Participation.validateJsonObject(jsonObj.getAsJsonObject("participation"));
      }
      if ((jsonObj.get("commitHash") != null && !jsonObj.get("commitHash").isJsonNull()) && !jsonObj.get("commitHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitHash").toString()));
      }
      if (jsonObj.get("buildLogEntries") != null && !jsonObj.get("buildLogEntries").isJsonNull()) {
        JsonArray jsonArraybuildLogEntries = jsonObj.getAsJsonArray("buildLogEntries");
        if (jsonArraybuildLogEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buildLogEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buildLogEntries` to be an array in the JSON string but got `%s`", jsonObj.get("buildLogEntries").toString()));
          }

          // validate the optional field `buildLogEntries` (array)
          for (int i = 0; i < jsonArraybuildLogEntries.size(); i++) {
            BuildLogEntry.validateJsonObject(jsonArraybuildLogEntries.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
        if (jsonArrayresults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
          }

          // validate the optional field `results` (array)
          for (int i = 0; i < jsonArrayresults.size(); i++) {
            Result.validateJsonObject(jsonArrayresults.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProgrammingSubmissionAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProgrammingSubmissionAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProgrammingSubmissionAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProgrammingSubmissionAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ProgrammingSubmissionAllOf>() {
           @Override
           public void write(JsonWriter out, ProgrammingSubmissionAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProgrammingSubmissionAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProgrammingSubmissionAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProgrammingSubmissionAllOf
  * @throws IOException if the JSON string is invalid with respect to ProgrammingSubmissionAllOf
  */
  public static ProgrammingSubmissionAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProgrammingSubmissionAllOf.class);
  }

 /**
  * Convert an instance of ProgrammingSubmissionAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

