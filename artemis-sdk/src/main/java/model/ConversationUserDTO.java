/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationUserDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ConversationUserDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_IS_INSTRUCTOR = "isInstructor";
  @SerializedName(SERIALIZED_NAME_IS_INSTRUCTOR)
  private Boolean isInstructor;

  public static final String SERIALIZED_NAME_IS_EDITOR = "isEditor";
  @SerializedName(SERIALIZED_NAME_IS_EDITOR)
  private Boolean isEditor;

  public static final String SERIALIZED_NAME_IS_TEACHING_ASSISTANT = "isTeachingAssistant";
  @SerializedName(SERIALIZED_NAME_IS_TEACHING_ASSISTANT)
  private Boolean isTeachingAssistant;

  public static final String SERIALIZED_NAME_IS_STUDENT = "isStudent";
  @SerializedName(SERIALIZED_NAME_IS_STUDENT)
  private Boolean isStudent;

  public static final String SERIALIZED_NAME_IS_CHANNEL_MODERATOR = "isChannelModerator";
  @SerializedName(SERIALIZED_NAME_IS_CHANNEL_MODERATOR)
  private Boolean isChannelModerator;

  public static final String SERIALIZED_NAME_IS_REQUESTING_USER = "isRequestingUser";
  @SerializedName(SERIALIZED_NAME_IS_REQUESTING_USER)
  private Boolean isRequestingUser;

  public ConversationUserDTO() {
  }

  public ConversationUserDTO id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ConversationUserDTO login(String login) {
    
    this.login = login;
    return this;
  }

   /**
   * Get login
   * @return login
  **/
  @javax.annotation.Nullable

  public String getLogin() {
    return login;
  }


  public void setLogin(String login) {
    this.login = login;
  }


  public ConversationUserDTO name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ConversationUserDTO firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public ConversationUserDTO lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public ConversationUserDTO isInstructor(Boolean isInstructor) {
    
    this.isInstructor = isInstructor;
    return this;
  }

   /**
   * Get isInstructor
   * @return isInstructor
  **/
  @javax.annotation.Nullable

  public Boolean getIsInstructor() {
    return isInstructor;
  }


  public void setIsInstructor(Boolean isInstructor) {
    this.isInstructor = isInstructor;
  }


  public ConversationUserDTO isEditor(Boolean isEditor) {
    
    this.isEditor = isEditor;
    return this;
  }

   /**
   * Get isEditor
   * @return isEditor
  **/
  @javax.annotation.Nullable

  public Boolean getIsEditor() {
    return isEditor;
  }


  public void setIsEditor(Boolean isEditor) {
    this.isEditor = isEditor;
  }


  public ConversationUserDTO isTeachingAssistant(Boolean isTeachingAssistant) {
    
    this.isTeachingAssistant = isTeachingAssistant;
    return this;
  }

   /**
   * Get isTeachingAssistant
   * @return isTeachingAssistant
  **/
  @javax.annotation.Nullable

  public Boolean getIsTeachingAssistant() {
    return isTeachingAssistant;
  }


  public void setIsTeachingAssistant(Boolean isTeachingAssistant) {
    this.isTeachingAssistant = isTeachingAssistant;
  }


  public ConversationUserDTO isStudent(Boolean isStudent) {
    
    this.isStudent = isStudent;
    return this;
  }

   /**
   * Get isStudent
   * @return isStudent
  **/
  @javax.annotation.Nullable

  public Boolean getIsStudent() {
    return isStudent;
  }


  public void setIsStudent(Boolean isStudent) {
    this.isStudent = isStudent;
  }


  public ConversationUserDTO isChannelModerator(Boolean isChannelModerator) {
    
    this.isChannelModerator = isChannelModerator;
    return this;
  }

   /**
   * Get isChannelModerator
   * @return isChannelModerator
  **/
  @javax.annotation.Nullable

  public Boolean getIsChannelModerator() {
    return isChannelModerator;
  }


  public void setIsChannelModerator(Boolean isChannelModerator) {
    this.isChannelModerator = isChannelModerator;
  }


  public ConversationUserDTO isRequestingUser(Boolean isRequestingUser) {
    
    this.isRequestingUser = isRequestingUser;
    return this;
  }

   /**
   * Get isRequestingUser
   * @return isRequestingUser
  **/
  @javax.annotation.Nullable

  public Boolean getIsRequestingUser() {
    return isRequestingUser;
  }


  public void setIsRequestingUser(Boolean isRequestingUser) {
    this.isRequestingUser = isRequestingUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationUserDTO conversationUserDTO = (ConversationUserDTO) o;
    return Objects.equals(this.id, conversationUserDTO.id) &&
        Objects.equals(this.login, conversationUserDTO.login) &&
        Objects.equals(this.name, conversationUserDTO.name) &&
        Objects.equals(this.firstName, conversationUserDTO.firstName) &&
        Objects.equals(this.lastName, conversationUserDTO.lastName) &&
        Objects.equals(this.isInstructor, conversationUserDTO.isInstructor) &&
        Objects.equals(this.isEditor, conversationUserDTO.isEditor) &&
        Objects.equals(this.isTeachingAssistant, conversationUserDTO.isTeachingAssistant) &&
        Objects.equals(this.isStudent, conversationUserDTO.isStudent) &&
        Objects.equals(this.isChannelModerator, conversationUserDTO.isChannelModerator) &&
        Objects.equals(this.isRequestingUser, conversationUserDTO.isRequestingUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, login, name, firstName, lastName, isInstructor, isEditor, isTeachingAssistant, isStudent, isChannelModerator, isRequestingUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationUserDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    isInstructor: ").append(toIndentedString(isInstructor)).append("\n");
    sb.append("    isEditor: ").append(toIndentedString(isEditor)).append("\n");
    sb.append("    isTeachingAssistant: ").append(toIndentedString(isTeachingAssistant)).append("\n");
    sb.append("    isStudent: ").append(toIndentedString(isStudent)).append("\n");
    sb.append("    isChannelModerator: ").append(toIndentedString(isChannelModerator)).append("\n");
    sb.append("    isRequestingUser: ").append(toIndentedString(isRequestingUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("login");
    openapiFields.add("name");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("isInstructor");
    openapiFields.add("isEditor");
    openapiFields.add("isTeachingAssistant");
    openapiFields.add("isStudent");
    openapiFields.add("isChannelModerator");
    openapiFields.add("isRequestingUser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationUserDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConversationUserDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationUserDTO is not found in the empty JSON string", ConversationUserDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationUserDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationUserDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("login") != null && !jsonObj.get("login").isJsonNull()) && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationUserDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationUserDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationUserDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationUserDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationUserDTO>() {
           @Override
           public void write(JsonWriter out, ConversationUserDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationUserDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationUserDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationUserDTO
  * @throws IOException if the JSON string is invalid with respect to ConversationUserDTO
  */
  public static ConversationUserDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationUserDTO.class);
  }

 /**
  * Convert an instance of ConversationUserDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

