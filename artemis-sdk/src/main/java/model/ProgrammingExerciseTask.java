/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.ExerciseHint;
import org.openapitools.client.model.ProgrammingExerciseTestCase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProgrammingExerciseTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ProgrammingExerciseTask {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_TASK_NAME = "taskName";
  @SerializedName(SERIALIZED_NAME_TASK_NAME)
  private String taskName;

  public static final String SERIALIZED_NAME_EXERCISE_HINTS = "exerciseHints";
  @SerializedName(SERIALIZED_NAME_EXERCISE_HINTS)
  private Set<ExerciseHint> exerciseHints = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TEST_CASES = "testCases";
  @SerializedName(SERIALIZED_NAME_TEST_CASES)
  private Set<ProgrammingExerciseTestCase> testCases = new LinkedHashSet<>();

  public ProgrammingExerciseTask() {
  }

  public ProgrammingExerciseTask id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ProgrammingExerciseTask taskName(String taskName) {
    
    this.taskName = taskName;
    return this;
  }

   /**
   * Get taskName
   * @return taskName
  **/
  @javax.annotation.Nullable

  public String getTaskName() {
    return taskName;
  }


  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }


  public ProgrammingExerciseTask exerciseHints(Set<ExerciseHint> exerciseHints) {
    
    this.exerciseHints = exerciseHints;
    return this;
  }

  public ProgrammingExerciseTask addExerciseHintsItem(ExerciseHint exerciseHintsItem) {
    if (this.exerciseHints == null) {
      this.exerciseHints = new LinkedHashSet<>();
    }
    this.exerciseHints.add(exerciseHintsItem);
    return this;
  }

   /**
   * Get exerciseHints
   * @return exerciseHints
  **/
  @javax.annotation.Nullable

  public Set<ExerciseHint> getExerciseHints() {
    return exerciseHints;
  }


  public void setExerciseHints(Set<ExerciseHint> exerciseHints) {
    this.exerciseHints = exerciseHints;
  }


  public ProgrammingExerciseTask testCases(Set<ProgrammingExerciseTestCase> testCases) {
    
    this.testCases = testCases;
    return this;
  }

  public ProgrammingExerciseTask addTestCasesItem(ProgrammingExerciseTestCase testCasesItem) {
    if (this.testCases == null) {
      this.testCases = new LinkedHashSet<>();
    }
    this.testCases.add(testCasesItem);
    return this;
  }

   /**
   * Get testCases
   * @return testCases
  **/
  @javax.annotation.Nullable

  public Set<ProgrammingExerciseTestCase> getTestCases() {
    return testCases;
  }


  public void setTestCases(Set<ProgrammingExerciseTestCase> testCases) {
    this.testCases = testCases;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgrammingExerciseTask programmingExerciseTask = (ProgrammingExerciseTask) o;
    return Objects.equals(this.id, programmingExerciseTask.id) &&
        Objects.equals(this.taskName, programmingExerciseTask.taskName) &&
        Objects.equals(this.exerciseHints, programmingExerciseTask.exerciseHints) &&
        Objects.equals(this.testCases, programmingExerciseTask.testCases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, taskName, exerciseHints, testCases);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgrammingExerciseTask {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("    exerciseHints: ").append(toIndentedString(exerciseHints)).append("\n");
    sb.append("    testCases: ").append(toIndentedString(testCases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("taskName");
    openapiFields.add("exerciseHints");
    openapiFields.add("testCases");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProgrammingExerciseTask
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProgrammingExerciseTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProgrammingExerciseTask is not found in the empty JSON string", ProgrammingExerciseTask.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProgrammingExerciseTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProgrammingExerciseTask` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("taskName") != null && !jsonObj.get("taskName").isJsonNull()) && !jsonObj.get("taskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskName").toString()));
      }
      if (jsonObj.get("exerciseHints") != null && !jsonObj.get("exerciseHints").isJsonNull()) {
        JsonArray jsonArrayexerciseHints = jsonObj.getAsJsonArray("exerciseHints");
        if (jsonArrayexerciseHints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exerciseHints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exerciseHints` to be an array in the JSON string but got `%s`", jsonObj.get("exerciseHints").toString()));
          }

          // validate the optional field `exerciseHints` (array)
          for (int i = 0; i < jsonArrayexerciseHints.size(); i++) {
            ExerciseHint.validateJsonObject(jsonArrayexerciseHints.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("testCases") != null && !jsonObj.get("testCases").isJsonNull()) {
        JsonArray jsonArraytestCases = jsonObj.getAsJsonArray("testCases");
        if (jsonArraytestCases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testCases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testCases` to be an array in the JSON string but got `%s`", jsonObj.get("testCases").toString()));
          }

          // validate the optional field `testCases` (array)
          for (int i = 0; i < jsonArraytestCases.size(); i++) {
            ProgrammingExerciseTestCase.validateJsonObject(jsonArraytestCases.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProgrammingExerciseTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProgrammingExerciseTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProgrammingExerciseTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProgrammingExerciseTask.class));

       return (TypeAdapter<T>) new TypeAdapter<ProgrammingExerciseTask>() {
           @Override
           public void write(JsonWriter out, ProgrammingExerciseTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProgrammingExerciseTask read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProgrammingExerciseTask given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProgrammingExerciseTask
  * @throws IOException if the JSON string is invalid with respect to ProgrammingExerciseTask
  */
  public static ProgrammingExerciseTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProgrammingExerciseTask.class);
  }

 /**
  * Convert an instance of ProgrammingExerciseTask to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

