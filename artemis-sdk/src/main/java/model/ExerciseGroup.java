/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Exam;
import org.openapitools.client.model.Exercise;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExerciseGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ExerciseGroup {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_IS_MANDATORY = "isMandatory";
  @SerializedName(SERIALIZED_NAME_IS_MANDATORY)
  private Boolean isMandatory;

  public static final String SERIALIZED_NAME_EXAM = "exam";
  @SerializedName(SERIALIZED_NAME_EXAM)
  private Exam exam;

  public static final String SERIALIZED_NAME_EXERCISES = "exercises";
  @SerializedName(SERIALIZED_NAME_EXERCISES)
  private Set<Exercise> exercises = new LinkedHashSet<>();

  public ExerciseGroup() {
  }

  public ExerciseGroup id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ExerciseGroup title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ExerciseGroup isMandatory(Boolean isMandatory) {
    
    this.isMandatory = isMandatory;
    return this;
  }

   /**
   * Get isMandatory
   * @return isMandatory
  **/
  @javax.annotation.Nullable

  public Boolean getIsMandatory() {
    return isMandatory;
  }


  public void setIsMandatory(Boolean isMandatory) {
    this.isMandatory = isMandatory;
  }


  public ExerciseGroup exam(Exam exam) {
    
    this.exam = exam;
    return this;
  }

   /**
   * Get exam
   * @return exam
  **/
  @javax.annotation.Nullable

  public Exam getExam() {
    return exam;
  }


  public void setExam(Exam exam) {
    this.exam = exam;
  }


  public ExerciseGroup exercises(Set<Exercise> exercises) {
    
    this.exercises = exercises;
    return this;
  }

  public ExerciseGroup addExercisesItem(Exercise exercisesItem) {
    if (this.exercises == null) {
      this.exercises = new LinkedHashSet<>();
    }
    this.exercises.add(exercisesItem);
    return this;
  }

   /**
   * Get exercises
   * @return exercises
  **/
  @javax.annotation.Nullable

  public Set<Exercise> getExercises() {
    return exercises;
  }


  public void setExercises(Set<Exercise> exercises) {
    this.exercises = exercises;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExerciseGroup exerciseGroup = (ExerciseGroup) o;
    return Objects.equals(this.id, exerciseGroup.id) &&
        Objects.equals(this.title, exerciseGroup.title) &&
        Objects.equals(this.isMandatory, exerciseGroup.isMandatory) &&
        Objects.equals(this.exam, exerciseGroup.exam) &&
        Objects.equals(this.exercises, exerciseGroup.exercises);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, isMandatory, exam, exercises);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExerciseGroup {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    isMandatory: ").append(toIndentedString(isMandatory)).append("\n");
    sb.append("    exam: ").append(toIndentedString(exam)).append("\n");
    sb.append("    exercises: ").append(toIndentedString(exercises)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("isMandatory");
    openapiFields.add("exam");
    openapiFields.add("exercises");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExerciseGroup
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExerciseGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExerciseGroup is not found in the empty JSON string", ExerciseGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExerciseGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExerciseGroup` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `exam`
      if (jsonObj.get("exam") != null && !jsonObj.get("exam").isJsonNull()) {
        Exam.validateJsonObject(jsonObj.getAsJsonObject("exam"));
      }
      if (jsonObj.get("exercises") != null && !jsonObj.get("exercises").isJsonNull()) {
        JsonArray jsonArrayexercises = jsonObj.getAsJsonArray("exercises");
        if (jsonArrayexercises != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exercises").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exercises` to be an array in the JSON string but got `%s`", jsonObj.get("exercises").toString()));
          }

          // validate the optional field `exercises` (array)
          for (int i = 0; i < jsonArrayexercises.size(); i++) {
            Exercise.validateJsonObject(jsonArrayexercises.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExerciseGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExerciseGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExerciseGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExerciseGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ExerciseGroup>() {
           @Override
           public void write(JsonWriter out, ExerciseGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExerciseGroup read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExerciseGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExerciseGroup
  * @throws IOException if the JSON string is invalid with respect to ExerciseGroup
  */
  public static ExerciseGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExerciseGroup.class);
  }

 /**
  * Convert an instance of ExerciseGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

