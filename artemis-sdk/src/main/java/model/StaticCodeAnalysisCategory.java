/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.ProgrammingExercise;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StaticCodeAnalysisCategory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class StaticCodeAnalysisCategory {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PENALTY = "penalty";
  @SerializedName(SERIALIZED_NAME_PENALTY)
  private Double penalty;

  public static final String SERIALIZED_NAME_MAX_PENALTY = "maxPenalty";
  @SerializedName(SERIALIZED_NAME_MAX_PENALTY)
  private Double maxPenalty;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    INACTIVE("INACTIVE"),
    
    FEEDBACK("FEEDBACK"),
    
    GRADED("GRADED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_EXERCISE = "exercise";
  @SerializedName(SERIALIZED_NAME_EXERCISE)
  private ProgrammingExercise exercise;

  public static final String SERIALIZED_NAME_PROGRAMMING_EXERCISE = "programmingExercise";
  @SerializedName(SERIALIZED_NAME_PROGRAMMING_EXERCISE)
  private ProgrammingExercise programmingExercise;

  public StaticCodeAnalysisCategory() {
  }

  public StaticCodeAnalysisCategory id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public StaticCodeAnalysisCategory name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public StaticCodeAnalysisCategory penalty(Double penalty) {
    
    this.penalty = penalty;
    return this;
  }

   /**
   * Get penalty
   * @return penalty
  **/
  @javax.annotation.Nullable

  public Double getPenalty() {
    return penalty;
  }


  public void setPenalty(Double penalty) {
    this.penalty = penalty;
  }


  public StaticCodeAnalysisCategory maxPenalty(Double maxPenalty) {
    
    this.maxPenalty = maxPenalty;
    return this;
  }

   /**
   * Get maxPenalty
   * @return maxPenalty
  **/
  @javax.annotation.Nullable

  public Double getMaxPenalty() {
    return maxPenalty;
  }


  public void setMaxPenalty(Double maxPenalty) {
    this.maxPenalty = maxPenalty;
  }


  public StaticCodeAnalysisCategory state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public StaticCodeAnalysisCategory exercise(ProgrammingExercise exercise) {
    
    this.exercise = exercise;
    return this;
  }

   /**
   * Get exercise
   * @return exercise
  **/
  @javax.annotation.Nullable

  public ProgrammingExercise getExercise() {
    return exercise;
  }


  public void setExercise(ProgrammingExercise exercise) {
    this.exercise = exercise;
  }


  public StaticCodeAnalysisCategory programmingExercise(ProgrammingExercise programmingExercise) {
    
    this.programmingExercise = programmingExercise;
    return this;
  }

   /**
   * Get programmingExercise
   * @return programmingExercise
  **/
  @javax.annotation.Nullable

  public ProgrammingExercise getProgrammingExercise() {
    return programmingExercise;
  }


  public void setProgrammingExercise(ProgrammingExercise programmingExercise) {
    this.programmingExercise = programmingExercise;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StaticCodeAnalysisCategory staticCodeAnalysisCategory = (StaticCodeAnalysisCategory) o;
    return Objects.equals(this.id, staticCodeAnalysisCategory.id) &&
        Objects.equals(this.name, staticCodeAnalysisCategory.name) &&
        Objects.equals(this.penalty, staticCodeAnalysisCategory.penalty) &&
        Objects.equals(this.maxPenalty, staticCodeAnalysisCategory.maxPenalty) &&
        Objects.equals(this.state, staticCodeAnalysisCategory.state) &&
        Objects.equals(this.exercise, staticCodeAnalysisCategory.exercise) &&
        Objects.equals(this.programmingExercise, staticCodeAnalysisCategory.programmingExercise);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, penalty, maxPenalty, state, exercise, programmingExercise);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StaticCodeAnalysisCategory {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    penalty: ").append(toIndentedString(penalty)).append("\n");
    sb.append("    maxPenalty: ").append(toIndentedString(maxPenalty)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    exercise: ").append(toIndentedString(exercise)).append("\n");
    sb.append("    programmingExercise: ").append(toIndentedString(programmingExercise)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("penalty");
    openapiFields.add("maxPenalty");
    openapiFields.add("state");
    openapiFields.add("exercise");
    openapiFields.add("programmingExercise");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StaticCodeAnalysisCategory
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StaticCodeAnalysisCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StaticCodeAnalysisCategory is not found in the empty JSON string", StaticCodeAnalysisCategory.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!StaticCodeAnalysisCategory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StaticCodeAnalysisCategory` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `exercise`
      if (jsonObj.get("exercise") != null && !jsonObj.get("exercise").isJsonNull()) {
        ProgrammingExercise.validateJsonObject(jsonObj.getAsJsonObject("exercise"));
      }
      // validate the optional field `programmingExercise`
      if (jsonObj.get("programmingExercise") != null && !jsonObj.get("programmingExercise").isJsonNull()) {
        ProgrammingExercise.validateJsonObject(jsonObj.getAsJsonObject("programmingExercise"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StaticCodeAnalysisCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StaticCodeAnalysisCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StaticCodeAnalysisCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StaticCodeAnalysisCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<StaticCodeAnalysisCategory>() {
           @Override
           public void write(JsonWriter out, StaticCodeAnalysisCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StaticCodeAnalysisCategory read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StaticCodeAnalysisCategory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StaticCodeAnalysisCategory
  * @throws IOException if the JSON string is invalid with respect to StaticCodeAnalysisCategory
  */
  public static StaticCodeAnalysisCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StaticCodeAnalysisCategory.class);
  }

 /**
  * Convert an instance of StaticCodeAnalysisCategory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

