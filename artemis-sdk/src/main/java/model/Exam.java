/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.Course;
import org.openapitools.client.model.ExamUser;
import org.openapitools.client.model.ExerciseGroup;
import org.openapitools.client.model.StudentExam;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Exam
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class Exam {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TEST_EXAM = "testExam";
  @SerializedName(SERIALIZED_NAME_TEST_EXAM)
  private Boolean testExam;

  public static final String SERIALIZED_NAME_MONITORING = "monitoring";
  @SerializedName(SERIALIZED_NAME_MONITORING)
  private Boolean monitoring;

  public static final String SERIALIZED_NAME_VISIBLE_DATE = "visibleDate";
  @SerializedName(SERIALIZED_NAME_VISIBLE_DATE)
  private OffsetDateTime visibleDate;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_PUBLISH_RESULTS_DATE = "publishResultsDate";
  @SerializedName(SERIALIZED_NAME_PUBLISH_RESULTS_DATE)
  private OffsetDateTime publishResultsDate;

  public static final String SERIALIZED_NAME_EXAM_STUDENT_REVIEW_START = "examStudentReviewStart";
  @SerializedName(SERIALIZED_NAME_EXAM_STUDENT_REVIEW_START)
  private OffsetDateTime examStudentReviewStart;

  public static final String SERIALIZED_NAME_EXAM_STUDENT_REVIEW_END = "examStudentReviewEnd";
  @SerializedName(SERIALIZED_NAME_EXAM_STUDENT_REVIEW_END)
  private OffsetDateTime examStudentReviewEnd;

  public static final String SERIALIZED_NAME_GRACE_PERIOD = "gracePeriod";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD)
  private Integer gracePeriod;

  public static final String SERIALIZED_NAME_WORKING_TIME = "workingTime";
  @SerializedName(SERIALIZED_NAME_WORKING_TIME)
  private Integer workingTime;

  public static final String SERIALIZED_NAME_START_TEXT = "startText";
  @SerializedName(SERIALIZED_NAME_START_TEXT)
  private String startText;

  public static final String SERIALIZED_NAME_END_TEXT = "endText";
  @SerializedName(SERIALIZED_NAME_END_TEXT)
  private String endText;

  public static final String SERIALIZED_NAME_CONFIRMATION_START_TEXT = "confirmationStartText";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_START_TEXT)
  private String confirmationStartText;

  public static final String SERIALIZED_NAME_CONFIRMATION_END_TEXT = "confirmationEndText";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_END_TEXT)
  private String confirmationEndText;

  public static final String SERIALIZED_NAME_EXAM_MAX_POINTS = "examMaxPoints";
  @SerializedName(SERIALIZED_NAME_EXAM_MAX_POINTS)
  private Integer examMaxPoints;

  public static final String SERIALIZED_NAME_RANDOMIZE_EXERCISE_ORDER = "randomizeExerciseOrder";
  @SerializedName(SERIALIZED_NAME_RANDOMIZE_EXERCISE_ORDER)
  private Boolean randomizeExerciseOrder;

  public static final String SERIALIZED_NAME_NUMBER_OF_EXERCISES_IN_EXAM = "numberOfExercisesInExam";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_EXERCISES_IN_EXAM)
  private Integer numberOfExercisesInExam;

  public static final String SERIALIZED_NAME_NUMBER_OF_CORRECTION_ROUNDS_IN_EXAM = "numberOfCorrectionRoundsInExam";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CORRECTION_ROUNDS_IN_EXAM)
  private Integer numberOfCorrectionRoundsInExam;

  public static final String SERIALIZED_NAME_EXAMINER = "examiner";
  @SerializedName(SERIALIZED_NAME_EXAMINER)
  private String examiner;

  public static final String SERIALIZED_NAME_MODULE_NUMBER = "moduleNumber";
  @SerializedName(SERIALIZED_NAME_MODULE_NUMBER)
  private String moduleNumber;

  public static final String SERIALIZED_NAME_COURSE_NAME = "courseName";
  @SerializedName(SERIALIZED_NAME_COURSE_NAME)
  private String courseName;

  public static final String SERIALIZED_NAME_EXAMPLE_SOLUTION_PUBLICATION_DATE = "exampleSolutionPublicationDate";
  @SerializedName(SERIALIZED_NAME_EXAMPLE_SOLUTION_PUBLICATION_DATE)
  private OffsetDateTime exampleSolutionPublicationDate;

  public static final String SERIALIZED_NAME_COURSE = "course";
  @SerializedName(SERIALIZED_NAME_COURSE)
  private Course course;

  public static final String SERIALIZED_NAME_EXERCISE_GROUPS = "exerciseGroups";
  @SerializedName(SERIALIZED_NAME_EXERCISE_GROUPS)
  private List<ExerciseGroup> exerciseGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_STUDENT_EXAMS = "studentExams";
  @SerializedName(SERIALIZED_NAME_STUDENT_EXAMS)
  private Set<StudentExam> studentExams = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_EXAM_ARCHIVE_PATH = "examArchivePath";
  @SerializedName(SERIALIZED_NAME_EXAM_ARCHIVE_PATH)
  private String examArchivePath;

  public static final String SERIALIZED_NAME_EXAM_USERS = "examUsers";
  @SerializedName(SERIALIZED_NAME_EXAM_USERS)
  private Set<ExamUser> examUsers = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_EXAM_USERS = "numberOfExamUsers";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_EXAM_USERS)
  private Long numberOfExamUsers;

  public Exam() {
  }

  public Exam id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public Exam title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public Exam testExam(Boolean testExam) {
    
    this.testExam = testExam;
    return this;
  }

   /**
   * Get testExam
   * @return testExam
  **/
  @javax.annotation.Nullable

  public Boolean getTestExam() {
    return testExam;
  }


  public void setTestExam(Boolean testExam) {
    this.testExam = testExam;
  }


  public Exam monitoring(Boolean monitoring) {
    
    this.monitoring = monitoring;
    return this;
  }

   /**
   * Get monitoring
   * @return monitoring
  **/
  @javax.annotation.Nullable

  public Boolean getMonitoring() {
    return monitoring;
  }


  public void setMonitoring(Boolean monitoring) {
    this.monitoring = monitoring;
  }


  public Exam visibleDate(OffsetDateTime visibleDate) {
    
    this.visibleDate = visibleDate;
    return this;
  }

   /**
   * Get visibleDate
   * @return visibleDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getVisibleDate() {
    return visibleDate;
  }


  public void setVisibleDate(OffsetDateTime visibleDate) {
    this.visibleDate = visibleDate;
  }


  public Exam startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public Exam endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public Exam publishResultsDate(OffsetDateTime publishResultsDate) {
    
    this.publishResultsDate = publishResultsDate;
    return this;
  }

   /**
   * Get publishResultsDate
   * @return publishResultsDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getPublishResultsDate() {
    return publishResultsDate;
  }


  public void setPublishResultsDate(OffsetDateTime publishResultsDate) {
    this.publishResultsDate = publishResultsDate;
  }


  public Exam examStudentReviewStart(OffsetDateTime examStudentReviewStart) {
    
    this.examStudentReviewStart = examStudentReviewStart;
    return this;
  }

   /**
   * Get examStudentReviewStart
   * @return examStudentReviewStart
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getExamStudentReviewStart() {
    return examStudentReviewStart;
  }


  public void setExamStudentReviewStart(OffsetDateTime examStudentReviewStart) {
    this.examStudentReviewStart = examStudentReviewStart;
  }


  public Exam examStudentReviewEnd(OffsetDateTime examStudentReviewEnd) {
    
    this.examStudentReviewEnd = examStudentReviewEnd;
    return this;
  }

   /**
   * Get examStudentReviewEnd
   * @return examStudentReviewEnd
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getExamStudentReviewEnd() {
    return examStudentReviewEnd;
  }


  public void setExamStudentReviewEnd(OffsetDateTime examStudentReviewEnd) {
    this.examStudentReviewEnd = examStudentReviewEnd;
  }


  public Exam gracePeriod(Integer gracePeriod) {
    
    this.gracePeriod = gracePeriod;
    return this;
  }

   /**
   * Get gracePeriod
   * @return gracePeriod
  **/
  @javax.annotation.Nullable

  public Integer getGracePeriod() {
    return gracePeriod;
  }


  public void setGracePeriod(Integer gracePeriod) {
    this.gracePeriod = gracePeriod;
  }


  public Exam workingTime(Integer workingTime) {
    
    this.workingTime = workingTime;
    return this;
  }

   /**
   * Get workingTime
   * @return workingTime
  **/
  @javax.annotation.Nullable

  public Integer getWorkingTime() {
    return workingTime;
  }


  public void setWorkingTime(Integer workingTime) {
    this.workingTime = workingTime;
  }


  public Exam startText(String startText) {
    
    this.startText = startText;
    return this;
  }

   /**
   * Get startText
   * @return startText
  **/
  @javax.annotation.Nullable

  public String getStartText() {
    return startText;
  }


  public void setStartText(String startText) {
    this.startText = startText;
  }


  public Exam endText(String endText) {
    
    this.endText = endText;
    return this;
  }

   /**
   * Get endText
   * @return endText
  **/
  @javax.annotation.Nullable

  public String getEndText() {
    return endText;
  }


  public void setEndText(String endText) {
    this.endText = endText;
  }


  public Exam confirmationStartText(String confirmationStartText) {
    
    this.confirmationStartText = confirmationStartText;
    return this;
  }

   /**
   * Get confirmationStartText
   * @return confirmationStartText
  **/
  @javax.annotation.Nullable

  public String getConfirmationStartText() {
    return confirmationStartText;
  }


  public void setConfirmationStartText(String confirmationStartText) {
    this.confirmationStartText = confirmationStartText;
  }


  public Exam confirmationEndText(String confirmationEndText) {
    
    this.confirmationEndText = confirmationEndText;
    return this;
  }

   /**
   * Get confirmationEndText
   * @return confirmationEndText
  **/
  @javax.annotation.Nullable

  public String getConfirmationEndText() {
    return confirmationEndText;
  }


  public void setConfirmationEndText(String confirmationEndText) {
    this.confirmationEndText = confirmationEndText;
  }


  public Exam examMaxPoints(Integer examMaxPoints) {
    
    this.examMaxPoints = examMaxPoints;
    return this;
  }

   /**
   * Get examMaxPoints
   * @return examMaxPoints
  **/
  @javax.annotation.Nullable

  public Integer getExamMaxPoints() {
    return examMaxPoints;
  }


  public void setExamMaxPoints(Integer examMaxPoints) {
    this.examMaxPoints = examMaxPoints;
  }


  public Exam randomizeExerciseOrder(Boolean randomizeExerciseOrder) {
    
    this.randomizeExerciseOrder = randomizeExerciseOrder;
    return this;
  }

   /**
   * Get randomizeExerciseOrder
   * @return randomizeExerciseOrder
  **/
  @javax.annotation.Nullable

  public Boolean getRandomizeExerciseOrder() {
    return randomizeExerciseOrder;
  }


  public void setRandomizeExerciseOrder(Boolean randomizeExerciseOrder) {
    this.randomizeExerciseOrder = randomizeExerciseOrder;
  }


  public Exam numberOfExercisesInExam(Integer numberOfExercisesInExam) {
    
    this.numberOfExercisesInExam = numberOfExercisesInExam;
    return this;
  }

   /**
   * Get numberOfExercisesInExam
   * @return numberOfExercisesInExam
  **/
  @javax.annotation.Nullable

  public Integer getNumberOfExercisesInExam() {
    return numberOfExercisesInExam;
  }


  public void setNumberOfExercisesInExam(Integer numberOfExercisesInExam) {
    this.numberOfExercisesInExam = numberOfExercisesInExam;
  }


  public Exam numberOfCorrectionRoundsInExam(Integer numberOfCorrectionRoundsInExam) {
    
    this.numberOfCorrectionRoundsInExam = numberOfCorrectionRoundsInExam;
    return this;
  }

   /**
   * Get numberOfCorrectionRoundsInExam
   * @return numberOfCorrectionRoundsInExam
  **/
  @javax.annotation.Nullable

  public Integer getNumberOfCorrectionRoundsInExam() {
    return numberOfCorrectionRoundsInExam;
  }


  public void setNumberOfCorrectionRoundsInExam(Integer numberOfCorrectionRoundsInExam) {
    this.numberOfCorrectionRoundsInExam = numberOfCorrectionRoundsInExam;
  }


  public Exam examiner(String examiner) {
    
    this.examiner = examiner;
    return this;
  }

   /**
   * Get examiner
   * @return examiner
  **/
  @javax.annotation.Nullable

  public String getExaminer() {
    return examiner;
  }


  public void setExaminer(String examiner) {
    this.examiner = examiner;
  }


  public Exam moduleNumber(String moduleNumber) {
    
    this.moduleNumber = moduleNumber;
    return this;
  }

   /**
   * Get moduleNumber
   * @return moduleNumber
  **/
  @javax.annotation.Nullable

  public String getModuleNumber() {
    return moduleNumber;
  }


  public void setModuleNumber(String moduleNumber) {
    this.moduleNumber = moduleNumber;
  }


  public Exam courseName(String courseName) {
    
    this.courseName = courseName;
    return this;
  }

   /**
   * Get courseName
   * @return courseName
  **/
  @javax.annotation.Nullable

  public String getCourseName() {
    return courseName;
  }


  public void setCourseName(String courseName) {
    this.courseName = courseName;
  }


  public Exam exampleSolutionPublicationDate(OffsetDateTime exampleSolutionPublicationDate) {
    
    this.exampleSolutionPublicationDate = exampleSolutionPublicationDate;
    return this;
  }

   /**
   * Get exampleSolutionPublicationDate
   * @return exampleSolutionPublicationDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getExampleSolutionPublicationDate() {
    return exampleSolutionPublicationDate;
  }


  public void setExampleSolutionPublicationDate(OffsetDateTime exampleSolutionPublicationDate) {
    this.exampleSolutionPublicationDate = exampleSolutionPublicationDate;
  }


  public Exam course(Course course) {
    
    this.course = course;
    return this;
  }

   /**
   * Get course
   * @return course
  **/
  @javax.annotation.Nullable

  public Course getCourse() {
    return course;
  }


  public void setCourse(Course course) {
    this.course = course;
  }


  public Exam exerciseGroups(List<ExerciseGroup> exerciseGroups) {
    
    this.exerciseGroups = exerciseGroups;
    return this;
  }

  public Exam addExerciseGroupsItem(ExerciseGroup exerciseGroupsItem) {
    if (this.exerciseGroups == null) {
      this.exerciseGroups = new ArrayList<>();
    }
    this.exerciseGroups.add(exerciseGroupsItem);
    return this;
  }

   /**
   * Get exerciseGroups
   * @return exerciseGroups
  **/
  @javax.annotation.Nullable

  public List<ExerciseGroup> getExerciseGroups() {
    return exerciseGroups;
  }


  public void setExerciseGroups(List<ExerciseGroup> exerciseGroups) {
    this.exerciseGroups = exerciseGroups;
  }


  public Exam studentExams(Set<StudentExam> studentExams) {
    
    this.studentExams = studentExams;
    return this;
  }

  public Exam addStudentExamsItem(StudentExam studentExamsItem) {
    if (this.studentExams == null) {
      this.studentExams = new LinkedHashSet<>();
    }
    this.studentExams.add(studentExamsItem);
    return this;
  }

   /**
   * Get studentExams
   * @return studentExams
  **/
  @javax.annotation.Nullable

  public Set<StudentExam> getStudentExams() {
    return studentExams;
  }


  public void setStudentExams(Set<StudentExam> studentExams) {
    this.studentExams = studentExams;
  }


  public Exam examArchivePath(String examArchivePath) {
    
    this.examArchivePath = examArchivePath;
    return this;
  }

   /**
   * Get examArchivePath
   * @return examArchivePath
  **/
  @javax.annotation.Nullable

  public String getExamArchivePath() {
    return examArchivePath;
  }


  public void setExamArchivePath(String examArchivePath) {
    this.examArchivePath = examArchivePath;
  }


  public Exam examUsers(Set<ExamUser> examUsers) {
    
    this.examUsers = examUsers;
    return this;
  }

  public Exam addExamUsersItem(ExamUser examUsersItem) {
    if (this.examUsers == null) {
      this.examUsers = new LinkedHashSet<>();
    }
    this.examUsers.add(examUsersItem);
    return this;
  }

   /**
   * Get examUsers
   * @return examUsers
  **/
  @javax.annotation.Nullable

  public Set<ExamUser> getExamUsers() {
    return examUsers;
  }


  public void setExamUsers(Set<ExamUser> examUsers) {
    this.examUsers = examUsers;
  }


  public Exam numberOfExamUsers(Long numberOfExamUsers) {
    
    this.numberOfExamUsers = numberOfExamUsers;
    return this;
  }

   /**
   * Get numberOfExamUsers
   * @return numberOfExamUsers
  **/
  @javax.annotation.Nullable

  public Long getNumberOfExamUsers() {
    return numberOfExamUsers;
  }


  public void setNumberOfExamUsers(Long numberOfExamUsers) {
    this.numberOfExamUsers = numberOfExamUsers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Exam exam = (Exam) o;
    return Objects.equals(this.id, exam.id) &&
        Objects.equals(this.title, exam.title) &&
        Objects.equals(this.testExam, exam.testExam) &&
        Objects.equals(this.monitoring, exam.monitoring) &&
        Objects.equals(this.visibleDate, exam.visibleDate) &&
        Objects.equals(this.startDate, exam.startDate) &&
        Objects.equals(this.endDate, exam.endDate) &&
        Objects.equals(this.publishResultsDate, exam.publishResultsDate) &&
        Objects.equals(this.examStudentReviewStart, exam.examStudentReviewStart) &&
        Objects.equals(this.examStudentReviewEnd, exam.examStudentReviewEnd) &&
        Objects.equals(this.gracePeriod, exam.gracePeriod) &&
        Objects.equals(this.workingTime, exam.workingTime) &&
        Objects.equals(this.startText, exam.startText) &&
        Objects.equals(this.endText, exam.endText) &&
        Objects.equals(this.confirmationStartText, exam.confirmationStartText) &&
        Objects.equals(this.confirmationEndText, exam.confirmationEndText) &&
        Objects.equals(this.examMaxPoints, exam.examMaxPoints) &&
        Objects.equals(this.randomizeExerciseOrder, exam.randomizeExerciseOrder) &&
        Objects.equals(this.numberOfExercisesInExam, exam.numberOfExercisesInExam) &&
        Objects.equals(this.numberOfCorrectionRoundsInExam, exam.numberOfCorrectionRoundsInExam) &&
        Objects.equals(this.examiner, exam.examiner) &&
        Objects.equals(this.moduleNumber, exam.moduleNumber) &&
        Objects.equals(this.courseName, exam.courseName) &&
        Objects.equals(this.exampleSolutionPublicationDate, exam.exampleSolutionPublicationDate) &&
        Objects.equals(this.course, exam.course) &&
        Objects.equals(this.exerciseGroups, exam.exerciseGroups) &&
        Objects.equals(this.studentExams, exam.studentExams) &&
        Objects.equals(this.examArchivePath, exam.examArchivePath) &&
        Objects.equals(this.examUsers, exam.examUsers) &&
        Objects.equals(this.numberOfExamUsers, exam.numberOfExamUsers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, testExam, monitoring, visibleDate, startDate, endDate, publishResultsDate, examStudentReviewStart, examStudentReviewEnd, gracePeriod, workingTime, startText, endText, confirmationStartText, confirmationEndText, examMaxPoints, randomizeExerciseOrder, numberOfExercisesInExam, numberOfCorrectionRoundsInExam, examiner, moduleNumber, courseName, exampleSolutionPublicationDate, course, exerciseGroups, studentExams, examArchivePath, examUsers, numberOfExamUsers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Exam {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    testExam: ").append(toIndentedString(testExam)).append("\n");
    sb.append("    monitoring: ").append(toIndentedString(monitoring)).append("\n");
    sb.append("    visibleDate: ").append(toIndentedString(visibleDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    publishResultsDate: ").append(toIndentedString(publishResultsDate)).append("\n");
    sb.append("    examStudentReviewStart: ").append(toIndentedString(examStudentReviewStart)).append("\n");
    sb.append("    examStudentReviewEnd: ").append(toIndentedString(examStudentReviewEnd)).append("\n");
    sb.append("    gracePeriod: ").append(toIndentedString(gracePeriod)).append("\n");
    sb.append("    workingTime: ").append(toIndentedString(workingTime)).append("\n");
    sb.append("    startText: ").append(toIndentedString(startText)).append("\n");
    sb.append("    endText: ").append(toIndentedString(endText)).append("\n");
    sb.append("    confirmationStartText: ").append(toIndentedString(confirmationStartText)).append("\n");
    sb.append("    confirmationEndText: ").append(toIndentedString(confirmationEndText)).append("\n");
    sb.append("    examMaxPoints: ").append(toIndentedString(examMaxPoints)).append("\n");
    sb.append("    randomizeExerciseOrder: ").append(toIndentedString(randomizeExerciseOrder)).append("\n");
    sb.append("    numberOfExercisesInExam: ").append(toIndentedString(numberOfExercisesInExam)).append("\n");
    sb.append("    numberOfCorrectionRoundsInExam: ").append(toIndentedString(numberOfCorrectionRoundsInExam)).append("\n");
    sb.append("    examiner: ").append(toIndentedString(examiner)).append("\n");
    sb.append("    moduleNumber: ").append(toIndentedString(moduleNumber)).append("\n");
    sb.append("    courseName: ").append(toIndentedString(courseName)).append("\n");
    sb.append("    exampleSolutionPublicationDate: ").append(toIndentedString(exampleSolutionPublicationDate)).append("\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    exerciseGroups: ").append(toIndentedString(exerciseGroups)).append("\n");
    sb.append("    studentExams: ").append(toIndentedString(studentExams)).append("\n");
    sb.append("    examArchivePath: ").append(toIndentedString(examArchivePath)).append("\n");
    sb.append("    examUsers: ").append(toIndentedString(examUsers)).append("\n");
    sb.append("    numberOfExamUsers: ").append(toIndentedString(numberOfExamUsers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("testExam");
    openapiFields.add("monitoring");
    openapiFields.add("visibleDate");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("publishResultsDate");
    openapiFields.add("examStudentReviewStart");
    openapiFields.add("examStudentReviewEnd");
    openapiFields.add("gracePeriod");
    openapiFields.add("workingTime");
    openapiFields.add("startText");
    openapiFields.add("endText");
    openapiFields.add("confirmationStartText");
    openapiFields.add("confirmationEndText");
    openapiFields.add("examMaxPoints");
    openapiFields.add("randomizeExerciseOrder");
    openapiFields.add("numberOfExercisesInExam");
    openapiFields.add("numberOfCorrectionRoundsInExam");
    openapiFields.add("examiner");
    openapiFields.add("moduleNumber");
    openapiFields.add("courseName");
    openapiFields.add("exampleSolutionPublicationDate");
    openapiFields.add("course");
    openapiFields.add("exerciseGroups");
    openapiFields.add("studentExams");
    openapiFields.add("examArchivePath");
    openapiFields.add("examUsers");
    openapiFields.add("numberOfExamUsers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("visibleDate");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("endDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Exam
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Exam.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Exam is not found in the empty JSON string", Exam.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Exam.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Exam` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Exam.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("startText") != null && !jsonObj.get("startText").isJsonNull()) && !jsonObj.get("startText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startText").toString()));
      }
      if ((jsonObj.get("endText") != null && !jsonObj.get("endText").isJsonNull()) && !jsonObj.get("endText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endText").toString()));
      }
      if ((jsonObj.get("confirmationStartText") != null && !jsonObj.get("confirmationStartText").isJsonNull()) && !jsonObj.get("confirmationStartText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmationStartText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmationStartText").toString()));
      }
      if ((jsonObj.get("confirmationEndText") != null && !jsonObj.get("confirmationEndText").isJsonNull()) && !jsonObj.get("confirmationEndText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmationEndText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmationEndText").toString()));
      }
      if ((jsonObj.get("examiner") != null && !jsonObj.get("examiner").isJsonNull()) && !jsonObj.get("examiner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `examiner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("examiner").toString()));
      }
      if ((jsonObj.get("moduleNumber") != null && !jsonObj.get("moduleNumber").isJsonNull()) && !jsonObj.get("moduleNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moduleNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moduleNumber").toString()));
      }
      if ((jsonObj.get("courseName") != null && !jsonObj.get("courseName").isJsonNull()) && !jsonObj.get("courseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseName").toString()));
      }
      // validate the optional field `course`
      if (jsonObj.get("course") != null && !jsonObj.get("course").isJsonNull()) {
        Course.validateJsonObject(jsonObj.getAsJsonObject("course"));
      }
      if (jsonObj.get("exerciseGroups") != null && !jsonObj.get("exerciseGroups").isJsonNull()) {
        JsonArray jsonArrayexerciseGroups = jsonObj.getAsJsonArray("exerciseGroups");
        if (jsonArrayexerciseGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exerciseGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exerciseGroups` to be an array in the JSON string but got `%s`", jsonObj.get("exerciseGroups").toString()));
          }

          // validate the optional field `exerciseGroups` (array)
          for (int i = 0; i < jsonArrayexerciseGroups.size(); i++) {
            ExerciseGroup.validateJsonObject(jsonArrayexerciseGroups.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("studentExams") != null && !jsonObj.get("studentExams").isJsonNull()) {
        JsonArray jsonArraystudentExams = jsonObj.getAsJsonArray("studentExams");
        if (jsonArraystudentExams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("studentExams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `studentExams` to be an array in the JSON string but got `%s`", jsonObj.get("studentExams").toString()));
          }

          // validate the optional field `studentExams` (array)
          for (int i = 0; i < jsonArraystudentExams.size(); i++) {
            StudentExam.validateJsonObject(jsonArraystudentExams.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("examArchivePath") != null && !jsonObj.get("examArchivePath").isJsonNull()) && !jsonObj.get("examArchivePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `examArchivePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("examArchivePath").toString()));
      }
      if (jsonObj.get("examUsers") != null && !jsonObj.get("examUsers").isJsonNull()) {
        JsonArray jsonArrayexamUsers = jsonObj.getAsJsonArray("examUsers");
        if (jsonArrayexamUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("examUsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `examUsers` to be an array in the JSON string but got `%s`", jsonObj.get("examUsers").toString()));
          }

          // validate the optional field `examUsers` (array)
          for (int i = 0; i < jsonArrayexamUsers.size(); i++) {
            ExamUser.validateJsonObject(jsonArrayexamUsers.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Exam.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Exam' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Exam> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Exam.class));

       return (TypeAdapter<T>) new TypeAdapter<Exam>() {
           @Override
           public void write(JsonWriter out, Exam value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Exam read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Exam given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Exam
  * @throws IOException if the JSON string is invalid with respect to Exam
  */
  public static Exam fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Exam.class);
  }

 /**
  * Convert an instance of Exam to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

