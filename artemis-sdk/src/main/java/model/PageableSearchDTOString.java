/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PageableSearchDTOString
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class PageableSearchDTOString {
  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_SEARCH_TERM = "searchTerm";
  @SerializedName(SERIALIZED_NAME_SEARCH_TERM)
  private String searchTerm;

  /**
   * Gets or Sets sortingOrder
   */
  @JsonAdapter(SortingOrderEnum.Adapter.class)
  public enum SortingOrderEnum {
    ASCENDING("ASCENDING"),
    
    DESCENDING("DESCENDING");

    private String value;

    SortingOrderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortingOrderEnum fromValue(String value) {
      for (SortingOrderEnum b : SortingOrderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortingOrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortingOrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortingOrderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortingOrderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SORTING_ORDER = "sortingOrder";
  @SerializedName(SERIALIZED_NAME_SORTING_ORDER)
  private SortingOrderEnum sortingOrder;

  public static final String SERIALIZED_NAME_SORTED_COLUMN = "sortedColumn";
  @SerializedName(SERIALIZED_NAME_SORTED_COLUMN)
  private String sortedColumn;

  public PageableSearchDTOString() {
  }

  public PageableSearchDTOString page(Integer page) {
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable

  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    this.page = page;
  }


  public PageableSearchDTOString pageSize(Integer pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @javax.annotation.Nullable

  public Integer getPageSize() {
    return pageSize;
  }


  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public PageableSearchDTOString searchTerm(String searchTerm) {
    
    this.searchTerm = searchTerm;
    return this;
  }

   /**
   * Get searchTerm
   * @return searchTerm
  **/
  @javax.annotation.Nullable

  public String getSearchTerm() {
    return searchTerm;
  }


  public void setSearchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
  }


  public PageableSearchDTOString sortingOrder(SortingOrderEnum sortingOrder) {
    
    this.sortingOrder = sortingOrder;
    return this;
  }

   /**
   * Get sortingOrder
   * @return sortingOrder
  **/
  @javax.annotation.Nullable

  public SortingOrderEnum getSortingOrder() {
    return sortingOrder;
  }


  public void setSortingOrder(SortingOrderEnum sortingOrder) {
    this.sortingOrder = sortingOrder;
  }


  public PageableSearchDTOString sortedColumn(String sortedColumn) {
    
    this.sortedColumn = sortedColumn;
    return this;
  }

   /**
   * Get sortedColumn
   * @return sortedColumn
  **/
  @javax.annotation.Nullable

  public String getSortedColumn() {
    return sortedColumn;
  }


  public void setSortedColumn(String sortedColumn) {
    this.sortedColumn = sortedColumn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageableSearchDTOString pageableSearchDTOString = (PageableSearchDTOString) o;
    return Objects.equals(this.page, pageableSearchDTOString.page) &&
        Objects.equals(this.pageSize, pageableSearchDTOString.pageSize) &&
        Objects.equals(this.searchTerm, pageableSearchDTOString.searchTerm) &&
        Objects.equals(this.sortingOrder, pageableSearchDTOString.sortingOrder) &&
        Objects.equals(this.sortedColumn, pageableSearchDTOString.sortedColumn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(page, pageSize, searchTerm, sortingOrder, sortedColumn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageableSearchDTOString {\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    searchTerm: ").append(toIndentedString(searchTerm)).append("\n");
    sb.append("    sortingOrder: ").append(toIndentedString(sortingOrder)).append("\n");
    sb.append("    sortedColumn: ").append(toIndentedString(sortedColumn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("page");
    openapiFields.add("pageSize");
    openapiFields.add("searchTerm");
    openapiFields.add("sortingOrder");
    openapiFields.add("sortedColumn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PageableSearchDTOString
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PageableSearchDTOString.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageableSearchDTOString is not found in the empty JSON string", PageableSearchDTOString.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PageableSearchDTOString.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PageableSearchDTOString` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("searchTerm") != null && !jsonObj.get("searchTerm").isJsonNull()) && !jsonObj.get("searchTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchTerm").toString()));
      }
      if ((jsonObj.get("sortingOrder") != null && !jsonObj.get("sortingOrder").isJsonNull()) && !jsonObj.get("sortingOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortingOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortingOrder").toString()));
      }
      if ((jsonObj.get("sortedColumn") != null && !jsonObj.get("sortedColumn").isJsonNull()) && !jsonObj.get("sortedColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortedColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortedColumn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageableSearchDTOString.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageableSearchDTOString' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageableSearchDTOString> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageableSearchDTOString.class));

       return (TypeAdapter<T>) new TypeAdapter<PageableSearchDTOString>() {
           @Override
           public void write(JsonWriter out, PageableSearchDTOString value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PageableSearchDTOString read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PageableSearchDTOString given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PageableSearchDTOString
  * @throws IOException if the JSON string is invalid with respect to PageableSearchDTOString
  */
  public static PageableSearchDTOString fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageableSearchDTOString.class);
  }

 /**
  * Convert an instance of PageableSearchDTOString to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

