/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostContextFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class PostContextFilter {
  public static final String SERIALIZED_NAME_COURSE_ID = "courseId";
  @SerializedName(SERIALIZED_NAME_COURSE_ID)
  private Long courseId;

  /**
   * Gets or Sets courseWideContext
   */
  @JsonAdapter(CourseWideContextEnum.Adapter.class)
  public enum CourseWideContextEnum {
    TECH_SUPPORT("TECH_SUPPORT"),
    
    ORGANIZATION("ORGANIZATION"),
    
    RANDOM("RANDOM"),
    
    ANNOUNCEMENT("ANNOUNCEMENT");

    private String value;

    CourseWideContextEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CourseWideContextEnum fromValue(String value) {
      for (CourseWideContextEnum b : CourseWideContextEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CourseWideContextEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CourseWideContextEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CourseWideContextEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CourseWideContextEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COURSE_WIDE_CONTEXT = "courseWideContext";
  @SerializedName(SERIALIZED_NAME_COURSE_WIDE_CONTEXT)
  private CourseWideContextEnum courseWideContext;

  public static final String SERIALIZED_NAME_EXERCISE_ID = "exerciseId";
  @SerializedName(SERIALIZED_NAME_EXERCISE_ID)
  private Long exerciseId;

  public static final String SERIALIZED_NAME_LECTURE_ID = "lectureId";
  @SerializedName(SERIALIZED_NAME_LECTURE_ID)
  private Long lectureId;

  public static final String SERIALIZED_NAME_PLAGIARISM_CASE_ID = "plagiarismCaseId";
  @SerializedName(SERIALIZED_NAME_PLAGIARISM_CASE_ID)
  private Long plagiarismCaseId;

  public static final String SERIALIZED_NAME_CONVERSATION_ID = "conversationId";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ID)
  private Long conversationId;

  public static final String SERIALIZED_NAME_SEARCH_TEXT = "searchText";
  @SerializedName(SERIALIZED_NAME_SEARCH_TEXT)
  private String searchText;

  public static final String SERIALIZED_NAME_FILTER_TO_UNRESOLVED = "filterToUnresolved";
  @SerializedName(SERIALIZED_NAME_FILTER_TO_UNRESOLVED)
  private Boolean filterToUnresolved;

  public static final String SERIALIZED_NAME_FILTER_TO_OWN = "filterToOwn";
  @SerializedName(SERIALIZED_NAME_FILTER_TO_OWN)
  private Boolean filterToOwn;

  public static final String SERIALIZED_NAME_FILTER_TO_ANSWERED_OR_REACTED = "filterToAnsweredOrReacted";
  @SerializedName(SERIALIZED_NAME_FILTER_TO_ANSWERED_OR_REACTED)
  private Boolean filterToAnsweredOrReacted;

  /**
   * Gets or Sets postSortCriterion
   */
  @JsonAdapter(PostSortCriterionEnum.Adapter.class)
  public enum PostSortCriterionEnum {
    CREATION_DATE("CREATION_DATE"),
    
    VOTES("VOTES"),
    
    ANSWER_COUNT("ANSWER_COUNT");

    private String value;

    PostSortCriterionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PostSortCriterionEnum fromValue(String value) {
      for (PostSortCriterionEnum b : PostSortCriterionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PostSortCriterionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PostSortCriterionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PostSortCriterionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PostSortCriterionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_POST_SORT_CRITERION = "postSortCriterion";
  @SerializedName(SERIALIZED_NAME_POST_SORT_CRITERION)
  private PostSortCriterionEnum postSortCriterion;

  /**
   * Gets or Sets sortingOrder
   */
  @JsonAdapter(SortingOrderEnum.Adapter.class)
  public enum SortingOrderEnum {
    ASCENDING("ASCENDING"),
    
    DESCENDING("DESCENDING");

    private String value;

    SortingOrderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortingOrderEnum fromValue(String value) {
      for (SortingOrderEnum b : SortingOrderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortingOrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortingOrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortingOrderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortingOrderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SORTING_ORDER = "sortingOrder";
  @SerializedName(SERIALIZED_NAME_SORTING_ORDER)
  private SortingOrderEnum sortingOrder;

  public PostContextFilter() {
  }

  public PostContextFilter courseId(Long courseId) {
    
    this.courseId = courseId;
    return this;
  }

   /**
   * Get courseId
   * @return courseId
  **/
  @javax.annotation.Nonnull

  public Long getCourseId() {
    return courseId;
  }


  public void setCourseId(Long courseId) {
    this.courseId = courseId;
  }


  public PostContextFilter courseWideContext(CourseWideContextEnum courseWideContext) {
    
    this.courseWideContext = courseWideContext;
    return this;
  }

   /**
   * Get courseWideContext
   * @return courseWideContext
  **/
  @javax.annotation.Nullable

  public CourseWideContextEnum getCourseWideContext() {
    return courseWideContext;
  }


  public void setCourseWideContext(CourseWideContextEnum courseWideContext) {
    this.courseWideContext = courseWideContext;
  }


  public PostContextFilter exerciseId(Long exerciseId) {
    
    this.exerciseId = exerciseId;
    return this;
  }

   /**
   * Get exerciseId
   * @return exerciseId
  **/
  @javax.annotation.Nullable

  public Long getExerciseId() {
    return exerciseId;
  }


  public void setExerciseId(Long exerciseId) {
    this.exerciseId = exerciseId;
  }


  public PostContextFilter lectureId(Long lectureId) {
    
    this.lectureId = lectureId;
    return this;
  }

   /**
   * Get lectureId
   * @return lectureId
  **/
  @javax.annotation.Nullable

  public Long getLectureId() {
    return lectureId;
  }


  public void setLectureId(Long lectureId) {
    this.lectureId = lectureId;
  }


  public PostContextFilter plagiarismCaseId(Long plagiarismCaseId) {
    
    this.plagiarismCaseId = plagiarismCaseId;
    return this;
  }

   /**
   * Get plagiarismCaseId
   * @return plagiarismCaseId
  **/
  @javax.annotation.Nullable

  public Long getPlagiarismCaseId() {
    return plagiarismCaseId;
  }


  public void setPlagiarismCaseId(Long plagiarismCaseId) {
    this.plagiarismCaseId = plagiarismCaseId;
  }


  public PostContextFilter conversationId(Long conversationId) {
    
    this.conversationId = conversationId;
    return this;
  }

   /**
   * Get conversationId
   * @return conversationId
  **/
  @javax.annotation.Nullable

  public Long getConversationId() {
    return conversationId;
  }


  public void setConversationId(Long conversationId) {
    this.conversationId = conversationId;
  }


  public PostContextFilter searchText(String searchText) {
    
    this.searchText = searchText;
    return this;
  }

   /**
   * Get searchText
   * @return searchText
  **/
  @javax.annotation.Nullable

  public String getSearchText() {
    return searchText;
  }


  public void setSearchText(String searchText) {
    this.searchText = searchText;
  }


  public PostContextFilter filterToUnresolved(Boolean filterToUnresolved) {
    
    this.filterToUnresolved = filterToUnresolved;
    return this;
  }

   /**
   * Get filterToUnresolved
   * @return filterToUnresolved
  **/
  @javax.annotation.Nullable

  public Boolean getFilterToUnresolved() {
    return filterToUnresolved;
  }


  public void setFilterToUnresolved(Boolean filterToUnresolved) {
    this.filterToUnresolved = filterToUnresolved;
  }


  public PostContextFilter filterToOwn(Boolean filterToOwn) {
    
    this.filterToOwn = filterToOwn;
    return this;
  }

   /**
   * Get filterToOwn
   * @return filterToOwn
  **/
  @javax.annotation.Nullable

  public Boolean getFilterToOwn() {
    return filterToOwn;
  }


  public void setFilterToOwn(Boolean filterToOwn) {
    this.filterToOwn = filterToOwn;
  }


  public PostContextFilter filterToAnsweredOrReacted(Boolean filterToAnsweredOrReacted) {
    
    this.filterToAnsweredOrReacted = filterToAnsweredOrReacted;
    return this;
  }

   /**
   * Get filterToAnsweredOrReacted
   * @return filterToAnsweredOrReacted
  **/
  @javax.annotation.Nullable

  public Boolean getFilterToAnsweredOrReacted() {
    return filterToAnsweredOrReacted;
  }


  public void setFilterToAnsweredOrReacted(Boolean filterToAnsweredOrReacted) {
    this.filterToAnsweredOrReacted = filterToAnsweredOrReacted;
  }


  public PostContextFilter postSortCriterion(PostSortCriterionEnum postSortCriterion) {
    
    this.postSortCriterion = postSortCriterion;
    return this;
  }

   /**
   * Get postSortCriterion
   * @return postSortCriterion
  **/
  @javax.annotation.Nullable

  public PostSortCriterionEnum getPostSortCriterion() {
    return postSortCriterion;
  }


  public void setPostSortCriterion(PostSortCriterionEnum postSortCriterion) {
    this.postSortCriterion = postSortCriterion;
  }


  public PostContextFilter sortingOrder(SortingOrderEnum sortingOrder) {
    
    this.sortingOrder = sortingOrder;
    return this;
  }

   /**
   * Get sortingOrder
   * @return sortingOrder
  **/
  @javax.annotation.Nullable

  public SortingOrderEnum getSortingOrder() {
    return sortingOrder;
  }


  public void setSortingOrder(SortingOrderEnum sortingOrder) {
    this.sortingOrder = sortingOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostContextFilter postContextFilter = (PostContextFilter) o;
    return Objects.equals(this.courseId, postContextFilter.courseId) &&
        Objects.equals(this.courseWideContext, postContextFilter.courseWideContext) &&
        Objects.equals(this.exerciseId, postContextFilter.exerciseId) &&
        Objects.equals(this.lectureId, postContextFilter.lectureId) &&
        Objects.equals(this.plagiarismCaseId, postContextFilter.plagiarismCaseId) &&
        Objects.equals(this.conversationId, postContextFilter.conversationId) &&
        Objects.equals(this.searchText, postContextFilter.searchText) &&
        Objects.equals(this.filterToUnresolved, postContextFilter.filterToUnresolved) &&
        Objects.equals(this.filterToOwn, postContextFilter.filterToOwn) &&
        Objects.equals(this.filterToAnsweredOrReacted, postContextFilter.filterToAnsweredOrReacted) &&
        Objects.equals(this.postSortCriterion, postContextFilter.postSortCriterion) &&
        Objects.equals(this.sortingOrder, postContextFilter.sortingOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courseId, courseWideContext, exerciseId, lectureId, plagiarismCaseId, conversationId, searchText, filterToUnresolved, filterToOwn, filterToAnsweredOrReacted, postSortCriterion, sortingOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostContextFilter {\n");
    sb.append("    courseId: ").append(toIndentedString(courseId)).append("\n");
    sb.append("    courseWideContext: ").append(toIndentedString(courseWideContext)).append("\n");
    sb.append("    exerciseId: ").append(toIndentedString(exerciseId)).append("\n");
    sb.append("    lectureId: ").append(toIndentedString(lectureId)).append("\n");
    sb.append("    plagiarismCaseId: ").append(toIndentedString(plagiarismCaseId)).append("\n");
    sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
    sb.append("    searchText: ").append(toIndentedString(searchText)).append("\n");
    sb.append("    filterToUnresolved: ").append(toIndentedString(filterToUnresolved)).append("\n");
    sb.append("    filterToOwn: ").append(toIndentedString(filterToOwn)).append("\n");
    sb.append("    filterToAnsweredOrReacted: ").append(toIndentedString(filterToAnsweredOrReacted)).append("\n");
    sb.append("    postSortCriterion: ").append(toIndentedString(postSortCriterion)).append("\n");
    sb.append("    sortingOrder: ").append(toIndentedString(sortingOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("courseId");
    openapiFields.add("courseWideContext");
    openapiFields.add("exerciseId");
    openapiFields.add("lectureId");
    openapiFields.add("plagiarismCaseId");
    openapiFields.add("conversationId");
    openapiFields.add("searchText");
    openapiFields.add("filterToUnresolved");
    openapiFields.add("filterToOwn");
    openapiFields.add("filterToAnsweredOrReacted");
    openapiFields.add("postSortCriterion");
    openapiFields.add("sortingOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("courseId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PostContextFilter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PostContextFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostContextFilter is not found in the empty JSON string", PostContextFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PostContextFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostContextFilter` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostContextFilter.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("courseWideContext") != null && !jsonObj.get("courseWideContext").isJsonNull()) && !jsonObj.get("courseWideContext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseWideContext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseWideContext").toString()));
      }
      if ((jsonObj.get("searchText") != null && !jsonObj.get("searchText").isJsonNull()) && !jsonObj.get("searchText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchText").toString()));
      }
      if ((jsonObj.get("postSortCriterion") != null && !jsonObj.get("postSortCriterion").isJsonNull()) && !jsonObj.get("postSortCriterion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postSortCriterion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postSortCriterion").toString()));
      }
      if ((jsonObj.get("sortingOrder") != null && !jsonObj.get("sortingOrder").isJsonNull()) && !jsonObj.get("sortingOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortingOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortingOrder").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostContextFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostContextFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostContextFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostContextFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<PostContextFilter>() {
           @Override
           public void write(JsonWriter out, PostContextFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostContextFilter read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PostContextFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PostContextFilter
  * @throws IOException if the JSON string is invalid with respect to PostContextFilter
  */
  public static PostContextFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostContextFilter.class);
  }

 /**
  * Convert an instance of PostContextFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

