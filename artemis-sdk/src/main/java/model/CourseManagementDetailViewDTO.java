/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CourseManagementDetailViewDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class CourseManagementDetailViewDTO {
  public static final String SERIALIZED_NAME_NUMBER_OF_STUDENTS_IN_COURSE = "numberOfStudentsInCourse";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_STUDENTS_IN_COURSE)
  private Integer numberOfStudentsInCourse;

  public static final String SERIALIZED_NAME_NUMBER_OF_TEACHING_ASSISTANTS_IN_COURSE = "numberOfTeachingAssistantsInCourse";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_TEACHING_ASSISTANTS_IN_COURSE)
  private Integer numberOfTeachingAssistantsInCourse;

  public static final String SERIALIZED_NAME_NUMBER_OF_EDITORS_IN_COURSE = "numberOfEditorsInCourse";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_EDITORS_IN_COURSE)
  private Integer numberOfEditorsInCourse;

  public static final String SERIALIZED_NAME_NUMBER_OF_INSTRUCTORS_IN_COURSE = "numberOfInstructorsInCourse";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_INSTRUCTORS_IN_COURSE)
  private Integer numberOfInstructorsInCourse;

  public static final String SERIALIZED_NAME_CURRENT_PERCENTAGE_ASSESSMENTS = "currentPercentageAssessments";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERCENTAGE_ASSESSMENTS)
  private Double currentPercentageAssessments;

  public static final String SERIALIZED_NAME_CURRENT_ABSOLUTE_ASSESSMENTS = "currentAbsoluteAssessments";
  @SerializedName(SERIALIZED_NAME_CURRENT_ABSOLUTE_ASSESSMENTS)
  private Long currentAbsoluteAssessments;

  public static final String SERIALIZED_NAME_CURRENT_MAX_ASSESSMENTS = "currentMaxAssessments";
  @SerializedName(SERIALIZED_NAME_CURRENT_MAX_ASSESSMENTS)
  private Long currentMaxAssessments;

  public static final String SERIALIZED_NAME_CURRENT_PERCENTAGE_COMPLAINTS = "currentPercentageComplaints";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERCENTAGE_COMPLAINTS)
  private Double currentPercentageComplaints;

  public static final String SERIALIZED_NAME_CURRENT_ABSOLUTE_COMPLAINTS = "currentAbsoluteComplaints";
  @SerializedName(SERIALIZED_NAME_CURRENT_ABSOLUTE_COMPLAINTS)
  private Long currentAbsoluteComplaints;

  public static final String SERIALIZED_NAME_CURRENT_MAX_COMPLAINTS = "currentMaxComplaints";
  @SerializedName(SERIALIZED_NAME_CURRENT_MAX_COMPLAINTS)
  private Long currentMaxComplaints;

  public static final String SERIALIZED_NAME_CURRENT_PERCENTAGE_MORE_FEEDBACKS = "currentPercentageMoreFeedbacks";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERCENTAGE_MORE_FEEDBACKS)
  private Double currentPercentageMoreFeedbacks;

  public static final String SERIALIZED_NAME_CURRENT_ABSOLUTE_MORE_FEEDBACKS = "currentAbsoluteMoreFeedbacks";
  @SerializedName(SERIALIZED_NAME_CURRENT_ABSOLUTE_MORE_FEEDBACKS)
  private Long currentAbsoluteMoreFeedbacks;

  public static final String SERIALIZED_NAME_CURRENT_MAX_MORE_FEEDBACKS = "currentMaxMoreFeedbacks";
  @SerializedName(SERIALIZED_NAME_CURRENT_MAX_MORE_FEEDBACKS)
  private Long currentMaxMoreFeedbacks;

  public static final String SERIALIZED_NAME_CURRENT_PERCENTAGE_AVERAGE_SCORE = "currentPercentageAverageScore";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERCENTAGE_AVERAGE_SCORE)
  private Double currentPercentageAverageScore;

  public static final String SERIALIZED_NAME_CURRENT_ABSOLUTE_AVERAGE_SCORE = "currentAbsoluteAverageScore";
  @SerializedName(SERIALIZED_NAME_CURRENT_ABSOLUTE_AVERAGE_SCORE)
  private Double currentAbsoluteAverageScore;

  public static final String SERIALIZED_NAME_CURRENT_MAX_AVERAGE_SCORE = "currentMaxAverageScore";
  @SerializedName(SERIALIZED_NAME_CURRENT_MAX_AVERAGE_SCORE)
  private Double currentMaxAverageScore;

  public static final String SERIALIZED_NAME_ACTIVE_STUDENTS = "activeStudents";
  @SerializedName(SERIALIZED_NAME_ACTIVE_STUDENTS)
  private List<Integer> activeStudents = new ArrayList<>();

  public CourseManagementDetailViewDTO() {
  }

  public CourseManagementDetailViewDTO numberOfStudentsInCourse(Integer numberOfStudentsInCourse) {
    
    this.numberOfStudentsInCourse = numberOfStudentsInCourse;
    return this;
  }

   /**
   * Get numberOfStudentsInCourse
   * @return numberOfStudentsInCourse
  **/
  @javax.annotation.Nullable

  public Integer getNumberOfStudentsInCourse() {
    return numberOfStudentsInCourse;
  }


  public void setNumberOfStudentsInCourse(Integer numberOfStudentsInCourse) {
    this.numberOfStudentsInCourse = numberOfStudentsInCourse;
  }


  public CourseManagementDetailViewDTO numberOfTeachingAssistantsInCourse(Integer numberOfTeachingAssistantsInCourse) {
    
    this.numberOfTeachingAssistantsInCourse = numberOfTeachingAssistantsInCourse;
    return this;
  }

   /**
   * Get numberOfTeachingAssistantsInCourse
   * @return numberOfTeachingAssistantsInCourse
  **/
  @javax.annotation.Nullable

  public Integer getNumberOfTeachingAssistantsInCourse() {
    return numberOfTeachingAssistantsInCourse;
  }


  public void setNumberOfTeachingAssistantsInCourse(Integer numberOfTeachingAssistantsInCourse) {
    this.numberOfTeachingAssistantsInCourse = numberOfTeachingAssistantsInCourse;
  }


  public CourseManagementDetailViewDTO numberOfEditorsInCourse(Integer numberOfEditorsInCourse) {
    
    this.numberOfEditorsInCourse = numberOfEditorsInCourse;
    return this;
  }

   /**
   * Get numberOfEditorsInCourse
   * @return numberOfEditorsInCourse
  **/
  @javax.annotation.Nullable

  public Integer getNumberOfEditorsInCourse() {
    return numberOfEditorsInCourse;
  }


  public void setNumberOfEditorsInCourse(Integer numberOfEditorsInCourse) {
    this.numberOfEditorsInCourse = numberOfEditorsInCourse;
  }


  public CourseManagementDetailViewDTO numberOfInstructorsInCourse(Integer numberOfInstructorsInCourse) {
    
    this.numberOfInstructorsInCourse = numberOfInstructorsInCourse;
    return this;
  }

   /**
   * Get numberOfInstructorsInCourse
   * @return numberOfInstructorsInCourse
  **/
  @javax.annotation.Nullable

  public Integer getNumberOfInstructorsInCourse() {
    return numberOfInstructorsInCourse;
  }


  public void setNumberOfInstructorsInCourse(Integer numberOfInstructorsInCourse) {
    this.numberOfInstructorsInCourse = numberOfInstructorsInCourse;
  }


  public CourseManagementDetailViewDTO currentPercentageAssessments(Double currentPercentageAssessments) {
    
    this.currentPercentageAssessments = currentPercentageAssessments;
    return this;
  }

   /**
   * Get currentPercentageAssessments
   * @return currentPercentageAssessments
  **/
  @javax.annotation.Nullable

  public Double getCurrentPercentageAssessments() {
    return currentPercentageAssessments;
  }


  public void setCurrentPercentageAssessments(Double currentPercentageAssessments) {
    this.currentPercentageAssessments = currentPercentageAssessments;
  }


  public CourseManagementDetailViewDTO currentAbsoluteAssessments(Long currentAbsoluteAssessments) {
    
    this.currentAbsoluteAssessments = currentAbsoluteAssessments;
    return this;
  }

   /**
   * Get currentAbsoluteAssessments
   * @return currentAbsoluteAssessments
  **/
  @javax.annotation.Nullable

  public Long getCurrentAbsoluteAssessments() {
    return currentAbsoluteAssessments;
  }


  public void setCurrentAbsoluteAssessments(Long currentAbsoluteAssessments) {
    this.currentAbsoluteAssessments = currentAbsoluteAssessments;
  }


  public CourseManagementDetailViewDTO currentMaxAssessments(Long currentMaxAssessments) {
    
    this.currentMaxAssessments = currentMaxAssessments;
    return this;
  }

   /**
   * Get currentMaxAssessments
   * @return currentMaxAssessments
  **/
  @javax.annotation.Nullable

  public Long getCurrentMaxAssessments() {
    return currentMaxAssessments;
  }


  public void setCurrentMaxAssessments(Long currentMaxAssessments) {
    this.currentMaxAssessments = currentMaxAssessments;
  }


  public CourseManagementDetailViewDTO currentPercentageComplaints(Double currentPercentageComplaints) {
    
    this.currentPercentageComplaints = currentPercentageComplaints;
    return this;
  }

   /**
   * Get currentPercentageComplaints
   * @return currentPercentageComplaints
  **/
  @javax.annotation.Nullable

  public Double getCurrentPercentageComplaints() {
    return currentPercentageComplaints;
  }


  public void setCurrentPercentageComplaints(Double currentPercentageComplaints) {
    this.currentPercentageComplaints = currentPercentageComplaints;
  }


  public CourseManagementDetailViewDTO currentAbsoluteComplaints(Long currentAbsoluteComplaints) {
    
    this.currentAbsoluteComplaints = currentAbsoluteComplaints;
    return this;
  }

   /**
   * Get currentAbsoluteComplaints
   * @return currentAbsoluteComplaints
  **/
  @javax.annotation.Nullable

  public Long getCurrentAbsoluteComplaints() {
    return currentAbsoluteComplaints;
  }


  public void setCurrentAbsoluteComplaints(Long currentAbsoluteComplaints) {
    this.currentAbsoluteComplaints = currentAbsoluteComplaints;
  }


  public CourseManagementDetailViewDTO currentMaxComplaints(Long currentMaxComplaints) {
    
    this.currentMaxComplaints = currentMaxComplaints;
    return this;
  }

   /**
   * Get currentMaxComplaints
   * @return currentMaxComplaints
  **/
  @javax.annotation.Nullable

  public Long getCurrentMaxComplaints() {
    return currentMaxComplaints;
  }


  public void setCurrentMaxComplaints(Long currentMaxComplaints) {
    this.currentMaxComplaints = currentMaxComplaints;
  }


  public CourseManagementDetailViewDTO currentPercentageMoreFeedbacks(Double currentPercentageMoreFeedbacks) {
    
    this.currentPercentageMoreFeedbacks = currentPercentageMoreFeedbacks;
    return this;
  }

   /**
   * Get currentPercentageMoreFeedbacks
   * @return currentPercentageMoreFeedbacks
  **/
  @javax.annotation.Nullable

  public Double getCurrentPercentageMoreFeedbacks() {
    return currentPercentageMoreFeedbacks;
  }


  public void setCurrentPercentageMoreFeedbacks(Double currentPercentageMoreFeedbacks) {
    this.currentPercentageMoreFeedbacks = currentPercentageMoreFeedbacks;
  }


  public CourseManagementDetailViewDTO currentAbsoluteMoreFeedbacks(Long currentAbsoluteMoreFeedbacks) {
    
    this.currentAbsoluteMoreFeedbacks = currentAbsoluteMoreFeedbacks;
    return this;
  }

   /**
   * Get currentAbsoluteMoreFeedbacks
   * @return currentAbsoluteMoreFeedbacks
  **/
  @javax.annotation.Nullable

  public Long getCurrentAbsoluteMoreFeedbacks() {
    return currentAbsoluteMoreFeedbacks;
  }


  public void setCurrentAbsoluteMoreFeedbacks(Long currentAbsoluteMoreFeedbacks) {
    this.currentAbsoluteMoreFeedbacks = currentAbsoluteMoreFeedbacks;
  }


  public CourseManagementDetailViewDTO currentMaxMoreFeedbacks(Long currentMaxMoreFeedbacks) {
    
    this.currentMaxMoreFeedbacks = currentMaxMoreFeedbacks;
    return this;
  }

   /**
   * Get currentMaxMoreFeedbacks
   * @return currentMaxMoreFeedbacks
  **/
  @javax.annotation.Nullable

  public Long getCurrentMaxMoreFeedbacks() {
    return currentMaxMoreFeedbacks;
  }


  public void setCurrentMaxMoreFeedbacks(Long currentMaxMoreFeedbacks) {
    this.currentMaxMoreFeedbacks = currentMaxMoreFeedbacks;
  }


  public CourseManagementDetailViewDTO currentPercentageAverageScore(Double currentPercentageAverageScore) {
    
    this.currentPercentageAverageScore = currentPercentageAverageScore;
    return this;
  }

   /**
   * Get currentPercentageAverageScore
   * @return currentPercentageAverageScore
  **/
  @javax.annotation.Nullable

  public Double getCurrentPercentageAverageScore() {
    return currentPercentageAverageScore;
  }


  public void setCurrentPercentageAverageScore(Double currentPercentageAverageScore) {
    this.currentPercentageAverageScore = currentPercentageAverageScore;
  }


  public CourseManagementDetailViewDTO currentAbsoluteAverageScore(Double currentAbsoluteAverageScore) {
    
    this.currentAbsoluteAverageScore = currentAbsoluteAverageScore;
    return this;
  }

   /**
   * Get currentAbsoluteAverageScore
   * @return currentAbsoluteAverageScore
  **/
  @javax.annotation.Nullable

  public Double getCurrentAbsoluteAverageScore() {
    return currentAbsoluteAverageScore;
  }


  public void setCurrentAbsoluteAverageScore(Double currentAbsoluteAverageScore) {
    this.currentAbsoluteAverageScore = currentAbsoluteAverageScore;
  }


  public CourseManagementDetailViewDTO currentMaxAverageScore(Double currentMaxAverageScore) {
    
    this.currentMaxAverageScore = currentMaxAverageScore;
    return this;
  }

   /**
   * Get currentMaxAverageScore
   * @return currentMaxAverageScore
  **/
  @javax.annotation.Nullable

  public Double getCurrentMaxAverageScore() {
    return currentMaxAverageScore;
  }


  public void setCurrentMaxAverageScore(Double currentMaxAverageScore) {
    this.currentMaxAverageScore = currentMaxAverageScore;
  }


  public CourseManagementDetailViewDTO activeStudents(List<Integer> activeStudents) {
    
    this.activeStudents = activeStudents;
    return this;
  }

  public CourseManagementDetailViewDTO addActiveStudentsItem(Integer activeStudentsItem) {
    if (this.activeStudents == null) {
      this.activeStudents = new ArrayList<>();
    }
    this.activeStudents.add(activeStudentsItem);
    return this;
  }

   /**
   * Get activeStudents
   * @return activeStudents
  **/
  @javax.annotation.Nullable

  public List<Integer> getActiveStudents() {
    return activeStudents;
  }


  public void setActiveStudents(List<Integer> activeStudents) {
    this.activeStudents = activeStudents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CourseManagementDetailViewDTO courseManagementDetailViewDTO = (CourseManagementDetailViewDTO) o;
    return Objects.equals(this.numberOfStudentsInCourse, courseManagementDetailViewDTO.numberOfStudentsInCourse) &&
        Objects.equals(this.numberOfTeachingAssistantsInCourse, courseManagementDetailViewDTO.numberOfTeachingAssistantsInCourse) &&
        Objects.equals(this.numberOfEditorsInCourse, courseManagementDetailViewDTO.numberOfEditorsInCourse) &&
        Objects.equals(this.numberOfInstructorsInCourse, courseManagementDetailViewDTO.numberOfInstructorsInCourse) &&
        Objects.equals(this.currentPercentageAssessments, courseManagementDetailViewDTO.currentPercentageAssessments) &&
        Objects.equals(this.currentAbsoluteAssessments, courseManagementDetailViewDTO.currentAbsoluteAssessments) &&
        Objects.equals(this.currentMaxAssessments, courseManagementDetailViewDTO.currentMaxAssessments) &&
        Objects.equals(this.currentPercentageComplaints, courseManagementDetailViewDTO.currentPercentageComplaints) &&
        Objects.equals(this.currentAbsoluteComplaints, courseManagementDetailViewDTO.currentAbsoluteComplaints) &&
        Objects.equals(this.currentMaxComplaints, courseManagementDetailViewDTO.currentMaxComplaints) &&
        Objects.equals(this.currentPercentageMoreFeedbacks, courseManagementDetailViewDTO.currentPercentageMoreFeedbacks) &&
        Objects.equals(this.currentAbsoluteMoreFeedbacks, courseManagementDetailViewDTO.currentAbsoluteMoreFeedbacks) &&
        Objects.equals(this.currentMaxMoreFeedbacks, courseManagementDetailViewDTO.currentMaxMoreFeedbacks) &&
        Objects.equals(this.currentPercentageAverageScore, courseManagementDetailViewDTO.currentPercentageAverageScore) &&
        Objects.equals(this.currentAbsoluteAverageScore, courseManagementDetailViewDTO.currentAbsoluteAverageScore) &&
        Objects.equals(this.currentMaxAverageScore, courseManagementDetailViewDTO.currentMaxAverageScore) &&
        Objects.equals(this.activeStudents, courseManagementDetailViewDTO.activeStudents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numberOfStudentsInCourse, numberOfTeachingAssistantsInCourse, numberOfEditorsInCourse, numberOfInstructorsInCourse, currentPercentageAssessments, currentAbsoluteAssessments, currentMaxAssessments, currentPercentageComplaints, currentAbsoluteComplaints, currentMaxComplaints, currentPercentageMoreFeedbacks, currentAbsoluteMoreFeedbacks, currentMaxMoreFeedbacks, currentPercentageAverageScore, currentAbsoluteAverageScore, currentMaxAverageScore, activeStudents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CourseManagementDetailViewDTO {\n");
    sb.append("    numberOfStudentsInCourse: ").append(toIndentedString(numberOfStudentsInCourse)).append("\n");
    sb.append("    numberOfTeachingAssistantsInCourse: ").append(toIndentedString(numberOfTeachingAssistantsInCourse)).append("\n");
    sb.append("    numberOfEditorsInCourse: ").append(toIndentedString(numberOfEditorsInCourse)).append("\n");
    sb.append("    numberOfInstructorsInCourse: ").append(toIndentedString(numberOfInstructorsInCourse)).append("\n");
    sb.append("    currentPercentageAssessments: ").append(toIndentedString(currentPercentageAssessments)).append("\n");
    sb.append("    currentAbsoluteAssessments: ").append(toIndentedString(currentAbsoluteAssessments)).append("\n");
    sb.append("    currentMaxAssessments: ").append(toIndentedString(currentMaxAssessments)).append("\n");
    sb.append("    currentPercentageComplaints: ").append(toIndentedString(currentPercentageComplaints)).append("\n");
    sb.append("    currentAbsoluteComplaints: ").append(toIndentedString(currentAbsoluteComplaints)).append("\n");
    sb.append("    currentMaxComplaints: ").append(toIndentedString(currentMaxComplaints)).append("\n");
    sb.append("    currentPercentageMoreFeedbacks: ").append(toIndentedString(currentPercentageMoreFeedbacks)).append("\n");
    sb.append("    currentAbsoluteMoreFeedbacks: ").append(toIndentedString(currentAbsoluteMoreFeedbacks)).append("\n");
    sb.append("    currentMaxMoreFeedbacks: ").append(toIndentedString(currentMaxMoreFeedbacks)).append("\n");
    sb.append("    currentPercentageAverageScore: ").append(toIndentedString(currentPercentageAverageScore)).append("\n");
    sb.append("    currentAbsoluteAverageScore: ").append(toIndentedString(currentAbsoluteAverageScore)).append("\n");
    sb.append("    currentMaxAverageScore: ").append(toIndentedString(currentMaxAverageScore)).append("\n");
    sb.append("    activeStudents: ").append(toIndentedString(activeStudents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numberOfStudentsInCourse");
    openapiFields.add("numberOfTeachingAssistantsInCourse");
    openapiFields.add("numberOfEditorsInCourse");
    openapiFields.add("numberOfInstructorsInCourse");
    openapiFields.add("currentPercentageAssessments");
    openapiFields.add("currentAbsoluteAssessments");
    openapiFields.add("currentMaxAssessments");
    openapiFields.add("currentPercentageComplaints");
    openapiFields.add("currentAbsoluteComplaints");
    openapiFields.add("currentMaxComplaints");
    openapiFields.add("currentPercentageMoreFeedbacks");
    openapiFields.add("currentAbsoluteMoreFeedbacks");
    openapiFields.add("currentMaxMoreFeedbacks");
    openapiFields.add("currentPercentageAverageScore");
    openapiFields.add("currentAbsoluteAverageScore");
    openapiFields.add("currentMaxAverageScore");
    openapiFields.add("activeStudents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CourseManagementDetailViewDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CourseManagementDetailViewDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CourseManagementDetailViewDTO is not found in the empty JSON string", CourseManagementDetailViewDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CourseManagementDetailViewDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CourseManagementDetailViewDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("activeStudents") != null && !jsonObj.get("activeStudents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeStudents` to be an array in the JSON string but got `%s`", jsonObj.get("activeStudents").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CourseManagementDetailViewDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CourseManagementDetailViewDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CourseManagementDetailViewDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CourseManagementDetailViewDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CourseManagementDetailViewDTO>() {
           @Override
           public void write(JsonWriter out, CourseManagementDetailViewDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CourseManagementDetailViewDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CourseManagementDetailViewDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CourseManagementDetailViewDTO
  * @throws IOException if the JSON string is invalid with respect to CourseManagementDetailViewDTO
  */
  public static CourseManagementDetailViewDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CourseManagementDetailViewDTO.class);
  }

 /**
  * Convert an instance of CourseManagementDetailViewDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

