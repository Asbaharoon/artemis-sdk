/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DueDateStat;
import org.openapitools.client.model.TutorLeaderboardDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StatsForDashboardDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class StatsForDashboardDTO {
  public static final String SERIALIZED_NAME_NUMBER_OF_STUDENTS = "numberOfStudents";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_STUDENTS)
  private Long numberOfStudents;

  public static final String SERIALIZED_NAME_NUMBER_OF_SUBMISSIONS = "numberOfSubmissions";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_SUBMISSIONS)
  private DueDateStat numberOfSubmissions;

  public static final String SERIALIZED_NAME_TOTAL_NUMBER_OF_ASSESSMENTS = "totalNumberOfAssessments";
  @SerializedName(SERIALIZED_NAME_TOTAL_NUMBER_OF_ASSESSMENTS)
  private DueDateStat totalNumberOfAssessments;

  public static final String SERIALIZED_NAME_TOTAL_NUMBER_OF_ASSESSMENT_LOCKS = "totalNumberOfAssessmentLocks";
  @SerializedName(SERIALIZED_NAME_TOTAL_NUMBER_OF_ASSESSMENT_LOCKS)
  private Long totalNumberOfAssessmentLocks;

  public static final String SERIALIZED_NAME_COMPLAINTS_ENABLED = "complaintsEnabled";
  @SerializedName(SERIALIZED_NAME_COMPLAINTS_ENABLED)
  private Boolean complaintsEnabled;

  public static final String SERIALIZED_NAME_FEEDBACK_REQUEST_ENABLED = "feedbackRequestEnabled";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_REQUEST_ENABLED)
  private Boolean feedbackRequestEnabled;

  public static final String SERIALIZED_NAME_NUMBER_OF_ASSESSMENTS_OF_CORRECTION_ROUNDS = "numberOfAssessmentsOfCorrectionRounds";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ASSESSMENTS_OF_CORRECTION_ROUNDS)
  private List<DueDateStat> numberOfAssessmentsOfCorrectionRounds = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_LOCKED_ASSESSMENT_BY_OTHER_TUTORS_OF_CORRECTION_ROUND = "numberOfLockedAssessmentByOtherTutorsOfCorrectionRound";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_LOCKED_ASSESSMENT_BY_OTHER_TUTORS_OF_CORRECTION_ROUND)
  private List<DueDateStat> numberOfLockedAssessmentByOtherTutorsOfCorrectionRound = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_AUTOMATIC_ASSISTED_ASSESSMENTS = "numberOfAutomaticAssistedAssessments";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_AUTOMATIC_ASSISTED_ASSESSMENTS)
  private DueDateStat numberOfAutomaticAssistedAssessments;

  public static final String SERIALIZED_NAME_NUMBER_OF_COMPLAINTS = "numberOfComplaints";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_COMPLAINTS)
  private Long numberOfComplaints;

  public static final String SERIALIZED_NAME_NUMBER_OF_OPEN_COMPLAINTS = "numberOfOpenComplaints";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_OPEN_COMPLAINTS)
  private Long numberOfOpenComplaints;

  public static final String SERIALIZED_NAME_NUMBER_OF_MORE_FEEDBACK_REQUESTS = "numberOfMoreFeedbackRequests";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_MORE_FEEDBACK_REQUESTS)
  private Long numberOfMoreFeedbackRequests;

  public static final String SERIALIZED_NAME_NUMBER_OF_OPEN_MORE_FEEDBACK_REQUESTS = "numberOfOpenMoreFeedbackRequests";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_OPEN_MORE_FEEDBACK_REQUESTS)
  private Long numberOfOpenMoreFeedbackRequests;

  public static final String SERIALIZED_NAME_NUMBER_OF_ASSESSMENT_LOCKS = "numberOfAssessmentLocks";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ASSESSMENT_LOCKS)
  private Long numberOfAssessmentLocks;

  public static final String SERIALIZED_NAME_TUTOR_LEADERBOARD_ENTRIES = "tutorLeaderboardEntries";
  @SerializedName(SERIALIZED_NAME_TUTOR_LEADERBOARD_ENTRIES)
  private List<TutorLeaderboardDTO> tutorLeaderboardEntries = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_RATINGS = "numberOfRatings";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_RATINGS)
  private Long numberOfRatings;

  public StatsForDashboardDTO() {
  }

  public StatsForDashboardDTO numberOfStudents(Long numberOfStudents) {
    
    this.numberOfStudents = numberOfStudents;
    return this;
  }

   /**
   * Get numberOfStudents
   * @return numberOfStudents
  **/
  @javax.annotation.Nullable

  public Long getNumberOfStudents() {
    return numberOfStudents;
  }


  public void setNumberOfStudents(Long numberOfStudents) {
    this.numberOfStudents = numberOfStudents;
  }


  public StatsForDashboardDTO numberOfSubmissions(DueDateStat numberOfSubmissions) {
    
    this.numberOfSubmissions = numberOfSubmissions;
    return this;
  }

   /**
   * Get numberOfSubmissions
   * @return numberOfSubmissions
  **/
  @javax.annotation.Nullable

  public DueDateStat getNumberOfSubmissions() {
    return numberOfSubmissions;
  }


  public void setNumberOfSubmissions(DueDateStat numberOfSubmissions) {
    this.numberOfSubmissions = numberOfSubmissions;
  }


  public StatsForDashboardDTO totalNumberOfAssessments(DueDateStat totalNumberOfAssessments) {
    
    this.totalNumberOfAssessments = totalNumberOfAssessments;
    return this;
  }

   /**
   * Get totalNumberOfAssessments
   * @return totalNumberOfAssessments
  **/
  @javax.annotation.Nullable

  public DueDateStat getTotalNumberOfAssessments() {
    return totalNumberOfAssessments;
  }


  public void setTotalNumberOfAssessments(DueDateStat totalNumberOfAssessments) {
    this.totalNumberOfAssessments = totalNumberOfAssessments;
  }


  public StatsForDashboardDTO totalNumberOfAssessmentLocks(Long totalNumberOfAssessmentLocks) {
    
    this.totalNumberOfAssessmentLocks = totalNumberOfAssessmentLocks;
    return this;
  }

   /**
   * Get totalNumberOfAssessmentLocks
   * @return totalNumberOfAssessmentLocks
  **/
  @javax.annotation.Nullable

  public Long getTotalNumberOfAssessmentLocks() {
    return totalNumberOfAssessmentLocks;
  }


  public void setTotalNumberOfAssessmentLocks(Long totalNumberOfAssessmentLocks) {
    this.totalNumberOfAssessmentLocks = totalNumberOfAssessmentLocks;
  }


  public StatsForDashboardDTO complaintsEnabled(Boolean complaintsEnabled) {
    
    this.complaintsEnabled = complaintsEnabled;
    return this;
  }

   /**
   * Get complaintsEnabled
   * @return complaintsEnabled
  **/
  @javax.annotation.Nullable

  public Boolean getComplaintsEnabled() {
    return complaintsEnabled;
  }


  public void setComplaintsEnabled(Boolean complaintsEnabled) {
    this.complaintsEnabled = complaintsEnabled;
  }


  public StatsForDashboardDTO feedbackRequestEnabled(Boolean feedbackRequestEnabled) {
    
    this.feedbackRequestEnabled = feedbackRequestEnabled;
    return this;
  }

   /**
   * Get feedbackRequestEnabled
   * @return feedbackRequestEnabled
  **/
  @javax.annotation.Nullable

  public Boolean getFeedbackRequestEnabled() {
    return feedbackRequestEnabled;
  }


  public void setFeedbackRequestEnabled(Boolean feedbackRequestEnabled) {
    this.feedbackRequestEnabled = feedbackRequestEnabled;
  }


  public StatsForDashboardDTO numberOfAssessmentsOfCorrectionRounds(List<DueDateStat> numberOfAssessmentsOfCorrectionRounds) {
    
    this.numberOfAssessmentsOfCorrectionRounds = numberOfAssessmentsOfCorrectionRounds;
    return this;
  }

  public StatsForDashboardDTO addNumberOfAssessmentsOfCorrectionRoundsItem(DueDateStat numberOfAssessmentsOfCorrectionRoundsItem) {
    if (this.numberOfAssessmentsOfCorrectionRounds == null) {
      this.numberOfAssessmentsOfCorrectionRounds = new ArrayList<>();
    }
    this.numberOfAssessmentsOfCorrectionRounds.add(numberOfAssessmentsOfCorrectionRoundsItem);
    return this;
  }

   /**
   * Get numberOfAssessmentsOfCorrectionRounds
   * @return numberOfAssessmentsOfCorrectionRounds
  **/
  @javax.annotation.Nullable

  public List<DueDateStat> getNumberOfAssessmentsOfCorrectionRounds() {
    return numberOfAssessmentsOfCorrectionRounds;
  }


  public void setNumberOfAssessmentsOfCorrectionRounds(List<DueDateStat> numberOfAssessmentsOfCorrectionRounds) {
    this.numberOfAssessmentsOfCorrectionRounds = numberOfAssessmentsOfCorrectionRounds;
  }


  public StatsForDashboardDTO numberOfLockedAssessmentByOtherTutorsOfCorrectionRound(List<DueDateStat> numberOfLockedAssessmentByOtherTutorsOfCorrectionRound) {
    
    this.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound = numberOfLockedAssessmentByOtherTutorsOfCorrectionRound;
    return this;
  }

  public StatsForDashboardDTO addNumberOfLockedAssessmentByOtherTutorsOfCorrectionRoundItem(DueDateStat numberOfLockedAssessmentByOtherTutorsOfCorrectionRoundItem) {
    if (this.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound == null) {
      this.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound = new ArrayList<>();
    }
    this.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound.add(numberOfLockedAssessmentByOtherTutorsOfCorrectionRoundItem);
    return this;
  }

   /**
   * Get numberOfLockedAssessmentByOtherTutorsOfCorrectionRound
   * @return numberOfLockedAssessmentByOtherTutorsOfCorrectionRound
  **/
  @javax.annotation.Nullable

  public List<DueDateStat> getNumberOfLockedAssessmentByOtherTutorsOfCorrectionRound() {
    return numberOfLockedAssessmentByOtherTutorsOfCorrectionRound;
  }


  public void setNumberOfLockedAssessmentByOtherTutorsOfCorrectionRound(List<DueDateStat> numberOfLockedAssessmentByOtherTutorsOfCorrectionRound) {
    this.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound = numberOfLockedAssessmentByOtherTutorsOfCorrectionRound;
  }


  public StatsForDashboardDTO numberOfAutomaticAssistedAssessments(DueDateStat numberOfAutomaticAssistedAssessments) {
    
    this.numberOfAutomaticAssistedAssessments = numberOfAutomaticAssistedAssessments;
    return this;
  }

   /**
   * Get numberOfAutomaticAssistedAssessments
   * @return numberOfAutomaticAssistedAssessments
  **/
  @javax.annotation.Nullable

  public DueDateStat getNumberOfAutomaticAssistedAssessments() {
    return numberOfAutomaticAssistedAssessments;
  }


  public void setNumberOfAutomaticAssistedAssessments(DueDateStat numberOfAutomaticAssistedAssessments) {
    this.numberOfAutomaticAssistedAssessments = numberOfAutomaticAssistedAssessments;
  }


  public StatsForDashboardDTO numberOfComplaints(Long numberOfComplaints) {
    
    this.numberOfComplaints = numberOfComplaints;
    return this;
  }

   /**
   * Get numberOfComplaints
   * @return numberOfComplaints
  **/
  @javax.annotation.Nullable

  public Long getNumberOfComplaints() {
    return numberOfComplaints;
  }


  public void setNumberOfComplaints(Long numberOfComplaints) {
    this.numberOfComplaints = numberOfComplaints;
  }


  public StatsForDashboardDTO numberOfOpenComplaints(Long numberOfOpenComplaints) {
    
    this.numberOfOpenComplaints = numberOfOpenComplaints;
    return this;
  }

   /**
   * Get numberOfOpenComplaints
   * @return numberOfOpenComplaints
  **/
  @javax.annotation.Nullable

  public Long getNumberOfOpenComplaints() {
    return numberOfOpenComplaints;
  }


  public void setNumberOfOpenComplaints(Long numberOfOpenComplaints) {
    this.numberOfOpenComplaints = numberOfOpenComplaints;
  }


  public StatsForDashboardDTO numberOfMoreFeedbackRequests(Long numberOfMoreFeedbackRequests) {
    
    this.numberOfMoreFeedbackRequests = numberOfMoreFeedbackRequests;
    return this;
  }

   /**
   * Get numberOfMoreFeedbackRequests
   * @return numberOfMoreFeedbackRequests
  **/
  @javax.annotation.Nullable

  public Long getNumberOfMoreFeedbackRequests() {
    return numberOfMoreFeedbackRequests;
  }


  public void setNumberOfMoreFeedbackRequests(Long numberOfMoreFeedbackRequests) {
    this.numberOfMoreFeedbackRequests = numberOfMoreFeedbackRequests;
  }


  public StatsForDashboardDTO numberOfOpenMoreFeedbackRequests(Long numberOfOpenMoreFeedbackRequests) {
    
    this.numberOfOpenMoreFeedbackRequests = numberOfOpenMoreFeedbackRequests;
    return this;
  }

   /**
   * Get numberOfOpenMoreFeedbackRequests
   * @return numberOfOpenMoreFeedbackRequests
  **/
  @javax.annotation.Nullable

  public Long getNumberOfOpenMoreFeedbackRequests() {
    return numberOfOpenMoreFeedbackRequests;
  }


  public void setNumberOfOpenMoreFeedbackRequests(Long numberOfOpenMoreFeedbackRequests) {
    this.numberOfOpenMoreFeedbackRequests = numberOfOpenMoreFeedbackRequests;
  }


  public StatsForDashboardDTO numberOfAssessmentLocks(Long numberOfAssessmentLocks) {
    
    this.numberOfAssessmentLocks = numberOfAssessmentLocks;
    return this;
  }

   /**
   * Get numberOfAssessmentLocks
   * @return numberOfAssessmentLocks
  **/
  @javax.annotation.Nullable

  public Long getNumberOfAssessmentLocks() {
    return numberOfAssessmentLocks;
  }


  public void setNumberOfAssessmentLocks(Long numberOfAssessmentLocks) {
    this.numberOfAssessmentLocks = numberOfAssessmentLocks;
  }


  public StatsForDashboardDTO tutorLeaderboardEntries(List<TutorLeaderboardDTO> tutorLeaderboardEntries) {
    
    this.tutorLeaderboardEntries = tutorLeaderboardEntries;
    return this;
  }

  public StatsForDashboardDTO addTutorLeaderboardEntriesItem(TutorLeaderboardDTO tutorLeaderboardEntriesItem) {
    if (this.tutorLeaderboardEntries == null) {
      this.tutorLeaderboardEntries = new ArrayList<>();
    }
    this.tutorLeaderboardEntries.add(tutorLeaderboardEntriesItem);
    return this;
  }

   /**
   * Get tutorLeaderboardEntries
   * @return tutorLeaderboardEntries
  **/
  @javax.annotation.Nullable

  public List<TutorLeaderboardDTO> getTutorLeaderboardEntries() {
    return tutorLeaderboardEntries;
  }


  public void setTutorLeaderboardEntries(List<TutorLeaderboardDTO> tutorLeaderboardEntries) {
    this.tutorLeaderboardEntries = tutorLeaderboardEntries;
  }


  public StatsForDashboardDTO numberOfRatings(Long numberOfRatings) {
    
    this.numberOfRatings = numberOfRatings;
    return this;
  }

   /**
   * Get numberOfRatings
   * @return numberOfRatings
  **/
  @javax.annotation.Nullable

  public Long getNumberOfRatings() {
    return numberOfRatings;
  }


  public void setNumberOfRatings(Long numberOfRatings) {
    this.numberOfRatings = numberOfRatings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatsForDashboardDTO statsForDashboardDTO = (StatsForDashboardDTO) o;
    return Objects.equals(this.numberOfStudents, statsForDashboardDTO.numberOfStudents) &&
        Objects.equals(this.numberOfSubmissions, statsForDashboardDTO.numberOfSubmissions) &&
        Objects.equals(this.totalNumberOfAssessments, statsForDashboardDTO.totalNumberOfAssessments) &&
        Objects.equals(this.totalNumberOfAssessmentLocks, statsForDashboardDTO.totalNumberOfAssessmentLocks) &&
        Objects.equals(this.complaintsEnabled, statsForDashboardDTO.complaintsEnabled) &&
        Objects.equals(this.feedbackRequestEnabled, statsForDashboardDTO.feedbackRequestEnabled) &&
        Objects.equals(this.numberOfAssessmentsOfCorrectionRounds, statsForDashboardDTO.numberOfAssessmentsOfCorrectionRounds) &&
        Objects.equals(this.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound, statsForDashboardDTO.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound) &&
        Objects.equals(this.numberOfAutomaticAssistedAssessments, statsForDashboardDTO.numberOfAutomaticAssistedAssessments) &&
        Objects.equals(this.numberOfComplaints, statsForDashboardDTO.numberOfComplaints) &&
        Objects.equals(this.numberOfOpenComplaints, statsForDashboardDTO.numberOfOpenComplaints) &&
        Objects.equals(this.numberOfMoreFeedbackRequests, statsForDashboardDTO.numberOfMoreFeedbackRequests) &&
        Objects.equals(this.numberOfOpenMoreFeedbackRequests, statsForDashboardDTO.numberOfOpenMoreFeedbackRequests) &&
        Objects.equals(this.numberOfAssessmentLocks, statsForDashboardDTO.numberOfAssessmentLocks) &&
        Objects.equals(this.tutorLeaderboardEntries, statsForDashboardDTO.tutorLeaderboardEntries) &&
        Objects.equals(this.numberOfRatings, statsForDashboardDTO.numberOfRatings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numberOfStudents, numberOfSubmissions, totalNumberOfAssessments, totalNumberOfAssessmentLocks, complaintsEnabled, feedbackRequestEnabled, numberOfAssessmentsOfCorrectionRounds, numberOfLockedAssessmentByOtherTutorsOfCorrectionRound, numberOfAutomaticAssistedAssessments, numberOfComplaints, numberOfOpenComplaints, numberOfMoreFeedbackRequests, numberOfOpenMoreFeedbackRequests, numberOfAssessmentLocks, tutorLeaderboardEntries, numberOfRatings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatsForDashboardDTO {\n");
    sb.append("    numberOfStudents: ").append(toIndentedString(numberOfStudents)).append("\n");
    sb.append("    numberOfSubmissions: ").append(toIndentedString(numberOfSubmissions)).append("\n");
    sb.append("    totalNumberOfAssessments: ").append(toIndentedString(totalNumberOfAssessments)).append("\n");
    sb.append("    totalNumberOfAssessmentLocks: ").append(toIndentedString(totalNumberOfAssessmentLocks)).append("\n");
    sb.append("    complaintsEnabled: ").append(toIndentedString(complaintsEnabled)).append("\n");
    sb.append("    feedbackRequestEnabled: ").append(toIndentedString(feedbackRequestEnabled)).append("\n");
    sb.append("    numberOfAssessmentsOfCorrectionRounds: ").append(toIndentedString(numberOfAssessmentsOfCorrectionRounds)).append("\n");
    sb.append("    numberOfLockedAssessmentByOtherTutorsOfCorrectionRound: ").append(toIndentedString(numberOfLockedAssessmentByOtherTutorsOfCorrectionRound)).append("\n");
    sb.append("    numberOfAutomaticAssistedAssessments: ").append(toIndentedString(numberOfAutomaticAssistedAssessments)).append("\n");
    sb.append("    numberOfComplaints: ").append(toIndentedString(numberOfComplaints)).append("\n");
    sb.append("    numberOfOpenComplaints: ").append(toIndentedString(numberOfOpenComplaints)).append("\n");
    sb.append("    numberOfMoreFeedbackRequests: ").append(toIndentedString(numberOfMoreFeedbackRequests)).append("\n");
    sb.append("    numberOfOpenMoreFeedbackRequests: ").append(toIndentedString(numberOfOpenMoreFeedbackRequests)).append("\n");
    sb.append("    numberOfAssessmentLocks: ").append(toIndentedString(numberOfAssessmentLocks)).append("\n");
    sb.append("    tutorLeaderboardEntries: ").append(toIndentedString(tutorLeaderboardEntries)).append("\n");
    sb.append("    numberOfRatings: ").append(toIndentedString(numberOfRatings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numberOfStudents");
    openapiFields.add("numberOfSubmissions");
    openapiFields.add("totalNumberOfAssessments");
    openapiFields.add("totalNumberOfAssessmentLocks");
    openapiFields.add("complaintsEnabled");
    openapiFields.add("feedbackRequestEnabled");
    openapiFields.add("numberOfAssessmentsOfCorrectionRounds");
    openapiFields.add("numberOfLockedAssessmentByOtherTutorsOfCorrectionRound");
    openapiFields.add("numberOfAutomaticAssistedAssessments");
    openapiFields.add("numberOfComplaints");
    openapiFields.add("numberOfOpenComplaints");
    openapiFields.add("numberOfMoreFeedbackRequests");
    openapiFields.add("numberOfOpenMoreFeedbackRequests");
    openapiFields.add("numberOfAssessmentLocks");
    openapiFields.add("tutorLeaderboardEntries");
    openapiFields.add("numberOfRatings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StatsForDashboardDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StatsForDashboardDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatsForDashboardDTO is not found in the empty JSON string", StatsForDashboardDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!StatsForDashboardDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatsForDashboardDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `numberOfSubmissions`
      if (jsonObj.get("numberOfSubmissions") != null && !jsonObj.get("numberOfSubmissions").isJsonNull()) {
        DueDateStat.validateJsonObject(jsonObj.getAsJsonObject("numberOfSubmissions"));
      }
      // validate the optional field `totalNumberOfAssessments`
      if (jsonObj.get("totalNumberOfAssessments") != null && !jsonObj.get("totalNumberOfAssessments").isJsonNull()) {
        DueDateStat.validateJsonObject(jsonObj.getAsJsonObject("totalNumberOfAssessments"));
      }
      if (jsonObj.get("numberOfAssessmentsOfCorrectionRounds") != null && !jsonObj.get("numberOfAssessmentsOfCorrectionRounds").isJsonNull()) {
        JsonArray jsonArraynumberOfAssessmentsOfCorrectionRounds = jsonObj.getAsJsonArray("numberOfAssessmentsOfCorrectionRounds");
        if (jsonArraynumberOfAssessmentsOfCorrectionRounds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("numberOfAssessmentsOfCorrectionRounds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `numberOfAssessmentsOfCorrectionRounds` to be an array in the JSON string but got `%s`", jsonObj.get("numberOfAssessmentsOfCorrectionRounds").toString()));
          }

          // validate the optional field `numberOfAssessmentsOfCorrectionRounds` (array)
          for (int i = 0; i < jsonArraynumberOfAssessmentsOfCorrectionRounds.size(); i++) {
            DueDateStat.validateJsonObject(jsonArraynumberOfAssessmentsOfCorrectionRounds.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("numberOfLockedAssessmentByOtherTutorsOfCorrectionRound") != null && !jsonObj.get("numberOfLockedAssessmentByOtherTutorsOfCorrectionRound").isJsonNull()) {
        JsonArray jsonArraynumberOfLockedAssessmentByOtherTutorsOfCorrectionRound = jsonObj.getAsJsonArray("numberOfLockedAssessmentByOtherTutorsOfCorrectionRound");
        if (jsonArraynumberOfLockedAssessmentByOtherTutorsOfCorrectionRound != null) {
          // ensure the json data is an array
          if (!jsonObj.get("numberOfLockedAssessmentByOtherTutorsOfCorrectionRound").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `numberOfLockedAssessmentByOtherTutorsOfCorrectionRound` to be an array in the JSON string but got `%s`", jsonObj.get("numberOfLockedAssessmentByOtherTutorsOfCorrectionRound").toString()));
          }

          // validate the optional field `numberOfLockedAssessmentByOtherTutorsOfCorrectionRound` (array)
          for (int i = 0; i < jsonArraynumberOfLockedAssessmentByOtherTutorsOfCorrectionRound.size(); i++) {
            DueDateStat.validateJsonObject(jsonArraynumberOfLockedAssessmentByOtherTutorsOfCorrectionRound.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `numberOfAutomaticAssistedAssessments`
      if (jsonObj.get("numberOfAutomaticAssistedAssessments") != null && !jsonObj.get("numberOfAutomaticAssistedAssessments").isJsonNull()) {
        DueDateStat.validateJsonObject(jsonObj.getAsJsonObject("numberOfAutomaticAssistedAssessments"));
      }
      if (jsonObj.get("tutorLeaderboardEntries") != null && !jsonObj.get("tutorLeaderboardEntries").isJsonNull()) {
        JsonArray jsonArraytutorLeaderboardEntries = jsonObj.getAsJsonArray("tutorLeaderboardEntries");
        if (jsonArraytutorLeaderboardEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tutorLeaderboardEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tutorLeaderboardEntries` to be an array in the JSON string but got `%s`", jsonObj.get("tutorLeaderboardEntries").toString()));
          }

          // validate the optional field `tutorLeaderboardEntries` (array)
          for (int i = 0; i < jsonArraytutorLeaderboardEntries.size(); i++) {
            TutorLeaderboardDTO.validateJsonObject(jsonArraytutorLeaderboardEntries.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatsForDashboardDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatsForDashboardDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatsForDashboardDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatsForDashboardDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<StatsForDashboardDTO>() {
           @Override
           public void write(JsonWriter out, StatsForDashboardDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatsForDashboardDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StatsForDashboardDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StatsForDashboardDTO
  * @throws IOException if the JSON string is invalid with respect to StatsForDashboardDTO
  */
  public static StatsForDashboardDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatsForDashboardDTO.class);
  }

 /**
  * Convert an instance of StatsForDashboardDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

