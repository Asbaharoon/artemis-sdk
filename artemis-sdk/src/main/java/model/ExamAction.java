/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ConnectionUpdatedAction;
import org.openapitools.client.model.ContinuedAfterHandedInEarlyAction;
import org.openapitools.client.model.EndedExamAction;
import org.openapitools.client.model.HandedInEarlyAction;
import org.openapitools.client.model.SavedExerciseAction;
import org.openapitools.client.model.StartedExamAction;
import org.openapitools.client.model.SwitchedExerciseAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExamAction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ExamAction {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_STUDENT_EXAM_ID = "studentExamId";
  @SerializedName(SERIALIZED_NAME_STUDENT_EXAM_ID)
  private Long studentExamId;

  public static final String SERIALIZED_NAME_EXAM_ACTIVITY_ID = "examActivityId";
  @SerializedName(SERIALIZED_NAME_EXAM_ACTIVITY_ID)
  private Long examActivityId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STARTED_EXAM("STARTED_EXAM"),
    
    ENDED_EXAM("ENDED_EXAM"),
    
    HANDED_IN_EARLY("HANDED_IN_EARLY"),
    
    CONTINUED_AFTER_HAND_IN_EARLY("CONTINUED_AFTER_HAND_IN_EARLY"),
    
    SWITCHED_EXERCISE("SWITCHED_EXERCISE"),
    
    SAVED_EXERCISE("SAVED_EXERCISE"),
    
    CONNECTION_UPDATED("CONNECTION_UPDATED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected TypeEnum type;

  public ExamAction() {
  }

  public ExamAction id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ExamAction studentExamId(Long studentExamId) {
    
    this.studentExamId = studentExamId;
    return this;
  }

   /**
   * Get studentExamId
   * @return studentExamId
  **/
  @javax.annotation.Nullable

  public Long getStudentExamId() {
    return studentExamId;
  }


  public void setStudentExamId(Long studentExamId) {
    this.studentExamId = studentExamId;
  }


  public ExamAction examActivityId(Long examActivityId) {
    
    this.examActivityId = examActivityId;
    return this;
  }

   /**
   * Get examActivityId
   * @return examActivityId
  **/
  @javax.annotation.Nullable

  public Long getExamActivityId() {
    return examActivityId;
  }


  public void setExamActivityId(Long examActivityId) {
    this.examActivityId = examActivityId;
  }


  public ExamAction timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public ExamAction type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExamAction examAction = (ExamAction) o;
    return Objects.equals(this.id, examAction.id) &&
        Objects.equals(this.studentExamId, examAction.studentExamId) &&
        Objects.equals(this.examActivityId, examAction.examActivityId) &&
        Objects.equals(this.timestamp, examAction.timestamp) &&
        Objects.equals(this.type, examAction.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, studentExamId, examActivityId, timestamp, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExamAction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    studentExamId: ").append(toIndentedString(studentExamId)).append("\n");
    sb.append("    examActivityId: ").append(toIndentedString(examActivityId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("studentExamId");
    openapiFields.add("examActivityId");
    openapiFields.add("timestamp");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExamAction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExamAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExamAction is not found in the empty JSON string", ExamAction.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonObj.get("type").getAsString();
      switch (discriminatorValue) {
        case "ConnectionUpdatedAction":
          ConnectionUpdatedAction.validateJsonObject(jsonObj);
          break;
        case "ContinuedAfterHandedInEarlyAction":
          ContinuedAfterHandedInEarlyAction.validateJsonObject(jsonObj);
          break;
        case "EndedExamAction":
          EndedExamAction.validateJsonObject(jsonObj);
          break;
        case "HandedInEarlyAction":
          HandedInEarlyAction.validateJsonObject(jsonObj);
          break;
        case "SavedExerciseAction":
          SavedExerciseAction.validateJsonObject(jsonObj);
          break;
        case "StartedExamAction":
          StartedExamAction.validateJsonObject(jsonObj);
          break;
        case "SwitchedExerciseAction":
          SwitchedExerciseAction.validateJsonObject(jsonObj);
          break;
        default: 
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of ExamAction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExamAction
  * @throws IOException if the JSON string is invalid with respect to ExamAction
  */
  public static ExamAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExamAction.class);
  }

 /**
  * Convert an instance of ExamAction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

