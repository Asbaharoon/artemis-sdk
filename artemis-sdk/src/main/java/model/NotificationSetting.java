/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NotificationSetting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class NotificationSetting {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_SETTING_ID = "settingId";
  @SerializedName(SERIALIZED_NAME_SETTING_ID)
  private String settingId;

  public static final String SERIALIZED_NAME_WEBAPP = "webapp";
  @SerializedName(SERIALIZED_NAME_WEBAPP)
  private Boolean webapp;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private Boolean email;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public NotificationSetting() {
  }

  public NotificationSetting id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public NotificationSetting settingId(String settingId) {
    
    this.settingId = settingId;
    return this;
  }

   /**
   * Get settingId
   * @return settingId
  **/
  @javax.annotation.Nullable

  public String getSettingId() {
    return settingId;
  }


  public void setSettingId(String settingId) {
    this.settingId = settingId;
  }


  public NotificationSetting webapp(Boolean webapp) {
    
    this.webapp = webapp;
    return this;
  }

   /**
   * Get webapp
   * @return webapp
  **/
  @javax.annotation.Nullable

  public Boolean getWebapp() {
    return webapp;
  }


  public void setWebapp(Boolean webapp) {
    this.webapp = webapp;
  }


  public NotificationSetting email(Boolean email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable

  public Boolean getEmail() {
    return email;
  }


  public void setEmail(Boolean email) {
    this.email = email;
  }


  public NotificationSetting user(User user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationSetting notificationSetting = (NotificationSetting) o;
    return Objects.equals(this.id, notificationSetting.id) &&
        Objects.equals(this.settingId, notificationSetting.settingId) &&
        Objects.equals(this.webapp, notificationSetting.webapp) &&
        Objects.equals(this.email, notificationSetting.email) &&
        Objects.equals(this.user, notificationSetting.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, settingId, webapp, email, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationSetting {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    settingId: ").append(toIndentedString(settingId)).append("\n");
    sb.append("    webapp: ").append(toIndentedString(webapp)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("settingId");
    openapiFields.add("webapp");
    openapiFields.add("email");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NotificationSetting
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NotificationSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationSetting is not found in the empty JSON string", NotificationSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NotificationSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationSetting` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("settingId") != null && !jsonObj.get("settingId").isJsonNull()) && !jsonObj.get("settingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settingId").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationSetting>() {
           @Override
           public void write(JsonWriter out, NotificationSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationSetting read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NotificationSetting given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NotificationSetting
  * @throws IOException if the JSON string is invalid with respect to NotificationSetting
  */
  public static NotificationSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationSetting.class);
  }

 /**
  * Convert an instance of NotificationSetting to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

