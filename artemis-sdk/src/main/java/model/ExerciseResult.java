/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExerciseResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ExerciseResult {
  public static final String SERIALIZED_NAME_EXERCISE_ID = "exerciseId";
  @SerializedName(SERIALIZED_NAME_EXERCISE_ID)
  private Long exerciseId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_MAX_SCORE = "maxScore";
  @SerializedName(SERIALIZED_NAME_MAX_SCORE)
  private Double maxScore;

  public static final String SERIALIZED_NAME_ACHIEVED_SCORE = "achievedScore";
  @SerializedName(SERIALIZED_NAME_ACHIEVED_SCORE)
  private Double achievedScore;

  public static final String SERIALIZED_NAME_ACHIEVED_POINTS = "achievedPoints";
  @SerializedName(SERIALIZED_NAME_ACHIEVED_POINTS)
  private Double achievedPoints;

  public static final String SERIALIZED_NAME_HAS_NON_EMPTY_SUBMISSION = "hasNonEmptySubmission";
  @SerializedName(SERIALIZED_NAME_HAS_NON_EMPTY_SUBMISSION)
  private Boolean hasNonEmptySubmission;

  public ExerciseResult() {
  }

  public ExerciseResult exerciseId(Long exerciseId) {
    
    this.exerciseId = exerciseId;
    return this;
  }

   /**
   * Get exerciseId
   * @return exerciseId
  **/
  @javax.annotation.Nullable

  public Long getExerciseId() {
    return exerciseId;
  }


  public void setExerciseId(Long exerciseId) {
    this.exerciseId = exerciseId;
  }


  public ExerciseResult title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ExerciseResult maxScore(Double maxScore) {
    
    this.maxScore = maxScore;
    return this;
  }

   /**
   * Get maxScore
   * @return maxScore
  **/
  @javax.annotation.Nullable

  public Double getMaxScore() {
    return maxScore;
  }


  public void setMaxScore(Double maxScore) {
    this.maxScore = maxScore;
  }


  public ExerciseResult achievedScore(Double achievedScore) {
    
    this.achievedScore = achievedScore;
    return this;
  }

   /**
   * Get achievedScore
   * @return achievedScore
  **/
  @javax.annotation.Nullable

  public Double getAchievedScore() {
    return achievedScore;
  }


  public void setAchievedScore(Double achievedScore) {
    this.achievedScore = achievedScore;
  }


  public ExerciseResult achievedPoints(Double achievedPoints) {
    
    this.achievedPoints = achievedPoints;
    return this;
  }

   /**
   * Get achievedPoints
   * @return achievedPoints
  **/
  @javax.annotation.Nullable

  public Double getAchievedPoints() {
    return achievedPoints;
  }


  public void setAchievedPoints(Double achievedPoints) {
    this.achievedPoints = achievedPoints;
  }


  public ExerciseResult hasNonEmptySubmission(Boolean hasNonEmptySubmission) {
    
    this.hasNonEmptySubmission = hasNonEmptySubmission;
    return this;
  }

   /**
   * Get hasNonEmptySubmission
   * @return hasNonEmptySubmission
  **/
  @javax.annotation.Nullable

  public Boolean getHasNonEmptySubmission() {
    return hasNonEmptySubmission;
  }


  public void setHasNonEmptySubmission(Boolean hasNonEmptySubmission) {
    this.hasNonEmptySubmission = hasNonEmptySubmission;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExerciseResult exerciseResult = (ExerciseResult) o;
    return Objects.equals(this.exerciseId, exerciseResult.exerciseId) &&
        Objects.equals(this.title, exerciseResult.title) &&
        Objects.equals(this.maxScore, exerciseResult.maxScore) &&
        Objects.equals(this.achievedScore, exerciseResult.achievedScore) &&
        Objects.equals(this.achievedPoints, exerciseResult.achievedPoints) &&
        Objects.equals(this.hasNonEmptySubmission, exerciseResult.hasNonEmptySubmission);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exerciseId, title, maxScore, achievedScore, achievedPoints, hasNonEmptySubmission);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExerciseResult {\n");
    sb.append("    exerciseId: ").append(toIndentedString(exerciseId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    maxScore: ").append(toIndentedString(maxScore)).append("\n");
    sb.append("    achievedScore: ").append(toIndentedString(achievedScore)).append("\n");
    sb.append("    achievedPoints: ").append(toIndentedString(achievedPoints)).append("\n");
    sb.append("    hasNonEmptySubmission: ").append(toIndentedString(hasNonEmptySubmission)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exerciseId");
    openapiFields.add("title");
    openapiFields.add("maxScore");
    openapiFields.add("achievedScore");
    openapiFields.add("achievedPoints");
    openapiFields.add("hasNonEmptySubmission");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExerciseResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExerciseResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExerciseResult is not found in the empty JSON string", ExerciseResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExerciseResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExerciseResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExerciseResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExerciseResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExerciseResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExerciseResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ExerciseResult>() {
           @Override
           public void write(JsonWriter out, ExerciseResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExerciseResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExerciseResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExerciseResult
  * @throws IOException if the JSON string is invalid with respect to ExerciseResult
  */
  public static ExerciseResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExerciseResult.class);
  }

 /**
  * Convert an instance of ExerciseResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

