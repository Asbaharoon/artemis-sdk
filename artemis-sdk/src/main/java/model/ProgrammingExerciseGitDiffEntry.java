/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.ProgrammingExerciseGitDiffReport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProgrammingExerciseGitDiffEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ProgrammingExerciseGitDiffEntry {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_GIT_DIFF_REPORT = "gitDiffReport";
  @SerializedName(SERIALIZED_NAME_GIT_DIFF_REPORT)
  private ProgrammingExerciseGitDiffReport gitDiffReport;

  public static final String SERIALIZED_NAME_PREVIOUS_FILE_PATH = "previousFilePath";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_FILE_PATH)
  private String previousFilePath;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_PREVIOUS_START_LINE = "previousStartLine";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_START_LINE)
  private Integer previousStartLine;

  public static final String SERIALIZED_NAME_START_LINE = "startLine";
  @SerializedName(SERIALIZED_NAME_START_LINE)
  private Integer startLine;

  public static final String SERIALIZED_NAME_PREVIOUS_LINE_COUNT = "previousLineCount";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_LINE_COUNT)
  private Integer previousLineCount;

  public static final String SERIALIZED_NAME_LINE_COUNT = "lineCount";
  @SerializedName(SERIALIZED_NAME_LINE_COUNT)
  private Integer lineCount;

  public static final String SERIALIZED_NAME_EMPTY = "empty";
  @SerializedName(SERIALIZED_NAME_EMPTY)
  private Boolean empty;

  public ProgrammingExerciseGitDiffEntry() {
  }

  public ProgrammingExerciseGitDiffEntry id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ProgrammingExerciseGitDiffEntry gitDiffReport(ProgrammingExerciseGitDiffReport gitDiffReport) {
    
    this.gitDiffReport = gitDiffReport;
    return this;
  }

   /**
   * Get gitDiffReport
   * @return gitDiffReport
  **/
  @javax.annotation.Nullable

  public ProgrammingExerciseGitDiffReport getGitDiffReport() {
    return gitDiffReport;
  }


  public void setGitDiffReport(ProgrammingExerciseGitDiffReport gitDiffReport) {
    this.gitDiffReport = gitDiffReport;
  }


  public ProgrammingExerciseGitDiffEntry previousFilePath(String previousFilePath) {
    
    this.previousFilePath = previousFilePath;
    return this;
  }

   /**
   * Get previousFilePath
   * @return previousFilePath
  **/
  @javax.annotation.Nullable

  public String getPreviousFilePath() {
    return previousFilePath;
  }


  public void setPreviousFilePath(String previousFilePath) {
    this.previousFilePath = previousFilePath;
  }


  public ProgrammingExerciseGitDiffEntry filePath(String filePath) {
    
    this.filePath = filePath;
    return this;
  }

   /**
   * Get filePath
   * @return filePath
  **/
  @javax.annotation.Nullable

  public String getFilePath() {
    return filePath;
  }


  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public ProgrammingExerciseGitDiffEntry previousStartLine(Integer previousStartLine) {
    
    this.previousStartLine = previousStartLine;
    return this;
  }

   /**
   * Get previousStartLine
   * @return previousStartLine
  **/
  @javax.annotation.Nullable

  public Integer getPreviousStartLine() {
    return previousStartLine;
  }


  public void setPreviousStartLine(Integer previousStartLine) {
    this.previousStartLine = previousStartLine;
  }


  public ProgrammingExerciseGitDiffEntry startLine(Integer startLine) {
    
    this.startLine = startLine;
    return this;
  }

   /**
   * Get startLine
   * @return startLine
  **/
  @javax.annotation.Nullable

  public Integer getStartLine() {
    return startLine;
  }


  public void setStartLine(Integer startLine) {
    this.startLine = startLine;
  }


  public ProgrammingExerciseGitDiffEntry previousLineCount(Integer previousLineCount) {
    
    this.previousLineCount = previousLineCount;
    return this;
  }

   /**
   * Get previousLineCount
   * @return previousLineCount
  **/
  @javax.annotation.Nullable

  public Integer getPreviousLineCount() {
    return previousLineCount;
  }


  public void setPreviousLineCount(Integer previousLineCount) {
    this.previousLineCount = previousLineCount;
  }


  public ProgrammingExerciseGitDiffEntry lineCount(Integer lineCount) {
    
    this.lineCount = lineCount;
    return this;
  }

   /**
   * Get lineCount
   * @return lineCount
  **/
  @javax.annotation.Nullable

  public Integer getLineCount() {
    return lineCount;
  }


  public void setLineCount(Integer lineCount) {
    this.lineCount = lineCount;
  }


  public ProgrammingExerciseGitDiffEntry empty(Boolean empty) {
    
    this.empty = empty;
    return this;
  }

   /**
   * Get empty
   * @return empty
  **/
  @javax.annotation.Nullable

  public Boolean getEmpty() {
    return empty;
  }


  public void setEmpty(Boolean empty) {
    this.empty = empty;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgrammingExerciseGitDiffEntry programmingExerciseGitDiffEntry = (ProgrammingExerciseGitDiffEntry) o;
    return Objects.equals(this.id, programmingExerciseGitDiffEntry.id) &&
        Objects.equals(this.gitDiffReport, programmingExerciseGitDiffEntry.gitDiffReport) &&
        Objects.equals(this.previousFilePath, programmingExerciseGitDiffEntry.previousFilePath) &&
        Objects.equals(this.filePath, programmingExerciseGitDiffEntry.filePath) &&
        Objects.equals(this.previousStartLine, programmingExerciseGitDiffEntry.previousStartLine) &&
        Objects.equals(this.startLine, programmingExerciseGitDiffEntry.startLine) &&
        Objects.equals(this.previousLineCount, programmingExerciseGitDiffEntry.previousLineCount) &&
        Objects.equals(this.lineCount, programmingExerciseGitDiffEntry.lineCount) &&
        Objects.equals(this.empty, programmingExerciseGitDiffEntry.empty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, gitDiffReport, previousFilePath, filePath, previousStartLine, startLine, previousLineCount, lineCount, empty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgrammingExerciseGitDiffEntry {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    gitDiffReport: ").append(toIndentedString(gitDiffReport)).append("\n");
    sb.append("    previousFilePath: ").append(toIndentedString(previousFilePath)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    previousStartLine: ").append(toIndentedString(previousStartLine)).append("\n");
    sb.append("    startLine: ").append(toIndentedString(startLine)).append("\n");
    sb.append("    previousLineCount: ").append(toIndentedString(previousLineCount)).append("\n");
    sb.append("    lineCount: ").append(toIndentedString(lineCount)).append("\n");
    sb.append("    empty: ").append(toIndentedString(empty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("gitDiffReport");
    openapiFields.add("previousFilePath");
    openapiFields.add("filePath");
    openapiFields.add("previousStartLine");
    openapiFields.add("startLine");
    openapiFields.add("previousLineCount");
    openapiFields.add("lineCount");
    openapiFields.add("empty");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProgrammingExerciseGitDiffEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProgrammingExerciseGitDiffEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProgrammingExerciseGitDiffEntry is not found in the empty JSON string", ProgrammingExerciseGitDiffEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProgrammingExerciseGitDiffEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProgrammingExerciseGitDiffEntry` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `gitDiffReport`
      if (jsonObj.get("gitDiffReport") != null && !jsonObj.get("gitDiffReport").isJsonNull()) {
        ProgrammingExerciseGitDiffReport.validateJsonObject(jsonObj.getAsJsonObject("gitDiffReport"));
      }
      if ((jsonObj.get("previousFilePath") != null && !jsonObj.get("previousFilePath").isJsonNull()) && !jsonObj.get("previousFilePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousFilePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousFilePath").toString()));
      }
      if ((jsonObj.get("filePath") != null && !jsonObj.get("filePath").isJsonNull()) && !jsonObj.get("filePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProgrammingExerciseGitDiffEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProgrammingExerciseGitDiffEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProgrammingExerciseGitDiffEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProgrammingExerciseGitDiffEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<ProgrammingExerciseGitDiffEntry>() {
           @Override
           public void write(JsonWriter out, ProgrammingExerciseGitDiffEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProgrammingExerciseGitDiffEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProgrammingExerciseGitDiffEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProgrammingExerciseGitDiffEntry
  * @throws IOException if the JSON string is invalid with respect to ProgrammingExerciseGitDiffEntry
  */
  public static ProgrammingExerciseGitDiffEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProgrammingExerciseGitDiffEntry.class);
  }

 /**
  * Convert an instance of ProgrammingExerciseGitDiffEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

