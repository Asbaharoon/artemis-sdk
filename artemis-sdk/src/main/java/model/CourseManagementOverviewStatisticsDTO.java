/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CourseManagementOverviewExerciseStatisticsDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CourseManagementOverviewStatisticsDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class CourseManagementOverviewStatisticsDTO {
  public static final String SERIALIZED_NAME_COURSE_ID = "courseId";
  @SerializedName(SERIALIZED_NAME_COURSE_ID)
  private Long courseId;

  public static final String SERIALIZED_NAME_ACTIVE_STUDENTS = "activeStudents";
  @SerializedName(SERIALIZED_NAME_ACTIVE_STUDENTS)
  private List<Integer> activeStudents = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXERCISE_D_T_O_S = "exerciseDTOS";
  @SerializedName(SERIALIZED_NAME_EXERCISE_D_T_O_S)
  private List<CourseManagementOverviewExerciseStatisticsDTO> exerciseDTOS = new ArrayList<>();

  public CourseManagementOverviewStatisticsDTO() {
  }

  public CourseManagementOverviewStatisticsDTO courseId(Long courseId) {
    
    this.courseId = courseId;
    return this;
  }

   /**
   * Get courseId
   * @return courseId
  **/
  @javax.annotation.Nullable

  public Long getCourseId() {
    return courseId;
  }


  public void setCourseId(Long courseId) {
    this.courseId = courseId;
  }


  public CourseManagementOverviewStatisticsDTO activeStudents(List<Integer> activeStudents) {
    
    this.activeStudents = activeStudents;
    return this;
  }

  public CourseManagementOverviewStatisticsDTO addActiveStudentsItem(Integer activeStudentsItem) {
    if (this.activeStudents == null) {
      this.activeStudents = new ArrayList<>();
    }
    this.activeStudents.add(activeStudentsItem);
    return this;
  }

   /**
   * Get activeStudents
   * @return activeStudents
  **/
  @javax.annotation.Nullable

  public List<Integer> getActiveStudents() {
    return activeStudents;
  }


  public void setActiveStudents(List<Integer> activeStudents) {
    this.activeStudents = activeStudents;
  }


  public CourseManagementOverviewStatisticsDTO exerciseDTOS(List<CourseManagementOverviewExerciseStatisticsDTO> exerciseDTOS) {
    
    this.exerciseDTOS = exerciseDTOS;
    return this;
  }

  public CourseManagementOverviewStatisticsDTO addExerciseDTOSItem(CourseManagementOverviewExerciseStatisticsDTO exerciseDTOSItem) {
    if (this.exerciseDTOS == null) {
      this.exerciseDTOS = new ArrayList<>();
    }
    this.exerciseDTOS.add(exerciseDTOSItem);
    return this;
  }

   /**
   * Get exerciseDTOS
   * @return exerciseDTOS
  **/
  @javax.annotation.Nullable

  public List<CourseManagementOverviewExerciseStatisticsDTO> getExerciseDTOS() {
    return exerciseDTOS;
  }


  public void setExerciseDTOS(List<CourseManagementOverviewExerciseStatisticsDTO> exerciseDTOS) {
    this.exerciseDTOS = exerciseDTOS;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CourseManagementOverviewStatisticsDTO courseManagementOverviewStatisticsDTO = (CourseManagementOverviewStatisticsDTO) o;
    return Objects.equals(this.courseId, courseManagementOverviewStatisticsDTO.courseId) &&
        Objects.equals(this.activeStudents, courseManagementOverviewStatisticsDTO.activeStudents) &&
        Objects.equals(this.exerciseDTOS, courseManagementOverviewStatisticsDTO.exerciseDTOS);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courseId, activeStudents, exerciseDTOS);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CourseManagementOverviewStatisticsDTO {\n");
    sb.append("    courseId: ").append(toIndentedString(courseId)).append("\n");
    sb.append("    activeStudents: ").append(toIndentedString(activeStudents)).append("\n");
    sb.append("    exerciseDTOS: ").append(toIndentedString(exerciseDTOS)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("courseId");
    openapiFields.add("activeStudents");
    openapiFields.add("exerciseDTOS");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CourseManagementOverviewStatisticsDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CourseManagementOverviewStatisticsDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CourseManagementOverviewStatisticsDTO is not found in the empty JSON string", CourseManagementOverviewStatisticsDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CourseManagementOverviewStatisticsDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CourseManagementOverviewStatisticsDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("activeStudents") != null && !jsonObj.get("activeStudents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeStudents` to be an array in the JSON string but got `%s`", jsonObj.get("activeStudents").toString()));
      }
      if (jsonObj.get("exerciseDTOS") != null && !jsonObj.get("exerciseDTOS").isJsonNull()) {
        JsonArray jsonArrayexerciseDTOS = jsonObj.getAsJsonArray("exerciseDTOS");
        if (jsonArrayexerciseDTOS != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exerciseDTOS").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exerciseDTOS` to be an array in the JSON string but got `%s`", jsonObj.get("exerciseDTOS").toString()));
          }

          // validate the optional field `exerciseDTOS` (array)
          for (int i = 0; i < jsonArrayexerciseDTOS.size(); i++) {
            CourseManagementOverviewExerciseStatisticsDTO.validateJsonObject(jsonArrayexerciseDTOS.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CourseManagementOverviewStatisticsDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CourseManagementOverviewStatisticsDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CourseManagementOverviewStatisticsDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CourseManagementOverviewStatisticsDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CourseManagementOverviewStatisticsDTO>() {
           @Override
           public void write(JsonWriter out, CourseManagementOverviewStatisticsDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CourseManagementOverviewStatisticsDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CourseManagementOverviewStatisticsDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CourseManagementOverviewStatisticsDTO
  * @throws IOException if the JSON string is invalid with respect to CourseManagementOverviewStatisticsDTO
  */
  public static CourseManagementOverviewStatisticsDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CourseManagementOverviewStatisticsDTO.class);
  }

 /**
  * Convert an instance of CourseManagementOverviewStatisticsDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

