/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetExercise200Response;
import org.openapitools.client.model.GradingInstruction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GradingCriterion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class GradingCriterion {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_STRUCTURED_GRADING_INSTRUCTIONS = "structuredGradingInstructions";
  @SerializedName(SERIALIZED_NAME_STRUCTURED_GRADING_INSTRUCTIONS)
  private List<GradingInstruction> structuredGradingInstructions = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXERCISE = "exercise";
  @SerializedName(SERIALIZED_NAME_EXERCISE)
  private GetExercise200Response exercise;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public GradingCriterion() {
  }

  public GradingCriterion id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public GradingCriterion structuredGradingInstructions(List<GradingInstruction> structuredGradingInstructions) {
    
    this.structuredGradingInstructions = structuredGradingInstructions;
    return this;
  }

  public GradingCriterion addStructuredGradingInstructionsItem(GradingInstruction structuredGradingInstructionsItem) {
    if (this.structuredGradingInstructions == null) {
      this.structuredGradingInstructions = new ArrayList<>();
    }
    this.structuredGradingInstructions.add(structuredGradingInstructionsItem);
    return this;
  }

   /**
   * Get structuredGradingInstructions
   * @return structuredGradingInstructions
  **/
  @javax.annotation.Nullable

  public List<GradingInstruction> getStructuredGradingInstructions() {
    return structuredGradingInstructions;
  }


  public void setStructuredGradingInstructions(List<GradingInstruction> structuredGradingInstructions) {
    this.structuredGradingInstructions = structuredGradingInstructions;
  }


  public GradingCriterion exercise(GetExercise200Response exercise) {
    
    this.exercise = exercise;
    return this;
  }

   /**
   * Get exercise
   * @return exercise
  **/
  @javax.annotation.Nullable

  public GetExercise200Response getExercise() {
    return exercise;
  }


  public void setExercise(GetExercise200Response exercise) {
    this.exercise = exercise;
  }


  public GradingCriterion title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GradingCriterion gradingCriterion = (GradingCriterion) o;
    return Objects.equals(this.id, gradingCriterion.id) &&
        Objects.equals(this.structuredGradingInstructions, gradingCriterion.structuredGradingInstructions) &&
        Objects.equals(this.exercise, gradingCriterion.exercise) &&
        Objects.equals(this.title, gradingCriterion.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, structuredGradingInstructions, exercise, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GradingCriterion {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    structuredGradingInstructions: ").append(toIndentedString(structuredGradingInstructions)).append("\n");
    sb.append("    exercise: ").append(toIndentedString(exercise)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("structuredGradingInstructions");
    openapiFields.add("exercise");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GradingCriterion
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GradingCriterion.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GradingCriterion is not found in the empty JSON string", GradingCriterion.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GradingCriterion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GradingCriterion` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("structuredGradingInstructions") != null && !jsonObj.get("structuredGradingInstructions").isJsonNull()) {
        JsonArray jsonArraystructuredGradingInstructions = jsonObj.getAsJsonArray("structuredGradingInstructions");
        if (jsonArraystructuredGradingInstructions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("structuredGradingInstructions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `structuredGradingInstructions` to be an array in the JSON string but got `%s`", jsonObj.get("structuredGradingInstructions").toString()));
          }

          // validate the optional field `structuredGradingInstructions` (array)
          for (int i = 0; i < jsonArraystructuredGradingInstructions.size(); i++) {
            GradingInstruction.validateJsonObject(jsonArraystructuredGradingInstructions.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `exercise`
      if (jsonObj.get("exercise") != null && !jsonObj.get("exercise").isJsonNull()) {
        GetExercise200Response.validateJsonObject(jsonObj.getAsJsonObject("exercise"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GradingCriterion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GradingCriterion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GradingCriterion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GradingCriterion.class));

       return (TypeAdapter<T>) new TypeAdapter<GradingCriterion>() {
           @Override
           public void write(JsonWriter out, GradingCriterion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GradingCriterion read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GradingCriterion given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GradingCriterion
  * @throws IOException if the JSON string is invalid with respect to GradingCriterion
  */
  public static GradingCriterion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GradingCriterion.class);
  }

 /**
  * Convert an instance of GradingCriterion to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

