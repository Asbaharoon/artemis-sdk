/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.IPAddressCreatorObjectObjectObjectObjectObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IPAddressNetworkObjectObjectObjectObjectObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class IPAddressNetworkObjectObjectObjectObjectObject {
  public static final String SERIALIZED_NAME_LOOPBACK = "loopback";
  @SerializedName(SERIALIZED_NAME_LOOPBACK)
  private Object loopback;

  public static final String SERIALIZED_NAME_ADDRESS_CREATOR = "addressCreator";
  @SerializedName(SERIALIZED_NAME_ADDRESS_CREATOR)
  private IPAddressCreatorObjectObjectObjectObjectObject addressCreator;

  public static final String SERIALIZED_NAME_STANDARD_LOOPBACK_STRINGS = "standardLoopbackStrings";
  @SerializedName(SERIALIZED_NAME_STANDARD_LOOPBACK_STRINGS)
  private List<String> standardLoopbackStrings = new ArrayList<>();

  public static final String SERIALIZED_NAME_IPV4 = "ipv4";
  @SerializedName(SERIALIZED_NAME_IPV4)
  private Boolean ipv4;

  /**
   * Gets or Sets ipversion
   */
  @JsonAdapter(IpversionEnum.Adapter.class)
  public enum IpversionEnum {
    IPV4("IPv4"),
    
    IPV6("IPv6");

    private String value;

    IpversionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IpversionEnum fromValue(String value) {
      for (IpversionEnum b : IpversionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IpversionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpversionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpversionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IpversionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IPVERSION = "ipversion";
  @SerializedName(SERIALIZED_NAME_IPVERSION)
  private IpversionEnum ipversion;

  public static final String SERIALIZED_NAME_IPV6 = "ipv6";
  @SerializedName(SERIALIZED_NAME_IPV6)
  private Boolean ipv6;

  public static final String SERIALIZED_NAME_SEGMENT_CACHING = "segmentCaching";
  @SerializedName(SERIALIZED_NAME_SEGMENT_CACHING)
  private Boolean segmentCaching;

  /**
   * Gets or Sets prefixConfiguration
   */
  @JsonAdapter(PrefixConfigurationEnum.Adapter.class)
  public enum PrefixConfigurationEnum {
    ALL_PREFIXED_ADDRESSES_ARE_SUBNETS("ALL_PREFIXED_ADDRESSES_ARE_SUBNETS"),
    
    PREFIXED_ZERO_HOSTS_ARE_SUBNETS("PREFIXED_ZERO_HOSTS_ARE_SUBNETS"),
    
    EXPLICIT_SUBNETS("EXPLICIT_SUBNETS");

    private String value;

    PrefixConfigurationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrefixConfigurationEnum fromValue(String value) {
      for (PrefixConfigurationEnum b : PrefixConfigurationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrefixConfigurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrefixConfigurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrefixConfigurationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrefixConfigurationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PREFIX_CONFIGURATION = "prefixConfiguration";
  @SerializedName(SERIALIZED_NAME_PREFIX_CONFIGURATION)
  private PrefixConfigurationEnum prefixConfiguration;

  public IPAddressNetworkObjectObjectObjectObjectObject() {
  }

  public IPAddressNetworkObjectObjectObjectObjectObject loopback(Object loopback) {
    
    this.loopback = loopback;
    return this;
  }

   /**
   * Get loopback
   * @return loopback
  **/
  @javax.annotation.Nullable

  public Object getLoopback() {
    return loopback;
  }


  public void setLoopback(Object loopback) {
    this.loopback = loopback;
  }


  public IPAddressNetworkObjectObjectObjectObjectObject addressCreator(IPAddressCreatorObjectObjectObjectObjectObject addressCreator) {
    
    this.addressCreator = addressCreator;
    return this;
  }

   /**
   * Get addressCreator
   * @return addressCreator
  **/
  @javax.annotation.Nullable

  public IPAddressCreatorObjectObjectObjectObjectObject getAddressCreator() {
    return addressCreator;
  }


  public void setAddressCreator(IPAddressCreatorObjectObjectObjectObjectObject addressCreator) {
    this.addressCreator = addressCreator;
  }


  public IPAddressNetworkObjectObjectObjectObjectObject standardLoopbackStrings(List<String> standardLoopbackStrings) {
    
    this.standardLoopbackStrings = standardLoopbackStrings;
    return this;
  }

  public IPAddressNetworkObjectObjectObjectObjectObject addStandardLoopbackStringsItem(String standardLoopbackStringsItem) {
    if (this.standardLoopbackStrings == null) {
      this.standardLoopbackStrings = new ArrayList<>();
    }
    this.standardLoopbackStrings.add(standardLoopbackStringsItem);
    return this;
  }

   /**
   * Get standardLoopbackStrings
   * @return standardLoopbackStrings
  **/
  @javax.annotation.Nullable

  public List<String> getStandardLoopbackStrings() {
    return standardLoopbackStrings;
  }


  public void setStandardLoopbackStrings(List<String> standardLoopbackStrings) {
    this.standardLoopbackStrings = standardLoopbackStrings;
  }


  public IPAddressNetworkObjectObjectObjectObjectObject ipv4(Boolean ipv4) {
    
    this.ipv4 = ipv4;
    return this;
  }

   /**
   * Get ipv4
   * @return ipv4
  **/
  @javax.annotation.Nullable

  public Boolean getIpv4() {
    return ipv4;
  }


  public void setIpv4(Boolean ipv4) {
    this.ipv4 = ipv4;
  }


  public IPAddressNetworkObjectObjectObjectObjectObject ipversion(IpversionEnum ipversion) {
    
    this.ipversion = ipversion;
    return this;
  }

   /**
   * Get ipversion
   * @return ipversion
  **/
  @javax.annotation.Nullable

  public IpversionEnum getIpversion() {
    return ipversion;
  }


  public void setIpversion(IpversionEnum ipversion) {
    this.ipversion = ipversion;
  }


  public IPAddressNetworkObjectObjectObjectObjectObject ipv6(Boolean ipv6) {
    
    this.ipv6 = ipv6;
    return this;
  }

   /**
   * Get ipv6
   * @return ipv6
  **/
  @javax.annotation.Nullable

  public Boolean getIpv6() {
    return ipv6;
  }


  public void setIpv6(Boolean ipv6) {
    this.ipv6 = ipv6;
  }


  public IPAddressNetworkObjectObjectObjectObjectObject segmentCaching(Boolean segmentCaching) {
    
    this.segmentCaching = segmentCaching;
    return this;
  }

   /**
   * Get segmentCaching
   * @return segmentCaching
  **/
  @javax.annotation.Nullable

  public Boolean getSegmentCaching() {
    return segmentCaching;
  }


  public void setSegmentCaching(Boolean segmentCaching) {
    this.segmentCaching = segmentCaching;
  }


  public IPAddressNetworkObjectObjectObjectObjectObject prefixConfiguration(PrefixConfigurationEnum prefixConfiguration) {
    
    this.prefixConfiguration = prefixConfiguration;
    return this;
  }

   /**
   * Get prefixConfiguration
   * @return prefixConfiguration
  **/
  @javax.annotation.Nullable

  public PrefixConfigurationEnum getPrefixConfiguration() {
    return prefixConfiguration;
  }


  public void setPrefixConfiguration(PrefixConfigurationEnum prefixConfiguration) {
    this.prefixConfiguration = prefixConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPAddressNetworkObjectObjectObjectObjectObject ipAddressNetworkObjectObjectObjectObjectObject = (IPAddressNetworkObjectObjectObjectObjectObject) o;
    return Objects.equals(this.loopback, ipAddressNetworkObjectObjectObjectObjectObject.loopback) &&
        Objects.equals(this.addressCreator, ipAddressNetworkObjectObjectObjectObjectObject.addressCreator) &&
        Objects.equals(this.standardLoopbackStrings, ipAddressNetworkObjectObjectObjectObjectObject.standardLoopbackStrings) &&
        Objects.equals(this.ipv4, ipAddressNetworkObjectObjectObjectObjectObject.ipv4) &&
        Objects.equals(this.ipversion, ipAddressNetworkObjectObjectObjectObjectObject.ipversion) &&
        Objects.equals(this.ipv6, ipAddressNetworkObjectObjectObjectObjectObject.ipv6) &&
        Objects.equals(this.segmentCaching, ipAddressNetworkObjectObjectObjectObjectObject.segmentCaching) &&
        Objects.equals(this.prefixConfiguration, ipAddressNetworkObjectObjectObjectObjectObject.prefixConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loopback, addressCreator, standardLoopbackStrings, ipv4, ipversion, ipv6, segmentCaching, prefixConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPAddressNetworkObjectObjectObjectObjectObject {\n");
    sb.append("    loopback: ").append(toIndentedString(loopback)).append("\n");
    sb.append("    addressCreator: ").append(toIndentedString(addressCreator)).append("\n");
    sb.append("    standardLoopbackStrings: ").append(toIndentedString(standardLoopbackStrings)).append("\n");
    sb.append("    ipv4: ").append(toIndentedString(ipv4)).append("\n");
    sb.append("    ipversion: ").append(toIndentedString(ipversion)).append("\n");
    sb.append("    ipv6: ").append(toIndentedString(ipv6)).append("\n");
    sb.append("    segmentCaching: ").append(toIndentedString(segmentCaching)).append("\n");
    sb.append("    prefixConfiguration: ").append(toIndentedString(prefixConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("loopback");
    openapiFields.add("addressCreator");
    openapiFields.add("standardLoopbackStrings");
    openapiFields.add("ipv4");
    openapiFields.add("ipversion");
    openapiFields.add("ipv6");
    openapiFields.add("segmentCaching");
    openapiFields.add("prefixConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IPAddressNetworkObjectObjectObjectObjectObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IPAddressNetworkObjectObjectObjectObjectObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPAddressNetworkObjectObjectObjectObjectObject is not found in the empty JSON string", IPAddressNetworkObjectObjectObjectObjectObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IPAddressNetworkObjectObjectObjectObjectObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPAddressNetworkObjectObjectObjectObjectObject` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `addressCreator`
      if (jsonObj.get("addressCreator") != null && !jsonObj.get("addressCreator").isJsonNull()) {
        IPAddressCreatorObjectObjectObjectObjectObject.validateJsonObject(jsonObj.getAsJsonObject("addressCreator"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("standardLoopbackStrings") != null && !jsonObj.get("standardLoopbackStrings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `standardLoopbackStrings` to be an array in the JSON string but got `%s`", jsonObj.get("standardLoopbackStrings").toString()));
      }
      if ((jsonObj.get("ipversion") != null && !jsonObj.get("ipversion").isJsonNull()) && !jsonObj.get("ipversion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipversion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipversion").toString()));
      }
      if ((jsonObj.get("prefixConfiguration") != null && !jsonObj.get("prefixConfiguration").isJsonNull()) && !jsonObj.get("prefixConfiguration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefixConfiguration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefixConfiguration").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPAddressNetworkObjectObjectObjectObjectObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPAddressNetworkObjectObjectObjectObjectObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPAddressNetworkObjectObjectObjectObjectObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPAddressNetworkObjectObjectObjectObjectObject.class));

       return (TypeAdapter<T>) new TypeAdapter<IPAddressNetworkObjectObjectObjectObjectObject>() {
           @Override
           public void write(JsonWriter out, IPAddressNetworkObjectObjectObjectObjectObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPAddressNetworkObjectObjectObjectObjectObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IPAddressNetworkObjectObjectObjectObjectObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IPAddressNetworkObjectObjectObjectObjectObject
  * @throws IOException if the JSON string is invalid with respect to IPAddressNetworkObjectObjectObjectObjectObject
  */
  public static IPAddressNetworkObjectObjectObjectObjectObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPAddressNetworkObjectObjectObjectObjectObject.class);
  }

 /**
  * Convert an instance of IPAddressNetworkObjectObjectObjectObjectObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

