/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Complaint;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ComplaintResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ComplaintResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_RESPONSE_TEXT = "responseText";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TEXT)
  private String responseText;

  public static final String SERIALIZED_NAME_SUBMITTED_TIME = "submittedTime";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_TIME)
  private OffsetDateTime submittedTime;

  public static final String SERIALIZED_NAME_COMPLAINT = "complaint";
  @SerializedName(SERIALIZED_NAME_COMPLAINT)
  private Complaint complaint;

  public static final String SERIALIZED_NAME_REVIEWER = "reviewer";
  @SerializedName(SERIALIZED_NAME_REVIEWER)
  private User reviewer;

  public static final String SERIALIZED_NAME_IS_CURRENTLY_LOCKED = "isCurrentlyLocked";
  @SerializedName(SERIALIZED_NAME_IS_CURRENTLY_LOCKED)
  private Boolean isCurrentlyLocked;

  public static final String SERIALIZED_NAME_LOCK_END_DATE = "lockEndDate";
  @SerializedName(SERIALIZED_NAME_LOCK_END_DATE)
  private OffsetDateTime lockEndDate;

  public ComplaintResponse() {
  }

  public ComplaintResponse id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ComplaintResponse responseText(String responseText) {
    
    this.responseText = responseText;
    return this;
  }

   /**
   * Get responseText
   * @return responseText
  **/
  @javax.annotation.Nullable

  public String getResponseText() {
    return responseText;
  }


  public void setResponseText(String responseText) {
    this.responseText = responseText;
  }


  public ComplaintResponse submittedTime(OffsetDateTime submittedTime) {
    
    this.submittedTime = submittedTime;
    return this;
  }

   /**
   * Get submittedTime
   * @return submittedTime
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getSubmittedTime() {
    return submittedTime;
  }


  public void setSubmittedTime(OffsetDateTime submittedTime) {
    this.submittedTime = submittedTime;
  }


  public ComplaintResponse complaint(Complaint complaint) {
    
    this.complaint = complaint;
    return this;
  }

   /**
   * Get complaint
   * @return complaint
  **/
  @javax.annotation.Nullable

  public Complaint getComplaint() {
    return complaint;
  }


  public void setComplaint(Complaint complaint) {
    this.complaint = complaint;
  }


  public ComplaintResponse reviewer(User reviewer) {
    
    this.reviewer = reviewer;
    return this;
  }

   /**
   * Get reviewer
   * @return reviewer
  **/
  @javax.annotation.Nullable

  public User getReviewer() {
    return reviewer;
  }


  public void setReviewer(User reviewer) {
    this.reviewer = reviewer;
  }


  public ComplaintResponse isCurrentlyLocked(Boolean isCurrentlyLocked) {
    
    this.isCurrentlyLocked = isCurrentlyLocked;
    return this;
  }

   /**
   * Get isCurrentlyLocked
   * @return isCurrentlyLocked
  **/
  @javax.annotation.Nullable

  public Boolean getIsCurrentlyLocked() {
    return isCurrentlyLocked;
  }


  public void setIsCurrentlyLocked(Boolean isCurrentlyLocked) {
    this.isCurrentlyLocked = isCurrentlyLocked;
  }


  public ComplaintResponse lockEndDate(OffsetDateTime lockEndDate) {
    
    this.lockEndDate = lockEndDate;
    return this;
  }

   /**
   * Get lockEndDate
   * @return lockEndDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getLockEndDate() {
    return lockEndDate;
  }


  public void setLockEndDate(OffsetDateTime lockEndDate) {
    this.lockEndDate = lockEndDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplaintResponse complaintResponse = (ComplaintResponse) o;
    return Objects.equals(this.id, complaintResponse.id) &&
        Objects.equals(this.responseText, complaintResponse.responseText) &&
        Objects.equals(this.submittedTime, complaintResponse.submittedTime) &&
        Objects.equals(this.complaint, complaintResponse.complaint) &&
        Objects.equals(this.reviewer, complaintResponse.reviewer) &&
        Objects.equals(this.isCurrentlyLocked, complaintResponse.isCurrentlyLocked) &&
        Objects.equals(this.lockEndDate, complaintResponse.lockEndDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, responseText, submittedTime, complaint, reviewer, isCurrentlyLocked, lockEndDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplaintResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    responseText: ").append(toIndentedString(responseText)).append("\n");
    sb.append("    submittedTime: ").append(toIndentedString(submittedTime)).append("\n");
    sb.append("    complaint: ").append(toIndentedString(complaint)).append("\n");
    sb.append("    reviewer: ").append(toIndentedString(reviewer)).append("\n");
    sb.append("    isCurrentlyLocked: ").append(toIndentedString(isCurrentlyLocked)).append("\n");
    sb.append("    lockEndDate: ").append(toIndentedString(lockEndDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("responseText");
    openapiFields.add("submittedTime");
    openapiFields.add("complaint");
    openapiFields.add("reviewer");
    openapiFields.add("isCurrentlyLocked");
    openapiFields.add("lockEndDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ComplaintResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ComplaintResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplaintResponse is not found in the empty JSON string", ComplaintResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ComplaintResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComplaintResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("responseText") != null && !jsonObj.get("responseText").isJsonNull()) && !jsonObj.get("responseText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseText").toString()));
      }
      // validate the optional field `complaint`
      if (jsonObj.get("complaint") != null && !jsonObj.get("complaint").isJsonNull()) {
        Complaint.validateJsonObject(jsonObj.getAsJsonObject("complaint"));
      }
      // validate the optional field `reviewer`
      if (jsonObj.get("reviewer") != null && !jsonObj.get("reviewer").isJsonNull()) {
        User.validateJsonObject(jsonObj.getAsJsonObject("reviewer"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComplaintResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComplaintResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComplaintResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComplaintResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ComplaintResponse>() {
           @Override
           public void write(JsonWriter out, ComplaintResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComplaintResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ComplaintResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ComplaintResponse
  * @throws IOException if the JSON string is invalid with respect to ComplaintResponse
  */
  public static ComplaintResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplaintResponse.class);
  }

 /**
  * Convert an instance of ComplaintResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

