/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NotificationTarget
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class NotificationTarget {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private String entity;

  public static final String SERIALIZED_NAME_MAIN_PAGE = "mainPage";
  @SerializedName(SERIALIZED_NAME_MAIN_PAGE)
  private String mainPage;

  public static final String SERIALIZED_NAME_PROBLEM_STATEMENT = "problemStatement";
  @SerializedName(SERIALIZED_NAME_PROBLEM_STATEMENT)
  private String problemStatement;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_COURSE = "course";
  @SerializedName(SERIALIZED_NAME_COURSE)
  private Long course;

  public static final String SERIALIZED_NAME_EXERCISE = "exercise";
  @SerializedName(SERIALIZED_NAME_EXERCISE)
  private Long exercise;

  public static final String SERIALIZED_NAME_EXAM = "exam";
  @SerializedName(SERIALIZED_NAME_EXAM)
  private Long exam;

  public static final String SERIALIZED_NAME_LECTURE = "lecture";
  @SerializedName(SERIALIZED_NAME_LECTURE)
  private Long lecture;

  public NotificationTarget() {
  }

  public NotificationTarget message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public NotificationTarget entity(String entity) {
    
    this.entity = entity;
    return this;
  }

   /**
   * Get entity
   * @return entity
  **/
  @javax.annotation.Nullable

  public String getEntity() {
    return entity;
  }


  public void setEntity(String entity) {
    this.entity = entity;
  }


  public NotificationTarget mainPage(String mainPage) {
    
    this.mainPage = mainPage;
    return this;
  }

   /**
   * Get mainPage
   * @return mainPage
  **/
  @javax.annotation.Nullable

  public String getMainPage() {
    return mainPage;
  }


  public void setMainPage(String mainPage) {
    this.mainPage = mainPage;
  }


  public NotificationTarget problemStatement(String problemStatement) {
    
    this.problemStatement = problemStatement;
    return this;
  }

   /**
   * Get problemStatement
   * @return problemStatement
  **/
  @javax.annotation.Nullable

  public String getProblemStatement() {
    return problemStatement;
  }


  public void setProblemStatement(String problemStatement) {
    this.problemStatement = problemStatement;
  }


  public NotificationTarget id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public NotificationTarget course(Long course) {
    
    this.course = course;
    return this;
  }

   /**
   * Get course
   * @return course
  **/
  @javax.annotation.Nullable

  public Long getCourse() {
    return course;
  }


  public void setCourse(Long course) {
    this.course = course;
  }


  public NotificationTarget exercise(Long exercise) {
    
    this.exercise = exercise;
    return this;
  }

   /**
   * Get exercise
   * @return exercise
  **/
  @javax.annotation.Nullable

  public Long getExercise() {
    return exercise;
  }


  public void setExercise(Long exercise) {
    this.exercise = exercise;
  }


  public NotificationTarget exam(Long exam) {
    
    this.exam = exam;
    return this;
  }

   /**
   * Get exam
   * @return exam
  **/
  @javax.annotation.Nullable

  public Long getExam() {
    return exam;
  }


  public void setExam(Long exam) {
    this.exam = exam;
  }


  public NotificationTarget lecture(Long lecture) {
    
    this.lecture = lecture;
    return this;
  }

   /**
   * Get lecture
   * @return lecture
  **/
  @javax.annotation.Nullable

  public Long getLecture() {
    return lecture;
  }


  public void setLecture(Long lecture) {
    this.lecture = lecture;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationTarget notificationTarget = (NotificationTarget) o;
    return Objects.equals(this.message, notificationTarget.message) &&
        Objects.equals(this.entity, notificationTarget.entity) &&
        Objects.equals(this.mainPage, notificationTarget.mainPage) &&
        Objects.equals(this.problemStatement, notificationTarget.problemStatement) &&
        Objects.equals(this.id, notificationTarget.id) &&
        Objects.equals(this.course, notificationTarget.course) &&
        Objects.equals(this.exercise, notificationTarget.exercise) &&
        Objects.equals(this.exam, notificationTarget.exam) &&
        Objects.equals(this.lecture, notificationTarget.lecture);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, entity, mainPage, problemStatement, id, course, exercise, exam, lecture);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationTarget {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    mainPage: ").append(toIndentedString(mainPage)).append("\n");
    sb.append("    problemStatement: ").append(toIndentedString(problemStatement)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    exercise: ").append(toIndentedString(exercise)).append("\n");
    sb.append("    exam: ").append(toIndentedString(exam)).append("\n");
    sb.append("    lecture: ").append(toIndentedString(lecture)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message");
    openapiFields.add("entity");
    openapiFields.add("mainPage");
    openapiFields.add("problemStatement");
    openapiFields.add("id");
    openapiFields.add("course");
    openapiFields.add("exercise");
    openapiFields.add("exam");
    openapiFields.add("lecture");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NotificationTarget
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NotificationTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationTarget is not found in the empty JSON string", NotificationTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NotificationTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationTarget` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("entity") != null && !jsonObj.get("entity").isJsonNull()) && !jsonObj.get("entity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity").toString()));
      }
      if ((jsonObj.get("mainPage") != null && !jsonObj.get("mainPage").isJsonNull()) && !jsonObj.get("mainPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mainPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mainPage").toString()));
      }
      if ((jsonObj.get("problemStatement") != null && !jsonObj.get("problemStatement").isJsonNull()) && !jsonObj.get("problemStatement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `problemStatement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("problemStatement").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationTarget>() {
           @Override
           public void write(JsonWriter out, NotificationTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationTarget read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NotificationTarget given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NotificationTarget
  * @throws IOException if the JSON string is invalid with respect to NotificationTarget
  */
  public static NotificationTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationTarget.class);
  }

 /**
  * Convert an instance of NotificationTarget to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

