/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.GradingScale;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GradeStep
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class GradeStep {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_GRADING_SCALE = "gradingScale";
  @SerializedName(SERIALIZED_NAME_GRADING_SCALE)
  private GradingScale gradingScale;

  public static final String SERIALIZED_NAME_LOWER_BOUND_PERCENTAGE = "lowerBoundPercentage";
  @SerializedName(SERIALIZED_NAME_LOWER_BOUND_PERCENTAGE)
  private Double lowerBoundPercentage;

  public static final String SERIALIZED_NAME_LOWER_BOUND_INCLUSIVE = "lowerBoundInclusive";
  @SerializedName(SERIALIZED_NAME_LOWER_BOUND_INCLUSIVE)
  private Boolean lowerBoundInclusive;

  public static final String SERIALIZED_NAME_UPPER_BOUND_PERCENTAGE = "upperBoundPercentage";
  @SerializedName(SERIALIZED_NAME_UPPER_BOUND_PERCENTAGE)
  private Double upperBoundPercentage;

  public static final String SERIALIZED_NAME_UPPER_BOUND_INCLUSIVE = "upperBoundInclusive";
  @SerializedName(SERIALIZED_NAME_UPPER_BOUND_INCLUSIVE)
  private Boolean upperBoundInclusive;

  public static final String SERIALIZED_NAME_GRADE_NAME = "gradeName";
  @SerializedName(SERIALIZED_NAME_GRADE_NAME)
  private String gradeName;

  public static final String SERIALIZED_NAME_IS_PASSING_GRADE = "isPassingGrade";
  @SerializedName(SERIALIZED_NAME_IS_PASSING_GRADE)
  private Boolean isPassingGrade;

  public static final String SERIALIZED_NAME_NUMERIC_VALUE = "numericValue";
  @SerializedName(SERIALIZED_NAME_NUMERIC_VALUE)
  private Double numericValue;

  public GradeStep() {
  }

  public GradeStep id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public GradeStep gradingScale(GradingScale gradingScale) {
    
    this.gradingScale = gradingScale;
    return this;
  }

   /**
   * Get gradingScale
   * @return gradingScale
  **/
  @javax.annotation.Nullable

  public GradingScale getGradingScale() {
    return gradingScale;
  }


  public void setGradingScale(GradingScale gradingScale) {
    this.gradingScale = gradingScale;
  }


  public GradeStep lowerBoundPercentage(Double lowerBoundPercentage) {
    
    this.lowerBoundPercentage = lowerBoundPercentage;
    return this;
  }

   /**
   * Get lowerBoundPercentage
   * @return lowerBoundPercentage
  **/
  @javax.annotation.Nullable

  public Double getLowerBoundPercentage() {
    return lowerBoundPercentage;
  }


  public void setLowerBoundPercentage(Double lowerBoundPercentage) {
    this.lowerBoundPercentage = lowerBoundPercentage;
  }


  public GradeStep lowerBoundInclusive(Boolean lowerBoundInclusive) {
    
    this.lowerBoundInclusive = lowerBoundInclusive;
    return this;
  }

   /**
   * Get lowerBoundInclusive
   * @return lowerBoundInclusive
  **/
  @javax.annotation.Nullable

  public Boolean getLowerBoundInclusive() {
    return lowerBoundInclusive;
  }


  public void setLowerBoundInclusive(Boolean lowerBoundInclusive) {
    this.lowerBoundInclusive = lowerBoundInclusive;
  }


  public GradeStep upperBoundPercentage(Double upperBoundPercentage) {
    
    this.upperBoundPercentage = upperBoundPercentage;
    return this;
  }

   /**
   * Get upperBoundPercentage
   * @return upperBoundPercentage
  **/
  @javax.annotation.Nullable

  public Double getUpperBoundPercentage() {
    return upperBoundPercentage;
  }


  public void setUpperBoundPercentage(Double upperBoundPercentage) {
    this.upperBoundPercentage = upperBoundPercentage;
  }


  public GradeStep upperBoundInclusive(Boolean upperBoundInclusive) {
    
    this.upperBoundInclusive = upperBoundInclusive;
    return this;
  }

   /**
   * Get upperBoundInclusive
   * @return upperBoundInclusive
  **/
  @javax.annotation.Nullable

  public Boolean getUpperBoundInclusive() {
    return upperBoundInclusive;
  }


  public void setUpperBoundInclusive(Boolean upperBoundInclusive) {
    this.upperBoundInclusive = upperBoundInclusive;
  }


  public GradeStep gradeName(String gradeName) {
    
    this.gradeName = gradeName;
    return this;
  }

   /**
   * Get gradeName
   * @return gradeName
  **/
  @javax.annotation.Nullable

  public String getGradeName() {
    return gradeName;
  }


  public void setGradeName(String gradeName) {
    this.gradeName = gradeName;
  }


  public GradeStep isPassingGrade(Boolean isPassingGrade) {
    
    this.isPassingGrade = isPassingGrade;
    return this;
  }

   /**
   * Get isPassingGrade
   * @return isPassingGrade
  **/
  @javax.annotation.Nullable

  public Boolean getIsPassingGrade() {
    return isPassingGrade;
  }


  public void setIsPassingGrade(Boolean isPassingGrade) {
    this.isPassingGrade = isPassingGrade;
  }


  public GradeStep numericValue(Double numericValue) {
    
    this.numericValue = numericValue;
    return this;
  }

   /**
   * Get numericValue
   * @return numericValue
  **/
  @javax.annotation.Nullable

  public Double getNumericValue() {
    return numericValue;
  }


  public void setNumericValue(Double numericValue) {
    this.numericValue = numericValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GradeStep gradeStep = (GradeStep) o;
    return Objects.equals(this.id, gradeStep.id) &&
        Objects.equals(this.gradingScale, gradeStep.gradingScale) &&
        Objects.equals(this.lowerBoundPercentage, gradeStep.lowerBoundPercentage) &&
        Objects.equals(this.lowerBoundInclusive, gradeStep.lowerBoundInclusive) &&
        Objects.equals(this.upperBoundPercentage, gradeStep.upperBoundPercentage) &&
        Objects.equals(this.upperBoundInclusive, gradeStep.upperBoundInclusive) &&
        Objects.equals(this.gradeName, gradeStep.gradeName) &&
        Objects.equals(this.isPassingGrade, gradeStep.isPassingGrade) &&
        Objects.equals(this.numericValue, gradeStep.numericValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, gradingScale, lowerBoundPercentage, lowerBoundInclusive, upperBoundPercentage, upperBoundInclusive, gradeName, isPassingGrade, numericValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GradeStep {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    gradingScale: ").append(toIndentedString(gradingScale)).append("\n");
    sb.append("    lowerBoundPercentage: ").append(toIndentedString(lowerBoundPercentage)).append("\n");
    sb.append("    lowerBoundInclusive: ").append(toIndentedString(lowerBoundInclusive)).append("\n");
    sb.append("    upperBoundPercentage: ").append(toIndentedString(upperBoundPercentage)).append("\n");
    sb.append("    upperBoundInclusive: ").append(toIndentedString(upperBoundInclusive)).append("\n");
    sb.append("    gradeName: ").append(toIndentedString(gradeName)).append("\n");
    sb.append("    isPassingGrade: ").append(toIndentedString(isPassingGrade)).append("\n");
    sb.append("    numericValue: ").append(toIndentedString(numericValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("gradingScale");
    openapiFields.add("lowerBoundPercentage");
    openapiFields.add("lowerBoundInclusive");
    openapiFields.add("upperBoundPercentage");
    openapiFields.add("upperBoundInclusive");
    openapiFields.add("gradeName");
    openapiFields.add("isPassingGrade");
    openapiFields.add("numericValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GradeStep
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GradeStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GradeStep is not found in the empty JSON string", GradeStep.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GradeStep.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GradeStep` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `gradingScale`
      if (jsonObj.get("gradingScale") != null && !jsonObj.get("gradingScale").isJsonNull()) {
        GradingScale.validateJsonObject(jsonObj.getAsJsonObject("gradingScale"));
      }
      if ((jsonObj.get("gradeName") != null && !jsonObj.get("gradeName").isJsonNull()) && !jsonObj.get("gradeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gradeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gradeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GradeStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GradeStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GradeStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GradeStep.class));

       return (TypeAdapter<T>) new TypeAdapter<GradeStep>() {
           @Override
           public void write(JsonWriter out, GradeStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GradeStep read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GradeStep given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GradeStep
  * @throws IOException if the JSON string is invalid with respect to GradeStep
  */
  public static GradeStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GradeStep.class);
  }

 /**
  * Convert an instance of GradeStep to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

