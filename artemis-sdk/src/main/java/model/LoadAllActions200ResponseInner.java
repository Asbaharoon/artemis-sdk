/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ConnectionUpdatedAction;
import org.openapitools.client.model.ContinuedAfterHandedInEarlyAction;
import org.openapitools.client.model.EndedExamAction;
import org.openapitools.client.model.ExamAction;
import org.openapitools.client.model.HandedInEarlyAction;
import org.openapitools.client.model.SavedExerciseAction;
import org.openapitools.client.model.StartedExamAction;
import org.openapitools.client.model.SwitchedExerciseAction;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class LoadAllActions200ResponseInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(LoadAllActions200ResponseInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!LoadAllActions200ResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'LoadAllActions200ResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ConnectionUpdatedAction> adapterConnectionUpdatedAction = gson.getDelegateAdapter(this, TypeToken.get(ConnectionUpdatedAction.class));
            final TypeAdapter<ContinuedAfterHandedInEarlyAction> adapterContinuedAfterHandedInEarlyAction = gson.getDelegateAdapter(this, TypeToken.get(ContinuedAfterHandedInEarlyAction.class));
            final TypeAdapter<EndedExamAction> adapterEndedExamAction = gson.getDelegateAdapter(this, TypeToken.get(EndedExamAction.class));
            final TypeAdapter<ExamAction> adapterExamAction = gson.getDelegateAdapter(this, TypeToken.get(ExamAction.class));
            final TypeAdapter<HandedInEarlyAction> adapterHandedInEarlyAction = gson.getDelegateAdapter(this, TypeToken.get(HandedInEarlyAction.class));
            final TypeAdapter<SavedExerciseAction> adapterSavedExerciseAction = gson.getDelegateAdapter(this, TypeToken.get(SavedExerciseAction.class));
            final TypeAdapter<StartedExamAction> adapterStartedExamAction = gson.getDelegateAdapter(this, TypeToken.get(StartedExamAction.class));
            final TypeAdapter<SwitchedExerciseAction> adapterSwitchedExerciseAction = gson.getDelegateAdapter(this, TypeToken.get(SwitchedExerciseAction.class));

            return (TypeAdapter<T>) new TypeAdapter<LoadAllActions200ResponseInner>() {
                @Override
                public void write(JsonWriter out, LoadAllActions200ResponseInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ConnectionUpdatedAction`
                    if (value.getActualInstance() instanceof ConnectionUpdatedAction) {
                        JsonObject obj = adapterConnectionUpdatedAction.toJsonTree((ConnectionUpdatedAction)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ContinuedAfterHandedInEarlyAction`
                    if (value.getActualInstance() instanceof ContinuedAfterHandedInEarlyAction) {
                        JsonObject obj = adapterContinuedAfterHandedInEarlyAction.toJsonTree((ContinuedAfterHandedInEarlyAction)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `EndedExamAction`
                    if (value.getActualInstance() instanceof EndedExamAction) {
                        JsonObject obj = adapterEndedExamAction.toJsonTree((EndedExamAction)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ExamAction`
                    if (value.getActualInstance() instanceof ExamAction) {
                        JsonObject obj = adapterExamAction.toJsonTree((ExamAction)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `HandedInEarlyAction`
                    if (value.getActualInstance() instanceof HandedInEarlyAction) {
                        JsonObject obj = adapterHandedInEarlyAction.toJsonTree((HandedInEarlyAction)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SavedExerciseAction`
                    if (value.getActualInstance() instanceof SavedExerciseAction) {
                        JsonObject obj = adapterSavedExerciseAction.toJsonTree((SavedExerciseAction)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `StartedExamAction`
                    if (value.getActualInstance() instanceof StartedExamAction) {
                        JsonObject obj = adapterStartedExamAction.toJsonTree((StartedExamAction)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SwitchedExerciseAction`
                    if (value.getActualInstance() instanceof SwitchedExerciseAction) {
                        JsonObject obj = adapterSwitchedExerciseAction.toJsonTree((SwitchedExerciseAction)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ConnectionUpdatedAction, ContinuedAfterHandedInEarlyAction, EndedExamAction, ExamAction, HandedInEarlyAction, SavedExerciseAction, StartedExamAction, SwitchedExerciseAction");
                }

                @Override
                public LoadAllActions200ResponseInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ConnectionUpdatedAction
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectionUpdatedAction.validateJsonObject(jsonObject);
                        actualAdapter = adapterConnectionUpdatedAction;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectionUpdatedAction'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectionUpdatedAction failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectionUpdatedAction'", e);
                    }

                    // deserialize ContinuedAfterHandedInEarlyAction
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ContinuedAfterHandedInEarlyAction.validateJsonObject(jsonObject);
                        actualAdapter = adapterContinuedAfterHandedInEarlyAction;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ContinuedAfterHandedInEarlyAction'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ContinuedAfterHandedInEarlyAction failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ContinuedAfterHandedInEarlyAction'", e);
                    }

                    // deserialize EndedExamAction
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EndedExamAction.validateJsonObject(jsonObject);
                        actualAdapter = adapterEndedExamAction;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EndedExamAction'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EndedExamAction failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EndedExamAction'", e);
                    }

                    // deserialize ExamAction
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ExamAction.validateJsonObject(jsonObject);
                        actualAdapter = adapterExamAction;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ExamAction'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ExamAction failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ExamAction'", e);
                    }

                    // deserialize HandedInEarlyAction
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HandedInEarlyAction.validateJsonObject(jsonObject);
                        actualAdapter = adapterHandedInEarlyAction;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HandedInEarlyAction'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HandedInEarlyAction failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HandedInEarlyAction'", e);
                    }

                    // deserialize SavedExerciseAction
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SavedExerciseAction.validateJsonObject(jsonObject);
                        actualAdapter = adapterSavedExerciseAction;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SavedExerciseAction'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SavedExerciseAction failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SavedExerciseAction'", e);
                    }

                    // deserialize StartedExamAction
                    try {
                        // validate the JSON object to see if any exception is thrown
                        StartedExamAction.validateJsonObject(jsonObject);
                        actualAdapter = adapterStartedExamAction;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'StartedExamAction'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for StartedExamAction failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'StartedExamAction'", e);
                    }

                    // deserialize SwitchedExerciseAction
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SwitchedExerciseAction.validateJsonObject(jsonObject);
                        actualAdapter = adapterSwitchedExerciseAction;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SwitchedExerciseAction'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SwitchedExerciseAction failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SwitchedExerciseAction'", e);
                    }

                    if (match == 1) {
                        LoadAllActions200ResponseInner ret = new LoadAllActions200ResponseInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for LoadAllActions200ResponseInner: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public LoadAllActions200ResponseInner() {
        super("oneOf", Boolean.FALSE);
    }

    public LoadAllActions200ResponseInner(ConnectionUpdatedAction o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public LoadAllActions200ResponseInner(ContinuedAfterHandedInEarlyAction o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public LoadAllActions200ResponseInner(EndedExamAction o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public LoadAllActions200ResponseInner(ExamAction o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public LoadAllActions200ResponseInner(HandedInEarlyAction o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public LoadAllActions200ResponseInner(SavedExerciseAction o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public LoadAllActions200ResponseInner(StartedExamAction o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public LoadAllActions200ResponseInner(SwitchedExerciseAction o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ConnectionUpdatedAction", new GenericType<ConnectionUpdatedAction>() {
        });
        schemas.put("ContinuedAfterHandedInEarlyAction", new GenericType<ContinuedAfterHandedInEarlyAction>() {
        });
        schemas.put("EndedExamAction", new GenericType<EndedExamAction>() {
        });
        schemas.put("ExamAction", new GenericType<ExamAction>() {
        });
        schemas.put("HandedInEarlyAction", new GenericType<HandedInEarlyAction>() {
        });
        schemas.put("SavedExerciseAction", new GenericType<SavedExerciseAction>() {
        });
        schemas.put("StartedExamAction", new GenericType<StartedExamAction>() {
        });
        schemas.put("SwitchedExerciseAction", new GenericType<SwitchedExerciseAction>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return LoadAllActions200ResponseInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ConnectionUpdatedAction, ContinuedAfterHandedInEarlyAction, EndedExamAction, ExamAction, HandedInEarlyAction, SavedExerciseAction, StartedExamAction, SwitchedExerciseAction
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ConnectionUpdatedAction) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ContinuedAfterHandedInEarlyAction) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EndedExamAction) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExamAction) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof HandedInEarlyAction) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SavedExerciseAction) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StartedExamAction) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SwitchedExerciseAction) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ConnectionUpdatedAction, ContinuedAfterHandedInEarlyAction, EndedExamAction, ExamAction, HandedInEarlyAction, SavedExerciseAction, StartedExamAction, SwitchedExerciseAction");
    }

    /**
     * Get the actual instance, which can be the following:
     * ConnectionUpdatedAction, ContinuedAfterHandedInEarlyAction, EndedExamAction, ExamAction, HandedInEarlyAction, SavedExerciseAction, StartedExamAction, SwitchedExerciseAction
     *
     * @return The actual instance (ConnectionUpdatedAction, ContinuedAfterHandedInEarlyAction, EndedExamAction, ExamAction, HandedInEarlyAction, SavedExerciseAction, StartedExamAction, SwitchedExerciseAction)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ConnectionUpdatedAction`. If the actual instance is not `ConnectionUpdatedAction`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectionUpdatedAction`
     * @throws ClassCastException if the instance is not `ConnectionUpdatedAction`
     */
    public ConnectionUpdatedAction getConnectionUpdatedAction() throws ClassCastException {
        return (ConnectionUpdatedAction)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ContinuedAfterHandedInEarlyAction`. If the actual instance is not `ContinuedAfterHandedInEarlyAction`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ContinuedAfterHandedInEarlyAction`
     * @throws ClassCastException if the instance is not `ContinuedAfterHandedInEarlyAction`
     */
    public ContinuedAfterHandedInEarlyAction getContinuedAfterHandedInEarlyAction() throws ClassCastException {
        return (ContinuedAfterHandedInEarlyAction)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EndedExamAction`. If the actual instance is not `EndedExamAction`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndedExamAction`
     * @throws ClassCastException if the instance is not `EndedExamAction`
     */
    public EndedExamAction getEndedExamAction() throws ClassCastException {
        return (EndedExamAction)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExamAction`. If the actual instance is not `ExamAction`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExamAction`
     * @throws ClassCastException if the instance is not `ExamAction`
     */
    public ExamAction getExamAction() throws ClassCastException {
        return (ExamAction)super.getActualInstance();
    }

    /**
     * Get the actual instance of `HandedInEarlyAction`. If the actual instance is not `HandedInEarlyAction`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HandedInEarlyAction`
     * @throws ClassCastException if the instance is not `HandedInEarlyAction`
     */
    public HandedInEarlyAction getHandedInEarlyAction() throws ClassCastException {
        return (HandedInEarlyAction)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SavedExerciseAction`. If the actual instance is not `SavedExerciseAction`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SavedExerciseAction`
     * @throws ClassCastException if the instance is not `SavedExerciseAction`
     */
    public SavedExerciseAction getSavedExerciseAction() throws ClassCastException {
        return (SavedExerciseAction)super.getActualInstance();
    }

    /**
     * Get the actual instance of `StartedExamAction`. If the actual instance is not `StartedExamAction`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StartedExamAction`
     * @throws ClassCastException if the instance is not `StartedExamAction`
     */
    public StartedExamAction getStartedExamAction() throws ClassCastException {
        return (StartedExamAction)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SwitchedExerciseAction`. If the actual instance is not `SwitchedExerciseAction`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SwitchedExerciseAction`
     * @throws ClassCastException if the instance is not `SwitchedExerciseAction`
     */
    public SwitchedExerciseAction getSwitchedExerciseAction() throws ClassCastException {
        return (SwitchedExerciseAction)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LoadAllActions200ResponseInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with ConnectionUpdatedAction
    try {
      ConnectionUpdatedAction.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ConnectionUpdatedAction failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ContinuedAfterHandedInEarlyAction
    try {
      ContinuedAfterHandedInEarlyAction.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ContinuedAfterHandedInEarlyAction failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EndedExamAction
    try {
      EndedExamAction.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EndedExamAction failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExamAction
    try {
      ExamAction.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExamAction failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with HandedInEarlyAction
    try {
      HandedInEarlyAction.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for HandedInEarlyAction failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SavedExerciseAction
    try {
      SavedExerciseAction.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SavedExerciseAction failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with StartedExamAction
    try {
      StartedExamAction.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for StartedExamAction failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SwitchedExerciseAction
    try {
      SwitchedExerciseAction.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SwitchedExerciseAction failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for LoadAllActions200ResponseInner with oneOf schemas: ConnectionUpdatedAction, ContinuedAfterHandedInEarlyAction, EndedExamAction, ExamAction, HandedInEarlyAction, SavedExerciseAction, StartedExamAction, SwitchedExerciseAction. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of LoadAllActions200ResponseInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoadAllActions200ResponseInner
  * @throws IOException if the JSON string is invalid with respect to LoadAllActions200ResponseInner
  */
  public static LoadAllActions200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadAllActions200ResponseInner.class);
  }

 /**
  * Convert an instance of LoadAllActions200ResponseInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

