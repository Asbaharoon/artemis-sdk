/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OnlineCourseConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class OnlineCourseConfiguration {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LTI_KEY = "ltiKey";
  @SerializedName(SERIALIZED_NAME_LTI_KEY)
  private String ltiKey;

  public static final String SERIALIZED_NAME_LTI_SECRET = "ltiSecret";
  @SerializedName(SERIALIZED_NAME_LTI_SECRET)
  private String ltiSecret;

  public static final String SERIALIZED_NAME_USER_PREFIX = "userPrefix";
  @SerializedName(SERIALIZED_NAME_USER_PREFIX)
  private String userPrefix;

  public static final String SERIALIZED_NAME_REQUIRE_EXISTING_USER = "requireExistingUser";
  @SerializedName(SERIALIZED_NAME_REQUIRE_EXISTING_USER)
  private Boolean requireExistingUser;

  public static final String SERIALIZED_NAME_ORIGINAL_URL = "originalUrl";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_URL)
  private String originalUrl;

  public static final String SERIALIZED_NAME_REGISTRATION_ID = "registrationId";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ID)
  private String registrationId;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_AUTHORIZATION_URI = "authorizationUri";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_URI)
  private String authorizationUri;

  public static final String SERIALIZED_NAME_JWK_SET_URI = "jwkSetUri";
  @SerializedName(SERIALIZED_NAME_JWK_SET_URI)
  private String jwkSetUri;

  public static final String SERIALIZED_NAME_TOKEN_URI = "tokenUri";
  @SerializedName(SERIALIZED_NAME_TOKEN_URI)
  private String tokenUri;

  public OnlineCourseConfiguration() {
  }

  public OnlineCourseConfiguration id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public OnlineCourseConfiguration ltiKey(String ltiKey) {
    
    this.ltiKey = ltiKey;
    return this;
  }

   /**
   * Get ltiKey
   * @return ltiKey
  **/
  @javax.annotation.Nullable

  public String getLtiKey() {
    return ltiKey;
  }


  public void setLtiKey(String ltiKey) {
    this.ltiKey = ltiKey;
  }


  public OnlineCourseConfiguration ltiSecret(String ltiSecret) {
    
    this.ltiSecret = ltiSecret;
    return this;
  }

   /**
   * Get ltiSecret
   * @return ltiSecret
  **/
  @javax.annotation.Nullable

  public String getLtiSecret() {
    return ltiSecret;
  }


  public void setLtiSecret(String ltiSecret) {
    this.ltiSecret = ltiSecret;
  }


  public OnlineCourseConfiguration userPrefix(String userPrefix) {
    
    this.userPrefix = userPrefix;
    return this;
  }

   /**
   * Get userPrefix
   * @return userPrefix
  **/
  @javax.annotation.Nullable

  public String getUserPrefix() {
    return userPrefix;
  }


  public void setUserPrefix(String userPrefix) {
    this.userPrefix = userPrefix;
  }


  public OnlineCourseConfiguration requireExistingUser(Boolean requireExistingUser) {
    
    this.requireExistingUser = requireExistingUser;
    return this;
  }

   /**
   * Get requireExistingUser
   * @return requireExistingUser
  **/
  @javax.annotation.Nullable

  public Boolean getRequireExistingUser() {
    return requireExistingUser;
  }


  public void setRequireExistingUser(Boolean requireExistingUser) {
    this.requireExistingUser = requireExistingUser;
  }


  public OnlineCourseConfiguration originalUrl(String originalUrl) {
    
    this.originalUrl = originalUrl;
    return this;
  }

   /**
   * Get originalUrl
   * @return originalUrl
  **/
  @javax.annotation.Nullable

  public String getOriginalUrl() {
    return originalUrl;
  }


  public void setOriginalUrl(String originalUrl) {
    this.originalUrl = originalUrl;
  }


  public OnlineCourseConfiguration registrationId(String registrationId) {
    
    this.registrationId = registrationId;
    return this;
  }

   /**
   * Get registrationId
   * @return registrationId
  **/
  @javax.annotation.Nullable

  public String getRegistrationId() {
    return registrationId;
  }


  public void setRegistrationId(String registrationId) {
    this.registrationId = registrationId;
  }


  public OnlineCourseConfiguration clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @javax.annotation.Nullable

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public OnlineCourseConfiguration authorizationUri(String authorizationUri) {
    
    this.authorizationUri = authorizationUri;
    return this;
  }

   /**
   * Get authorizationUri
   * @return authorizationUri
  **/
  @javax.annotation.Nullable

  public String getAuthorizationUri() {
    return authorizationUri;
  }


  public void setAuthorizationUri(String authorizationUri) {
    this.authorizationUri = authorizationUri;
  }


  public OnlineCourseConfiguration jwkSetUri(String jwkSetUri) {
    
    this.jwkSetUri = jwkSetUri;
    return this;
  }

   /**
   * Get jwkSetUri
   * @return jwkSetUri
  **/
  @javax.annotation.Nullable

  public String getJwkSetUri() {
    return jwkSetUri;
  }


  public void setJwkSetUri(String jwkSetUri) {
    this.jwkSetUri = jwkSetUri;
  }


  public OnlineCourseConfiguration tokenUri(String tokenUri) {
    
    this.tokenUri = tokenUri;
    return this;
  }

   /**
   * Get tokenUri
   * @return tokenUri
  **/
  @javax.annotation.Nullable

  public String getTokenUri() {
    return tokenUri;
  }


  public void setTokenUri(String tokenUri) {
    this.tokenUri = tokenUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnlineCourseConfiguration onlineCourseConfiguration = (OnlineCourseConfiguration) o;
    return Objects.equals(this.id, onlineCourseConfiguration.id) &&
        Objects.equals(this.ltiKey, onlineCourseConfiguration.ltiKey) &&
        Objects.equals(this.ltiSecret, onlineCourseConfiguration.ltiSecret) &&
        Objects.equals(this.userPrefix, onlineCourseConfiguration.userPrefix) &&
        Objects.equals(this.requireExistingUser, onlineCourseConfiguration.requireExistingUser) &&
        Objects.equals(this.originalUrl, onlineCourseConfiguration.originalUrl) &&
        Objects.equals(this.registrationId, onlineCourseConfiguration.registrationId) &&
        Objects.equals(this.clientId, onlineCourseConfiguration.clientId) &&
        Objects.equals(this.authorizationUri, onlineCourseConfiguration.authorizationUri) &&
        Objects.equals(this.jwkSetUri, onlineCourseConfiguration.jwkSetUri) &&
        Objects.equals(this.tokenUri, onlineCourseConfiguration.tokenUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, ltiKey, ltiSecret, userPrefix, requireExistingUser, originalUrl, registrationId, clientId, authorizationUri, jwkSetUri, tokenUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnlineCourseConfiguration {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ltiKey: ").append(toIndentedString(ltiKey)).append("\n");
    sb.append("    ltiSecret: ").append(toIndentedString(ltiSecret)).append("\n");
    sb.append("    userPrefix: ").append(toIndentedString(userPrefix)).append("\n");
    sb.append("    requireExistingUser: ").append(toIndentedString(requireExistingUser)).append("\n");
    sb.append("    originalUrl: ").append(toIndentedString(originalUrl)).append("\n");
    sb.append("    registrationId: ").append(toIndentedString(registrationId)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    authorizationUri: ").append(toIndentedString(authorizationUri)).append("\n");
    sb.append("    jwkSetUri: ").append(toIndentedString(jwkSetUri)).append("\n");
    sb.append("    tokenUri: ").append(toIndentedString(tokenUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("ltiKey");
    openapiFields.add("ltiSecret");
    openapiFields.add("userPrefix");
    openapiFields.add("requireExistingUser");
    openapiFields.add("originalUrl");
    openapiFields.add("registrationId");
    openapiFields.add("clientId");
    openapiFields.add("authorizationUri");
    openapiFields.add("jwkSetUri");
    openapiFields.add("tokenUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OnlineCourseConfiguration
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OnlineCourseConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnlineCourseConfiguration is not found in the empty JSON string", OnlineCourseConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OnlineCourseConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OnlineCourseConfiguration` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("ltiKey") != null && !jsonObj.get("ltiKey").isJsonNull()) && !jsonObj.get("ltiKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ltiKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ltiKey").toString()));
      }
      if ((jsonObj.get("ltiSecret") != null && !jsonObj.get("ltiSecret").isJsonNull()) && !jsonObj.get("ltiSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ltiSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ltiSecret").toString()));
      }
      if ((jsonObj.get("userPrefix") != null && !jsonObj.get("userPrefix").isJsonNull()) && !jsonObj.get("userPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userPrefix").toString()));
      }
      if ((jsonObj.get("originalUrl") != null && !jsonObj.get("originalUrl").isJsonNull()) && !jsonObj.get("originalUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalUrl").toString()));
      }
      if ((jsonObj.get("registrationId") != null && !jsonObj.get("registrationId").isJsonNull()) && !jsonObj.get("registrationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationId").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("authorizationUri") != null && !jsonObj.get("authorizationUri").isJsonNull()) && !jsonObj.get("authorizationUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationUri").toString()));
      }
      if ((jsonObj.get("jwkSetUri") != null && !jsonObj.get("jwkSetUri").isJsonNull()) && !jsonObj.get("jwkSetUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwkSetUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwkSetUri").toString()));
      }
      if ((jsonObj.get("tokenUri") != null && !jsonObj.get("tokenUri").isJsonNull()) && !jsonObj.get("tokenUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnlineCourseConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnlineCourseConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnlineCourseConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnlineCourseConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<OnlineCourseConfiguration>() {
           @Override
           public void write(JsonWriter out, OnlineCourseConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnlineCourseConfiguration read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OnlineCourseConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OnlineCourseConfiguration
  * @throws IOException if the JSON string is invalid with respect to OnlineCourseConfiguration
  */
  public static OnlineCourseConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnlineCourseConfiguration.class);
  }

 /**
  * Convert an instance of OnlineCourseConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

