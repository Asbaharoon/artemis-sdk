/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BonusResultDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class BonusResultDTO {
  /**
   * Gets or Sets bonusStrategy
   */
  @JsonAdapter(BonusStrategyEnum.Adapter.class)
  public enum BonusStrategyEnum {
    GRADES_DISCRETE("GRADES_DISCRETE"),
    
    GRADES_CONTINUOUS("GRADES_CONTINUOUS"),
    
    POINTS("POINTS");

    private String value;

    BonusStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BonusStrategyEnum fromValue(String value) {
      for (BonusStrategyEnum b : BonusStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BonusStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BonusStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BonusStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BonusStrategyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BONUS_STRATEGY = "bonusStrategy";
  @SerializedName(SERIALIZED_NAME_BONUS_STRATEGY)
  private BonusStrategyEnum bonusStrategy;

  public static final String SERIALIZED_NAME_BONUS_FROM_TITLE = "bonusFromTitle";
  @SerializedName(SERIALIZED_NAME_BONUS_FROM_TITLE)
  private String bonusFromTitle;

  public static final String SERIALIZED_NAME_STUDENT_POINTS_OF_BONUS_SOURCE = "studentPointsOfBonusSource";
  @SerializedName(SERIALIZED_NAME_STUDENT_POINTS_OF_BONUS_SOURCE)
  private Double studentPointsOfBonusSource;

  public static final String SERIALIZED_NAME_BONUS_GRADE = "bonusGrade";
  @SerializedName(SERIALIZED_NAME_BONUS_GRADE)
  private String bonusGrade;

  public static final String SERIALIZED_NAME_FINAL_POINTS = "finalPoints";
  @SerializedName(SERIALIZED_NAME_FINAL_POINTS)
  private Double finalPoints;

  public static final String SERIALIZED_NAME_FINAL_GRADE = "finalGrade";
  @SerializedName(SERIALIZED_NAME_FINAL_GRADE)
  private String finalGrade;

  /**
   * Gets or Sets mostSeverePlagiarismVerdict
   */
  @JsonAdapter(MostSeverePlagiarismVerdictEnum.Adapter.class)
  public enum MostSeverePlagiarismVerdictEnum {
    PLAGIARISM("PLAGIARISM"),
    
    POINT_DEDUCTION("POINT_DEDUCTION"),
    
    WARNING("WARNING"),
    
    NO_PLAGIARISM("NO_PLAGIARISM");

    private String value;

    MostSeverePlagiarismVerdictEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MostSeverePlagiarismVerdictEnum fromValue(String value) {
      for (MostSeverePlagiarismVerdictEnum b : MostSeverePlagiarismVerdictEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MostSeverePlagiarismVerdictEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MostSeverePlagiarismVerdictEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MostSeverePlagiarismVerdictEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MostSeverePlagiarismVerdictEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MOST_SEVERE_PLAGIARISM_VERDICT = "mostSeverePlagiarismVerdict";
  @SerializedName(SERIALIZED_NAME_MOST_SEVERE_PLAGIARISM_VERDICT)
  private MostSeverePlagiarismVerdictEnum mostSeverePlagiarismVerdict;

  public static final String SERIALIZED_NAME_ACHIEVED_PRESENTATION_SCORE = "achievedPresentationScore";
  @SerializedName(SERIALIZED_NAME_ACHIEVED_PRESENTATION_SCORE)
  private Integer achievedPresentationScore;

  public static final String SERIALIZED_NAME_PRESENTATION_SCORE_THRESHOLD = "presentationScoreThreshold";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_SCORE_THRESHOLD)
  private Integer presentationScoreThreshold;

  public BonusResultDTO() {
  }

  public BonusResultDTO bonusStrategy(BonusStrategyEnum bonusStrategy) {
    
    this.bonusStrategy = bonusStrategy;
    return this;
  }

   /**
   * Get bonusStrategy
   * @return bonusStrategy
  **/
  @javax.annotation.Nullable

  public BonusStrategyEnum getBonusStrategy() {
    return bonusStrategy;
  }


  public void setBonusStrategy(BonusStrategyEnum bonusStrategy) {
    this.bonusStrategy = bonusStrategy;
  }


  public BonusResultDTO bonusFromTitle(String bonusFromTitle) {
    
    this.bonusFromTitle = bonusFromTitle;
    return this;
  }

   /**
   * Get bonusFromTitle
   * @return bonusFromTitle
  **/
  @javax.annotation.Nullable

  public String getBonusFromTitle() {
    return bonusFromTitle;
  }


  public void setBonusFromTitle(String bonusFromTitle) {
    this.bonusFromTitle = bonusFromTitle;
  }


  public BonusResultDTO studentPointsOfBonusSource(Double studentPointsOfBonusSource) {
    
    this.studentPointsOfBonusSource = studentPointsOfBonusSource;
    return this;
  }

   /**
   * Get studentPointsOfBonusSource
   * @return studentPointsOfBonusSource
  **/
  @javax.annotation.Nullable

  public Double getStudentPointsOfBonusSource() {
    return studentPointsOfBonusSource;
  }


  public void setStudentPointsOfBonusSource(Double studentPointsOfBonusSource) {
    this.studentPointsOfBonusSource = studentPointsOfBonusSource;
  }


  public BonusResultDTO bonusGrade(String bonusGrade) {
    
    this.bonusGrade = bonusGrade;
    return this;
  }

   /**
   * Get bonusGrade
   * @return bonusGrade
  **/
  @javax.annotation.Nullable

  public String getBonusGrade() {
    return bonusGrade;
  }


  public void setBonusGrade(String bonusGrade) {
    this.bonusGrade = bonusGrade;
  }


  public BonusResultDTO finalPoints(Double finalPoints) {
    
    this.finalPoints = finalPoints;
    return this;
  }

   /**
   * Get finalPoints
   * @return finalPoints
  **/
  @javax.annotation.Nullable

  public Double getFinalPoints() {
    return finalPoints;
  }


  public void setFinalPoints(Double finalPoints) {
    this.finalPoints = finalPoints;
  }


  public BonusResultDTO finalGrade(String finalGrade) {
    
    this.finalGrade = finalGrade;
    return this;
  }

   /**
   * Get finalGrade
   * @return finalGrade
  **/
  @javax.annotation.Nullable

  public String getFinalGrade() {
    return finalGrade;
  }


  public void setFinalGrade(String finalGrade) {
    this.finalGrade = finalGrade;
  }


  public BonusResultDTO mostSeverePlagiarismVerdict(MostSeverePlagiarismVerdictEnum mostSeverePlagiarismVerdict) {
    
    this.mostSeverePlagiarismVerdict = mostSeverePlagiarismVerdict;
    return this;
  }

   /**
   * Get mostSeverePlagiarismVerdict
   * @return mostSeverePlagiarismVerdict
  **/
  @javax.annotation.Nullable

  public MostSeverePlagiarismVerdictEnum getMostSeverePlagiarismVerdict() {
    return mostSeverePlagiarismVerdict;
  }


  public void setMostSeverePlagiarismVerdict(MostSeverePlagiarismVerdictEnum mostSeverePlagiarismVerdict) {
    this.mostSeverePlagiarismVerdict = mostSeverePlagiarismVerdict;
  }


  public BonusResultDTO achievedPresentationScore(Integer achievedPresentationScore) {
    
    this.achievedPresentationScore = achievedPresentationScore;
    return this;
  }

   /**
   * Get achievedPresentationScore
   * @return achievedPresentationScore
  **/
  @javax.annotation.Nullable

  public Integer getAchievedPresentationScore() {
    return achievedPresentationScore;
  }


  public void setAchievedPresentationScore(Integer achievedPresentationScore) {
    this.achievedPresentationScore = achievedPresentationScore;
  }


  public BonusResultDTO presentationScoreThreshold(Integer presentationScoreThreshold) {
    
    this.presentationScoreThreshold = presentationScoreThreshold;
    return this;
  }

   /**
   * Get presentationScoreThreshold
   * @return presentationScoreThreshold
  **/
  @javax.annotation.Nullable

  public Integer getPresentationScoreThreshold() {
    return presentationScoreThreshold;
  }


  public void setPresentationScoreThreshold(Integer presentationScoreThreshold) {
    this.presentationScoreThreshold = presentationScoreThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BonusResultDTO bonusResultDTO = (BonusResultDTO) o;
    return Objects.equals(this.bonusStrategy, bonusResultDTO.bonusStrategy) &&
        Objects.equals(this.bonusFromTitle, bonusResultDTO.bonusFromTitle) &&
        Objects.equals(this.studentPointsOfBonusSource, bonusResultDTO.studentPointsOfBonusSource) &&
        Objects.equals(this.bonusGrade, bonusResultDTO.bonusGrade) &&
        Objects.equals(this.finalPoints, bonusResultDTO.finalPoints) &&
        Objects.equals(this.finalGrade, bonusResultDTO.finalGrade) &&
        Objects.equals(this.mostSeverePlagiarismVerdict, bonusResultDTO.mostSeverePlagiarismVerdict) &&
        Objects.equals(this.achievedPresentationScore, bonusResultDTO.achievedPresentationScore) &&
        Objects.equals(this.presentationScoreThreshold, bonusResultDTO.presentationScoreThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bonusStrategy, bonusFromTitle, studentPointsOfBonusSource, bonusGrade, finalPoints, finalGrade, mostSeverePlagiarismVerdict, achievedPresentationScore, presentationScoreThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BonusResultDTO {\n");
    sb.append("    bonusStrategy: ").append(toIndentedString(bonusStrategy)).append("\n");
    sb.append("    bonusFromTitle: ").append(toIndentedString(bonusFromTitle)).append("\n");
    sb.append("    studentPointsOfBonusSource: ").append(toIndentedString(studentPointsOfBonusSource)).append("\n");
    sb.append("    bonusGrade: ").append(toIndentedString(bonusGrade)).append("\n");
    sb.append("    finalPoints: ").append(toIndentedString(finalPoints)).append("\n");
    sb.append("    finalGrade: ").append(toIndentedString(finalGrade)).append("\n");
    sb.append("    mostSeverePlagiarismVerdict: ").append(toIndentedString(mostSeverePlagiarismVerdict)).append("\n");
    sb.append("    achievedPresentationScore: ").append(toIndentedString(achievedPresentationScore)).append("\n");
    sb.append("    presentationScoreThreshold: ").append(toIndentedString(presentationScoreThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bonusStrategy");
    openapiFields.add("bonusFromTitle");
    openapiFields.add("studentPointsOfBonusSource");
    openapiFields.add("bonusGrade");
    openapiFields.add("finalPoints");
    openapiFields.add("finalGrade");
    openapiFields.add("mostSeverePlagiarismVerdict");
    openapiFields.add("achievedPresentationScore");
    openapiFields.add("presentationScoreThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BonusResultDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BonusResultDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BonusResultDTO is not found in the empty JSON string", BonusResultDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BonusResultDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BonusResultDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("bonusStrategy") != null && !jsonObj.get("bonusStrategy").isJsonNull()) && !jsonObj.get("bonusStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bonusStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bonusStrategy").toString()));
      }
      if ((jsonObj.get("bonusFromTitle") != null && !jsonObj.get("bonusFromTitle").isJsonNull()) && !jsonObj.get("bonusFromTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bonusFromTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bonusFromTitle").toString()));
      }
      if ((jsonObj.get("bonusGrade") != null && !jsonObj.get("bonusGrade").isJsonNull()) && !jsonObj.get("bonusGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bonusGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bonusGrade").toString()));
      }
      if ((jsonObj.get("finalGrade") != null && !jsonObj.get("finalGrade").isJsonNull()) && !jsonObj.get("finalGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finalGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finalGrade").toString()));
      }
      if ((jsonObj.get("mostSeverePlagiarismVerdict") != null && !jsonObj.get("mostSeverePlagiarismVerdict").isJsonNull()) && !jsonObj.get("mostSeverePlagiarismVerdict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mostSeverePlagiarismVerdict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mostSeverePlagiarismVerdict").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BonusResultDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BonusResultDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BonusResultDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BonusResultDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<BonusResultDTO>() {
           @Override
           public void write(JsonWriter out, BonusResultDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BonusResultDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BonusResultDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BonusResultDTO
  * @throws IOException if the JSON string is invalid with respect to BonusResultDTO
  */
  public static BonusResultDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BonusResultDTO.class);
  }

 /**
  * Convert an instance of BonusResultDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

