/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.TextExercise;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchResultPageDTOTextExercise
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class SearchResultPageDTOTextExercise {
  public static final String SERIALIZED_NAME_RESULTS_ON_PAGE = "resultsOnPage";
  @SerializedName(SERIALIZED_NAME_RESULTS_ON_PAGE)
  private List<TextExercise> resultsOnPage = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_PAGES = "numberOfPages";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PAGES)
  private Integer numberOfPages;

  public SearchResultPageDTOTextExercise() {
  }

  public SearchResultPageDTOTextExercise resultsOnPage(List<TextExercise> resultsOnPage) {
    
    this.resultsOnPage = resultsOnPage;
    return this;
  }

  public SearchResultPageDTOTextExercise addResultsOnPageItem(TextExercise resultsOnPageItem) {
    if (this.resultsOnPage == null) {
      this.resultsOnPage = new ArrayList<>();
    }
    this.resultsOnPage.add(resultsOnPageItem);
    return this;
  }

   /**
   * Get resultsOnPage
   * @return resultsOnPage
  **/
  @javax.annotation.Nullable

  public List<TextExercise> getResultsOnPage() {
    return resultsOnPage;
  }


  public void setResultsOnPage(List<TextExercise> resultsOnPage) {
    this.resultsOnPage = resultsOnPage;
  }


  public SearchResultPageDTOTextExercise numberOfPages(Integer numberOfPages) {
    
    this.numberOfPages = numberOfPages;
    return this;
  }

   /**
   * Get numberOfPages
   * @return numberOfPages
  **/
  @javax.annotation.Nullable

  public Integer getNumberOfPages() {
    return numberOfPages;
  }


  public void setNumberOfPages(Integer numberOfPages) {
    this.numberOfPages = numberOfPages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchResultPageDTOTextExercise searchResultPageDTOTextExercise = (SearchResultPageDTOTextExercise) o;
    return Objects.equals(this.resultsOnPage, searchResultPageDTOTextExercise.resultsOnPage) &&
        Objects.equals(this.numberOfPages, searchResultPageDTOTextExercise.numberOfPages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resultsOnPage, numberOfPages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchResultPageDTOTextExercise {\n");
    sb.append("    resultsOnPage: ").append(toIndentedString(resultsOnPage)).append("\n");
    sb.append("    numberOfPages: ").append(toIndentedString(numberOfPages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resultsOnPage");
    openapiFields.add("numberOfPages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SearchResultPageDTOTextExercise
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SearchResultPageDTOTextExercise.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchResultPageDTOTextExercise is not found in the empty JSON string", SearchResultPageDTOTextExercise.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SearchResultPageDTOTextExercise.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchResultPageDTOTextExercise` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("resultsOnPage") != null && !jsonObj.get("resultsOnPage").isJsonNull()) {
        JsonArray jsonArrayresultsOnPage = jsonObj.getAsJsonArray("resultsOnPage");
        if (jsonArrayresultsOnPage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resultsOnPage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resultsOnPage` to be an array in the JSON string but got `%s`", jsonObj.get("resultsOnPage").toString()));
          }

          // validate the optional field `resultsOnPage` (array)
          for (int i = 0; i < jsonArrayresultsOnPage.size(); i++) {
            TextExercise.validateJsonObject(jsonArrayresultsOnPage.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchResultPageDTOTextExercise.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchResultPageDTOTextExercise' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchResultPageDTOTextExercise> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchResultPageDTOTextExercise.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchResultPageDTOTextExercise>() {
           @Override
           public void write(JsonWriter out, SearchResultPageDTOTextExercise value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchResultPageDTOTextExercise read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SearchResultPageDTOTextExercise given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchResultPageDTOTextExercise
  * @throws IOException if the JSON string is invalid with respect to SearchResultPageDTOTextExercise
  */
  public static SearchResultPageDTOTextExercise fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchResultPageDTOTextExercise.class);
  }

 /**
  * Convert an instance of SearchResultPageDTOTextExercise to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

