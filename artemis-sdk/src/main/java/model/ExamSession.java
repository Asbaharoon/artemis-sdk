/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.IPAddress;
import org.openapitools.client.model.StudentExam;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExamSession
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ExamSession {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_STUDENT_EXAM = "studentExam";
  @SerializedName(SERIALIZED_NAME_STUDENT_EXAM)
  private StudentExam studentExam;

  public static final String SERIALIZED_NAME_SESSION_TOKEN = "sessionToken";
  @SerializedName(SERIALIZED_NAME_SESSION_TOKEN)
  private String sessionToken;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public static final String SERIALIZED_NAME_BROWSER_FINGERPRINT_HASH = "browserFingerprintHash";
  @SerializedName(SERIALIZED_NAME_BROWSER_FINGERPRINT_HASH)
  private String browserFingerprintHash;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private IPAddress ipAddress;

  public static final String SERIALIZED_NAME_INITIAL_SESSION = "initialSession";
  @SerializedName(SERIALIZED_NAME_INITIAL_SESSION)
  private Boolean initialSession;

  public ExamSession() {
  }

  public ExamSession id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ExamSession studentExam(StudentExam studentExam) {
    
    this.studentExam = studentExam;
    return this;
  }

   /**
   * Get studentExam
   * @return studentExam
  **/
  @javax.annotation.Nullable

  public StudentExam getStudentExam() {
    return studentExam;
  }


  public void setStudentExam(StudentExam studentExam) {
    this.studentExam = studentExam;
  }


  public ExamSession sessionToken(String sessionToken) {
    
    this.sessionToken = sessionToken;
    return this;
  }

   /**
   * Get sessionToken
   * @return sessionToken
  **/
  @javax.annotation.Nullable

  public String getSessionToken() {
    return sessionToken;
  }


  public void setSessionToken(String sessionToken) {
    this.sessionToken = sessionToken;
  }


  public ExamSession userAgent(String userAgent) {
    
    this.userAgent = userAgent;
    return this;
  }

   /**
   * Get userAgent
   * @return userAgent
  **/
  @javax.annotation.Nullable

  public String getUserAgent() {
    return userAgent;
  }


  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }


  public ExamSession browserFingerprintHash(String browserFingerprintHash) {
    
    this.browserFingerprintHash = browserFingerprintHash;
    return this;
  }

   /**
   * Get browserFingerprintHash
   * @return browserFingerprintHash
  **/
  @javax.annotation.Nullable

  public String getBrowserFingerprintHash() {
    return browserFingerprintHash;
  }


  public void setBrowserFingerprintHash(String browserFingerprintHash) {
    this.browserFingerprintHash = browserFingerprintHash;
  }


  public ExamSession instanceId(String instanceId) {
    
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @javax.annotation.Nullable

  public String getInstanceId() {
    return instanceId;
  }


  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public ExamSession ipAddress(IPAddress ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Get ipAddress
   * @return ipAddress
  **/
  @javax.annotation.Nullable

  public IPAddress getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(IPAddress ipAddress) {
    this.ipAddress = ipAddress;
  }


  public ExamSession initialSession(Boolean initialSession) {
    
    this.initialSession = initialSession;
    return this;
  }

   /**
   * Get initialSession
   * @return initialSession
  **/
  @javax.annotation.Nullable

  public Boolean getInitialSession() {
    return initialSession;
  }


  public void setInitialSession(Boolean initialSession) {
    this.initialSession = initialSession;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExamSession examSession = (ExamSession) o;
    return Objects.equals(this.id, examSession.id) &&
        Objects.equals(this.studentExam, examSession.studentExam) &&
        Objects.equals(this.sessionToken, examSession.sessionToken) &&
        Objects.equals(this.userAgent, examSession.userAgent) &&
        Objects.equals(this.browserFingerprintHash, examSession.browserFingerprintHash) &&
        Objects.equals(this.instanceId, examSession.instanceId) &&
        Objects.equals(this.ipAddress, examSession.ipAddress) &&
        Objects.equals(this.initialSession, examSession.initialSession);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, studentExam, sessionToken, userAgent, browserFingerprintHash, instanceId, ipAddress, initialSession);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExamSession {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    studentExam: ").append(toIndentedString(studentExam)).append("\n");
    sb.append("    sessionToken: ").append(toIndentedString(sessionToken)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    browserFingerprintHash: ").append(toIndentedString(browserFingerprintHash)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    initialSession: ").append(toIndentedString(initialSession)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("studentExam");
    openapiFields.add("sessionToken");
    openapiFields.add("userAgent");
    openapiFields.add("browserFingerprintHash");
    openapiFields.add("instanceId");
    openapiFields.add("ipAddress");
    openapiFields.add("initialSession");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExamSession
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExamSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExamSession is not found in the empty JSON string", ExamSession.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExamSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExamSession` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `studentExam`
      if (jsonObj.get("studentExam") != null && !jsonObj.get("studentExam").isJsonNull()) {
        StudentExam.validateJsonObject(jsonObj.getAsJsonObject("studentExam"));
      }
      if ((jsonObj.get("sessionToken") != null && !jsonObj.get("sessionToken").isJsonNull()) && !jsonObj.get("sessionToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionToken").toString()));
      }
      if ((jsonObj.get("userAgent") != null && !jsonObj.get("userAgent").isJsonNull()) && !jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
      if ((jsonObj.get("browserFingerprintHash") != null && !jsonObj.get("browserFingerprintHash").isJsonNull()) && !jsonObj.get("browserFingerprintHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserFingerprintHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserFingerprintHash").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      // validate the optional field `ipAddress`
      if (jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) {
        IPAddress.validateJsonObject(jsonObj.getAsJsonObject("ipAddress"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExamSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExamSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExamSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExamSession.class));

       return (TypeAdapter<T>) new TypeAdapter<ExamSession>() {
           @Override
           public void write(JsonWriter out, ExamSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExamSession read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExamSession given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExamSession
  * @throws IOException if the JSON string is invalid with respect to ExamSession
  */
  public static ExamSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExamSession.class);
  }

 /**
  * Convert an instance of ExamSession to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

