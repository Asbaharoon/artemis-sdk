/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExamUserAttendanceCheckDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ExamUserAttendanceCheckDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_STUDENT_IMAGE_PATH = "studentImagePath";
  @SerializedName(SERIALIZED_NAME_STUDENT_IMAGE_PATH)
  private String studentImagePath;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_SIGNING_IMAGE_PATH = "signingImagePath";
  @SerializedName(SERIALIZED_NAME_SIGNING_IMAGE_PATH)
  private String signingImagePath;

  public static final String SERIALIZED_NAME_STARTED = "started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private Boolean started;

  public static final String SERIALIZED_NAME_SUBMITTED = "submitted";
  @SerializedName(SERIALIZED_NAME_SUBMITTED)
  private Boolean submitted;

  public ExamUserAttendanceCheckDTO() {
  }

  public ExamUserAttendanceCheckDTO id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ExamUserAttendanceCheckDTO studentImagePath(String studentImagePath) {
    
    this.studentImagePath = studentImagePath;
    return this;
  }

   /**
   * Get studentImagePath
   * @return studentImagePath
  **/
  @javax.annotation.Nullable

  public String getStudentImagePath() {
    return studentImagePath;
  }


  public void setStudentImagePath(String studentImagePath) {
    this.studentImagePath = studentImagePath;
  }


  public ExamUserAttendanceCheckDTO login(String login) {
    
    this.login = login;
    return this;
  }

   /**
   * Get login
   * @return login
  **/
  @javax.annotation.Nullable

  public String getLogin() {
    return login;
  }


  public void setLogin(String login) {
    this.login = login;
  }


  public ExamUserAttendanceCheckDTO registrationNumber(String registrationNumber) {
    
    this.registrationNumber = registrationNumber;
    return this;
  }

   /**
   * Get registrationNumber
   * @return registrationNumber
  **/
  @javax.annotation.Nullable

  public String getRegistrationNumber() {
    return registrationNumber;
  }


  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public ExamUserAttendanceCheckDTO signingImagePath(String signingImagePath) {
    
    this.signingImagePath = signingImagePath;
    return this;
  }

   /**
   * Get signingImagePath
   * @return signingImagePath
  **/
  @javax.annotation.Nullable

  public String getSigningImagePath() {
    return signingImagePath;
  }


  public void setSigningImagePath(String signingImagePath) {
    this.signingImagePath = signingImagePath;
  }


  public ExamUserAttendanceCheckDTO started(Boolean started) {
    
    this.started = started;
    return this;
  }

   /**
   * Get started
   * @return started
  **/
  @javax.annotation.Nullable

  public Boolean getStarted() {
    return started;
  }


  public void setStarted(Boolean started) {
    this.started = started;
  }


  public ExamUserAttendanceCheckDTO submitted(Boolean submitted) {
    
    this.submitted = submitted;
    return this;
  }

   /**
   * Get submitted
   * @return submitted
  **/
  @javax.annotation.Nullable

  public Boolean getSubmitted() {
    return submitted;
  }


  public void setSubmitted(Boolean submitted) {
    this.submitted = submitted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExamUserAttendanceCheckDTO examUserAttendanceCheckDTO = (ExamUserAttendanceCheckDTO) o;
    return Objects.equals(this.id, examUserAttendanceCheckDTO.id) &&
        Objects.equals(this.studentImagePath, examUserAttendanceCheckDTO.studentImagePath) &&
        Objects.equals(this.login, examUserAttendanceCheckDTO.login) &&
        Objects.equals(this.registrationNumber, examUserAttendanceCheckDTO.registrationNumber) &&
        Objects.equals(this.signingImagePath, examUserAttendanceCheckDTO.signingImagePath) &&
        Objects.equals(this.started, examUserAttendanceCheckDTO.started) &&
        Objects.equals(this.submitted, examUserAttendanceCheckDTO.submitted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, studentImagePath, login, registrationNumber, signingImagePath, started, submitted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExamUserAttendanceCheckDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    studentImagePath: ").append(toIndentedString(studentImagePath)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    signingImagePath: ").append(toIndentedString(signingImagePath)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    submitted: ").append(toIndentedString(submitted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("studentImagePath");
    openapiFields.add("login");
    openapiFields.add("registrationNumber");
    openapiFields.add("signingImagePath");
    openapiFields.add("started");
    openapiFields.add("submitted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExamUserAttendanceCheckDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExamUserAttendanceCheckDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExamUserAttendanceCheckDTO is not found in the empty JSON string", ExamUserAttendanceCheckDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExamUserAttendanceCheckDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExamUserAttendanceCheckDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("studentImagePath") != null && !jsonObj.get("studentImagePath").isJsonNull()) && !jsonObj.get("studentImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studentImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studentImagePath").toString()));
      }
      if ((jsonObj.get("login") != null && !jsonObj.get("login").isJsonNull()) && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("registrationNumber") != null && !jsonObj.get("registrationNumber").isJsonNull()) && !jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      if ((jsonObj.get("signingImagePath") != null && !jsonObj.get("signingImagePath").isJsonNull()) && !jsonObj.get("signingImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signingImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signingImagePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExamUserAttendanceCheckDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExamUserAttendanceCheckDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExamUserAttendanceCheckDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExamUserAttendanceCheckDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ExamUserAttendanceCheckDTO>() {
           @Override
           public void write(JsonWriter out, ExamUserAttendanceCheckDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExamUserAttendanceCheckDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExamUserAttendanceCheckDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExamUserAttendanceCheckDTO
  * @throws IOException if the JSON string is invalid with respect to ExamUserAttendanceCheckDTO
  */
  public static ExamUserAttendanceCheckDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExamUserAttendanceCheckDTO.class);
  }

 /**
  * Convert an instance of ExamUserAttendanceCheckDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

