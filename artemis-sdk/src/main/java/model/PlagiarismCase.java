/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Exercise;
import org.openapitools.client.model.PlagiarismSubmissionObject;
import org.openapitools.client.model.Post;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlagiarismCase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class PlagiarismCase {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_EXERCISE = "exercise";
  @SerializedName(SERIALIZED_NAME_EXERCISE)
  private Exercise exercise;

  public static final String SERIALIZED_NAME_STUDENT = "student";
  @SerializedName(SERIALIZED_NAME_STUDENT)
  private User student;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private Team team;

  public static final String SERIALIZED_NAME_POST = "post";
  @SerializedName(SERIALIZED_NAME_POST)
  private Post post;

  public static final String SERIALIZED_NAME_PLAGIARISM_SUBMISSIONS = "plagiarismSubmissions";
  @SerializedName(SERIALIZED_NAME_PLAGIARISM_SUBMISSIONS)
  private Set<PlagiarismSubmissionObject> plagiarismSubmissions = new LinkedHashSet<>();

  /**
   * Gets or Sets verdict
   */
  @JsonAdapter(VerdictEnum.Adapter.class)
  public enum VerdictEnum {
    PLAGIARISM("PLAGIARISM"),
    
    POINT_DEDUCTION("POINT_DEDUCTION"),
    
    WARNING("WARNING"),
    
    NO_PLAGIARISM("NO_PLAGIARISM");

    private String value;

    VerdictEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerdictEnum fromValue(String value) {
      for (VerdictEnum b : VerdictEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerdictEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerdictEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerdictEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerdictEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VERDICT = "verdict";
  @SerializedName(SERIALIZED_NAME_VERDICT)
  private VerdictEnum verdict;

  public static final String SERIALIZED_NAME_VERDICT_MESSAGE = "verdictMessage";
  @SerializedName(SERIALIZED_NAME_VERDICT_MESSAGE)
  private String verdictMessage;

  public static final String SERIALIZED_NAME_VERDICT_BY = "verdictBy";
  @SerializedName(SERIALIZED_NAME_VERDICT_BY)
  private User verdictBy;

  public static final String SERIALIZED_NAME_VERDICT_DATE = "verdictDate";
  @SerializedName(SERIALIZED_NAME_VERDICT_DATE)
  private OffsetDateTime verdictDate;

  public static final String SERIALIZED_NAME_VERDICT_POINT_DEDUCTION = "verdictPointDeduction";
  @SerializedName(SERIALIZED_NAME_VERDICT_POINT_DEDUCTION)
  private Integer verdictPointDeduction;

  public PlagiarismCase() {
  }

  public PlagiarismCase id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public PlagiarismCase exercise(Exercise exercise) {
    
    this.exercise = exercise;
    return this;
  }

   /**
   * Get exercise
   * @return exercise
  **/
  @javax.annotation.Nullable

  public Exercise getExercise() {
    return exercise;
  }


  public void setExercise(Exercise exercise) {
    this.exercise = exercise;
  }


  public PlagiarismCase student(User student) {
    
    this.student = student;
    return this;
  }

   /**
   * Get student
   * @return student
  **/
  @javax.annotation.Nullable

  public User getStudent() {
    return student;
  }


  public void setStudent(User student) {
    this.student = student;
  }


  public PlagiarismCase team(Team team) {
    
    this.team = team;
    return this;
  }

   /**
   * Get team
   * @return team
  **/
  @javax.annotation.Nullable

  public Team getTeam() {
    return team;
  }


  public void setTeam(Team team) {
    this.team = team;
  }


  public PlagiarismCase post(Post post) {
    
    this.post = post;
    return this;
  }

   /**
   * Get post
   * @return post
  **/
  @javax.annotation.Nullable

  public Post getPost() {
    return post;
  }


  public void setPost(Post post) {
    this.post = post;
  }


  public PlagiarismCase plagiarismSubmissions(Set<PlagiarismSubmissionObject> plagiarismSubmissions) {
    
    this.plagiarismSubmissions = plagiarismSubmissions;
    return this;
  }

  public PlagiarismCase addPlagiarismSubmissionsItem(PlagiarismSubmissionObject plagiarismSubmissionsItem) {
    if (this.plagiarismSubmissions == null) {
      this.plagiarismSubmissions = new LinkedHashSet<>();
    }
    this.plagiarismSubmissions.add(plagiarismSubmissionsItem);
    return this;
  }

   /**
   * Get plagiarismSubmissions
   * @return plagiarismSubmissions
  **/
  @javax.annotation.Nullable

  public Set<PlagiarismSubmissionObject> getPlagiarismSubmissions() {
    return plagiarismSubmissions;
  }


  public void setPlagiarismSubmissions(Set<PlagiarismSubmissionObject> plagiarismSubmissions) {
    this.plagiarismSubmissions = plagiarismSubmissions;
  }


  public PlagiarismCase verdict(VerdictEnum verdict) {
    
    this.verdict = verdict;
    return this;
  }

   /**
   * Get verdict
   * @return verdict
  **/
  @javax.annotation.Nullable

  public VerdictEnum getVerdict() {
    return verdict;
  }


  public void setVerdict(VerdictEnum verdict) {
    this.verdict = verdict;
  }


  public PlagiarismCase verdictMessage(String verdictMessage) {
    
    this.verdictMessage = verdictMessage;
    return this;
  }

   /**
   * Get verdictMessage
   * @return verdictMessage
  **/
  @javax.annotation.Nullable

  public String getVerdictMessage() {
    return verdictMessage;
  }


  public void setVerdictMessage(String verdictMessage) {
    this.verdictMessage = verdictMessage;
  }


  public PlagiarismCase verdictBy(User verdictBy) {
    
    this.verdictBy = verdictBy;
    return this;
  }

   /**
   * Get verdictBy
   * @return verdictBy
  **/
  @javax.annotation.Nullable

  public User getVerdictBy() {
    return verdictBy;
  }


  public void setVerdictBy(User verdictBy) {
    this.verdictBy = verdictBy;
  }


  public PlagiarismCase verdictDate(OffsetDateTime verdictDate) {
    
    this.verdictDate = verdictDate;
    return this;
  }

   /**
   * Get verdictDate
   * @return verdictDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getVerdictDate() {
    return verdictDate;
  }


  public void setVerdictDate(OffsetDateTime verdictDate) {
    this.verdictDate = verdictDate;
  }


  public PlagiarismCase verdictPointDeduction(Integer verdictPointDeduction) {
    
    this.verdictPointDeduction = verdictPointDeduction;
    return this;
  }

   /**
   * Get verdictPointDeduction
   * @return verdictPointDeduction
  **/
  @javax.annotation.Nullable

  public Integer getVerdictPointDeduction() {
    return verdictPointDeduction;
  }


  public void setVerdictPointDeduction(Integer verdictPointDeduction) {
    this.verdictPointDeduction = verdictPointDeduction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlagiarismCase plagiarismCase = (PlagiarismCase) o;
    return Objects.equals(this.id, plagiarismCase.id) &&
        Objects.equals(this.exercise, plagiarismCase.exercise) &&
        Objects.equals(this.student, plagiarismCase.student) &&
        Objects.equals(this.team, plagiarismCase.team) &&
        Objects.equals(this.post, plagiarismCase.post) &&
        Objects.equals(this.plagiarismSubmissions, plagiarismCase.plagiarismSubmissions) &&
        Objects.equals(this.verdict, plagiarismCase.verdict) &&
        Objects.equals(this.verdictMessage, plagiarismCase.verdictMessage) &&
        Objects.equals(this.verdictBy, plagiarismCase.verdictBy) &&
        Objects.equals(this.verdictDate, plagiarismCase.verdictDate) &&
        Objects.equals(this.verdictPointDeduction, plagiarismCase.verdictPointDeduction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, exercise, student, team, post, plagiarismSubmissions, verdict, verdictMessage, verdictBy, verdictDate, verdictPointDeduction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlagiarismCase {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    exercise: ").append(toIndentedString(exercise)).append("\n");
    sb.append("    student: ").append(toIndentedString(student)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    post: ").append(toIndentedString(post)).append("\n");
    sb.append("    plagiarismSubmissions: ").append(toIndentedString(plagiarismSubmissions)).append("\n");
    sb.append("    verdict: ").append(toIndentedString(verdict)).append("\n");
    sb.append("    verdictMessage: ").append(toIndentedString(verdictMessage)).append("\n");
    sb.append("    verdictBy: ").append(toIndentedString(verdictBy)).append("\n");
    sb.append("    verdictDate: ").append(toIndentedString(verdictDate)).append("\n");
    sb.append("    verdictPointDeduction: ").append(toIndentedString(verdictPointDeduction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("exercise");
    openapiFields.add("student");
    openapiFields.add("team");
    openapiFields.add("post");
    openapiFields.add("plagiarismSubmissions");
    openapiFields.add("verdict");
    openapiFields.add("verdictMessage");
    openapiFields.add("verdictBy");
    openapiFields.add("verdictDate");
    openapiFields.add("verdictPointDeduction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PlagiarismCase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PlagiarismCase.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlagiarismCase is not found in the empty JSON string", PlagiarismCase.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PlagiarismCase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlagiarismCase` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `exercise`
      if (jsonObj.get("exercise") != null && !jsonObj.get("exercise").isJsonNull()) {
        Exercise.validateJsonObject(jsonObj.getAsJsonObject("exercise"));
      }
      // validate the optional field `student`
      if (jsonObj.get("student") != null && !jsonObj.get("student").isJsonNull()) {
        User.validateJsonObject(jsonObj.getAsJsonObject("student"));
      }
      // validate the optional field `team`
      if (jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) {
        Team.validateJsonObject(jsonObj.getAsJsonObject("team"));
      }
      // validate the optional field `post`
      if (jsonObj.get("post") != null && !jsonObj.get("post").isJsonNull()) {
        Post.validateJsonObject(jsonObj.getAsJsonObject("post"));
      }
      if (jsonObj.get("plagiarismSubmissions") != null && !jsonObj.get("plagiarismSubmissions").isJsonNull()) {
        JsonArray jsonArrayplagiarismSubmissions = jsonObj.getAsJsonArray("plagiarismSubmissions");
        if (jsonArrayplagiarismSubmissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("plagiarismSubmissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `plagiarismSubmissions` to be an array in the JSON string but got `%s`", jsonObj.get("plagiarismSubmissions").toString()));
          }

          // validate the optional field `plagiarismSubmissions` (array)
          for (int i = 0; i < jsonArrayplagiarismSubmissions.size(); i++) {
            PlagiarismSubmissionObject.validateJsonObject(jsonArrayplagiarismSubmissions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("verdict") != null && !jsonObj.get("verdict").isJsonNull()) && !jsonObj.get("verdict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verdict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verdict").toString()));
      }
      if ((jsonObj.get("verdictMessage") != null && !jsonObj.get("verdictMessage").isJsonNull()) && !jsonObj.get("verdictMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verdictMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verdictMessage").toString()));
      }
      // validate the optional field `verdictBy`
      if (jsonObj.get("verdictBy") != null && !jsonObj.get("verdictBy").isJsonNull()) {
        User.validateJsonObject(jsonObj.getAsJsonObject("verdictBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlagiarismCase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlagiarismCase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlagiarismCase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlagiarismCase.class));

       return (TypeAdapter<T>) new TypeAdapter<PlagiarismCase>() {
           @Override
           public void write(JsonWriter out, PlagiarismCase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlagiarismCase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlagiarismCase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlagiarismCase
  * @throws IOException if the JSON string is invalid with respect to PlagiarismCase
  */
  public static PlagiarismCase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlagiarismCase.class);
  }

 /**
  * Convert an instance of PlagiarismCase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

