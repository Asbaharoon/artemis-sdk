/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.QuizBatch;
import org.openapitools.client.model.QuizPointStatistic;
import org.openapitools.client.model.QuizQuestion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QuizExerciseAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class QuizExerciseAllOf {
  public static final String SERIALIZED_NAME_RANDOMIZE_QUESTION_ORDER = "randomizeQuestionOrder";
  @SerializedName(SERIALIZED_NAME_RANDOMIZE_QUESTION_ORDER)
  private Boolean randomizeQuestionOrder;

  public static final String SERIALIZED_NAME_ALLOWED_NUMBER_OF_ATTEMPTS = "allowedNumberOfAttempts";
  @SerializedName(SERIALIZED_NAME_ALLOWED_NUMBER_OF_ATTEMPTS)
  private Integer allowedNumberOfAttempts;

  public static final String SERIALIZED_NAME_REMAINING_NUMBER_OF_ATTEMPTS = "remainingNumberOfAttempts";
  @SerializedName(SERIALIZED_NAME_REMAINING_NUMBER_OF_ATTEMPTS)
  private Integer remainingNumberOfAttempts;

  public static final String SERIALIZED_NAME_IS_OPEN_FOR_PRACTICE = "isOpenForPractice";
  @SerializedName(SERIALIZED_NAME_IS_OPEN_FOR_PRACTICE)
  private Boolean isOpenForPractice;

  /**
   * Gets or Sets quizMode
   */
  @JsonAdapter(QuizModeEnum.Adapter.class)
  public enum QuizModeEnum {
    SYNCHRONIZED("SYNCHRONIZED"),
    
    BATCHED("BATCHED"),
    
    INDIVIDUAL("INDIVIDUAL");

    private String value;

    QuizModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuizModeEnum fromValue(String value) {
      for (QuizModeEnum b : QuizModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuizModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuizModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuizModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuizModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_QUIZ_MODE = "quizMode";
  @SerializedName(SERIALIZED_NAME_QUIZ_MODE)
  private QuizModeEnum quizMode;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_QUIZ_POINT_STATISTIC = "quizPointStatistic";
  @SerializedName(SERIALIZED_NAME_QUIZ_POINT_STATISTIC)
  private QuizPointStatistic quizPointStatistic;

  public static final String SERIALIZED_NAME_QUIZ_QUESTIONS = "quizQuestions";
  @SerializedName(SERIALIZED_NAME_QUIZ_QUESTIONS)
  private List<QuizQuestion> quizQuestions = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUIZ_BATCHES = "quizBatches";
  @SerializedName(SERIALIZED_NAME_QUIZ_BATCHES)
  private Set<QuizBatch> quizBatches = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_QUIZ_STARTED = "quizStarted";
  @SerializedName(SERIALIZED_NAME_QUIZ_STARTED)
  private Boolean quizStarted;

  public static final String SERIALIZED_NAME_QUIZ_ENDED = "quizEnded";
  @SerializedName(SERIALIZED_NAME_QUIZ_ENDED)
  private Boolean quizEnded;

  public QuizExerciseAllOf() {
  }

  public QuizExerciseAllOf randomizeQuestionOrder(Boolean randomizeQuestionOrder) {
    
    this.randomizeQuestionOrder = randomizeQuestionOrder;
    return this;
  }

   /**
   * Get randomizeQuestionOrder
   * @return randomizeQuestionOrder
  **/
  @javax.annotation.Nullable

  public Boolean getRandomizeQuestionOrder() {
    return randomizeQuestionOrder;
  }


  public void setRandomizeQuestionOrder(Boolean randomizeQuestionOrder) {
    this.randomizeQuestionOrder = randomizeQuestionOrder;
  }


  public QuizExerciseAllOf allowedNumberOfAttempts(Integer allowedNumberOfAttempts) {
    
    this.allowedNumberOfAttempts = allowedNumberOfAttempts;
    return this;
  }

   /**
   * Get allowedNumberOfAttempts
   * @return allowedNumberOfAttempts
  **/
  @javax.annotation.Nullable

  public Integer getAllowedNumberOfAttempts() {
    return allowedNumberOfAttempts;
  }


  public void setAllowedNumberOfAttempts(Integer allowedNumberOfAttempts) {
    this.allowedNumberOfAttempts = allowedNumberOfAttempts;
  }


  public QuizExerciseAllOf remainingNumberOfAttempts(Integer remainingNumberOfAttempts) {
    
    this.remainingNumberOfAttempts = remainingNumberOfAttempts;
    return this;
  }

   /**
   * Get remainingNumberOfAttempts
   * @return remainingNumberOfAttempts
  **/
  @javax.annotation.Nullable

  public Integer getRemainingNumberOfAttempts() {
    return remainingNumberOfAttempts;
  }


  public void setRemainingNumberOfAttempts(Integer remainingNumberOfAttempts) {
    this.remainingNumberOfAttempts = remainingNumberOfAttempts;
  }


  public QuizExerciseAllOf isOpenForPractice(Boolean isOpenForPractice) {
    
    this.isOpenForPractice = isOpenForPractice;
    return this;
  }

   /**
   * Get isOpenForPractice
   * @return isOpenForPractice
  **/
  @javax.annotation.Nullable

  public Boolean getIsOpenForPractice() {
    return isOpenForPractice;
  }


  public void setIsOpenForPractice(Boolean isOpenForPractice) {
    this.isOpenForPractice = isOpenForPractice;
  }


  public QuizExerciseAllOf quizMode(QuizModeEnum quizMode) {
    
    this.quizMode = quizMode;
    return this;
  }

   /**
   * Get quizMode
   * @return quizMode
  **/
  @javax.annotation.Nullable

  public QuizModeEnum getQuizMode() {
    return quizMode;
  }


  public void setQuizMode(QuizModeEnum quizMode) {
    this.quizMode = quizMode;
  }


  public QuizExerciseAllOf duration(Integer duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @javax.annotation.Nullable

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public QuizExerciseAllOf quizPointStatistic(QuizPointStatistic quizPointStatistic) {
    
    this.quizPointStatistic = quizPointStatistic;
    return this;
  }

   /**
   * Get quizPointStatistic
   * @return quizPointStatistic
  **/
  @javax.annotation.Nullable

  public QuizPointStatistic getQuizPointStatistic() {
    return quizPointStatistic;
  }


  public void setQuizPointStatistic(QuizPointStatistic quizPointStatistic) {
    this.quizPointStatistic = quizPointStatistic;
  }


  public QuizExerciseAllOf quizQuestions(List<QuizQuestion> quizQuestions) {
    
    this.quizQuestions = quizQuestions;
    return this;
  }

  public QuizExerciseAllOf addQuizQuestionsItem(QuizQuestion quizQuestionsItem) {
    if (this.quizQuestions == null) {
      this.quizQuestions = new ArrayList<>();
    }
    this.quizQuestions.add(quizQuestionsItem);
    return this;
  }

   /**
   * Get quizQuestions
   * @return quizQuestions
  **/
  @javax.annotation.Nullable

  public List<QuizQuestion> getQuizQuestions() {
    return quizQuestions;
  }


  public void setQuizQuestions(List<QuizQuestion> quizQuestions) {
    this.quizQuestions = quizQuestions;
  }


  public QuizExerciseAllOf quizBatches(Set<QuizBatch> quizBatches) {
    
    this.quizBatches = quizBatches;
    return this;
  }

  public QuizExerciseAllOf addQuizBatchesItem(QuizBatch quizBatchesItem) {
    if (this.quizBatches == null) {
      this.quizBatches = new LinkedHashSet<>();
    }
    this.quizBatches.add(quizBatchesItem);
    return this;
  }

   /**
   * Get quizBatches
   * @return quizBatches
  **/
  @javax.annotation.Nullable

  public Set<QuizBatch> getQuizBatches() {
    return quizBatches;
  }


  public void setQuizBatches(Set<QuizBatch> quizBatches) {
    this.quizBatches = quizBatches;
  }


  public QuizExerciseAllOf type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public QuizExerciseAllOf quizStarted(Boolean quizStarted) {
    
    this.quizStarted = quizStarted;
    return this;
  }

   /**
   * Get quizStarted
   * @return quizStarted
  **/
  @javax.annotation.Nullable

  public Boolean getQuizStarted() {
    return quizStarted;
  }


  public void setQuizStarted(Boolean quizStarted) {
    this.quizStarted = quizStarted;
  }


  public QuizExerciseAllOf quizEnded(Boolean quizEnded) {
    
    this.quizEnded = quizEnded;
    return this;
  }

   /**
   * Get quizEnded
   * @return quizEnded
  **/
  @javax.annotation.Nullable

  public Boolean getQuizEnded() {
    return quizEnded;
  }


  public void setQuizEnded(Boolean quizEnded) {
    this.quizEnded = quizEnded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuizExerciseAllOf quizExerciseAllOf = (QuizExerciseAllOf) o;
    return Objects.equals(this.randomizeQuestionOrder, quizExerciseAllOf.randomizeQuestionOrder) &&
        Objects.equals(this.allowedNumberOfAttempts, quizExerciseAllOf.allowedNumberOfAttempts) &&
        Objects.equals(this.remainingNumberOfAttempts, quizExerciseAllOf.remainingNumberOfAttempts) &&
        Objects.equals(this.isOpenForPractice, quizExerciseAllOf.isOpenForPractice) &&
        Objects.equals(this.quizMode, quizExerciseAllOf.quizMode) &&
        Objects.equals(this.duration, quizExerciseAllOf.duration) &&
        Objects.equals(this.quizPointStatistic, quizExerciseAllOf.quizPointStatistic) &&
        Objects.equals(this.quizQuestions, quizExerciseAllOf.quizQuestions) &&
        Objects.equals(this.quizBatches, quizExerciseAllOf.quizBatches) &&
        Objects.equals(this.type, quizExerciseAllOf.type) &&
        Objects.equals(this.quizStarted, quizExerciseAllOf.quizStarted) &&
        Objects.equals(this.quizEnded, quizExerciseAllOf.quizEnded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(randomizeQuestionOrder, allowedNumberOfAttempts, remainingNumberOfAttempts, isOpenForPractice, quizMode, duration, quizPointStatistic, quizQuestions, quizBatches, type, quizStarted, quizEnded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuizExerciseAllOf {\n");
    sb.append("    randomizeQuestionOrder: ").append(toIndentedString(randomizeQuestionOrder)).append("\n");
    sb.append("    allowedNumberOfAttempts: ").append(toIndentedString(allowedNumberOfAttempts)).append("\n");
    sb.append("    remainingNumberOfAttempts: ").append(toIndentedString(remainingNumberOfAttempts)).append("\n");
    sb.append("    isOpenForPractice: ").append(toIndentedString(isOpenForPractice)).append("\n");
    sb.append("    quizMode: ").append(toIndentedString(quizMode)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    quizPointStatistic: ").append(toIndentedString(quizPointStatistic)).append("\n");
    sb.append("    quizQuestions: ").append(toIndentedString(quizQuestions)).append("\n");
    sb.append("    quizBatches: ").append(toIndentedString(quizBatches)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    quizStarted: ").append(toIndentedString(quizStarted)).append("\n");
    sb.append("    quizEnded: ").append(toIndentedString(quizEnded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("randomizeQuestionOrder");
    openapiFields.add("allowedNumberOfAttempts");
    openapiFields.add("remainingNumberOfAttempts");
    openapiFields.add("isOpenForPractice");
    openapiFields.add("quizMode");
    openapiFields.add("duration");
    openapiFields.add("quizPointStatistic");
    openapiFields.add("quizQuestions");
    openapiFields.add("quizBatches");
    openapiFields.add("type");
    openapiFields.add("quizStarted");
    openapiFields.add("quizEnded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to QuizExerciseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!QuizExerciseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuizExerciseAllOf is not found in the empty JSON string", QuizExerciseAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!QuizExerciseAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuizExerciseAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("quizMode") != null && !jsonObj.get("quizMode").isJsonNull()) && !jsonObj.get("quizMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quizMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quizMode").toString()));
      }
      // validate the optional field `quizPointStatistic`
      if (jsonObj.get("quizPointStatistic") != null && !jsonObj.get("quizPointStatistic").isJsonNull()) {
        QuizPointStatistic.validateJsonObject(jsonObj.getAsJsonObject("quizPointStatistic"));
      }
      if (jsonObj.get("quizQuestions") != null && !jsonObj.get("quizQuestions").isJsonNull()) {
        JsonArray jsonArrayquizQuestions = jsonObj.getAsJsonArray("quizQuestions");
        if (jsonArrayquizQuestions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("quizQuestions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `quizQuestions` to be an array in the JSON string but got `%s`", jsonObj.get("quizQuestions").toString()));
          }

          // validate the optional field `quizQuestions` (array)
          for (int i = 0; i < jsonArrayquizQuestions.size(); i++) {
            QuizQuestion.validateJsonObject(jsonArrayquizQuestions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("quizBatches") != null && !jsonObj.get("quizBatches").isJsonNull()) {
        JsonArray jsonArrayquizBatches = jsonObj.getAsJsonArray("quizBatches");
        if (jsonArrayquizBatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("quizBatches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `quizBatches` to be an array in the JSON string but got `%s`", jsonObj.get("quizBatches").toString()));
          }

          // validate the optional field `quizBatches` (array)
          for (int i = 0; i < jsonArrayquizBatches.size(); i++) {
            QuizBatch.validateJsonObject(jsonArrayquizBatches.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuizExerciseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuizExerciseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuizExerciseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuizExerciseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<QuizExerciseAllOf>() {
           @Override
           public void write(JsonWriter out, QuizExerciseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuizExerciseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QuizExerciseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QuizExerciseAllOf
  * @throws IOException if the JSON string is invalid with respect to QuizExerciseAllOf
  */
  public static QuizExerciseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuizExerciseAllOf.class);
  }

 /**
  * Convert an instance of QuizExerciseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

