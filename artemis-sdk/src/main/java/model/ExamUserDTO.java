/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExamUserDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ExamUserDTO {
  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_STUDENT_IDENTIFIER = "studentIdentifier";
  @SerializedName(SERIALIZED_NAME_STUDENT_IDENTIFIER)
  private String studentIdentifier;

  public static final String SERIALIZED_NAME_ROOM = "room";
  @SerializedName(SERIALIZED_NAME_ROOM)
  private String room;

  public static final String SERIALIZED_NAME_SEAT = "seat";
  @SerializedName(SERIALIZED_NAME_SEAT)
  private String seat;

  public static final String SERIALIZED_NAME_DID_CHECK_IMAGE = "didCheckImage";
  @SerializedName(SERIALIZED_NAME_DID_CHECK_IMAGE)
  private Boolean didCheckImage;

  public static final String SERIALIZED_NAME_DID_CHECK_NAME = "didCheckName";
  @SerializedName(SERIALIZED_NAME_DID_CHECK_NAME)
  private Boolean didCheckName;

  public static final String SERIALIZED_NAME_DID_CHECK_REGISTRATION_NUMBER = "didCheckRegistrationNumber";
  @SerializedName(SERIALIZED_NAME_DID_CHECK_REGISTRATION_NUMBER)
  private Boolean didCheckRegistrationNumber;

  public static final String SERIALIZED_NAME_DID_CHECK_LOGIN = "didCheckLogin";
  @SerializedName(SERIALIZED_NAME_DID_CHECK_LOGIN)
  private Boolean didCheckLogin;

  public static final String SERIALIZED_NAME_SIGNING_IMAGE_PATH = "signingImagePath";
  @SerializedName(SERIALIZED_NAME_SIGNING_IMAGE_PATH)
  private String signingImagePath;

  public ExamUserDTO() {
  }

  public ExamUserDTO login(String login) {
    
    this.login = login;
    return this;
  }

   /**
   * Get login
   * @return login
  **/
  @javax.annotation.Nullable

  public String getLogin() {
    return login;
  }


  public void setLogin(String login) {
    this.login = login;
  }


  public ExamUserDTO firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public ExamUserDTO lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public ExamUserDTO registrationNumber(String registrationNumber) {
    
    this.registrationNumber = registrationNumber;
    return this;
  }

   /**
   * Get registrationNumber
   * @return registrationNumber
  **/
  @javax.annotation.Nullable

  public String getRegistrationNumber() {
    return registrationNumber;
  }


  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public ExamUserDTO email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public ExamUserDTO studentIdentifier(String studentIdentifier) {
    
    this.studentIdentifier = studentIdentifier;
    return this;
  }

   /**
   * Get studentIdentifier
   * @return studentIdentifier
  **/
  @javax.annotation.Nullable

  public String getStudentIdentifier() {
    return studentIdentifier;
  }


  public void setStudentIdentifier(String studentIdentifier) {
    this.studentIdentifier = studentIdentifier;
  }


  public ExamUserDTO room(String room) {
    
    this.room = room;
    return this;
  }

   /**
   * Get room
   * @return room
  **/
  @javax.annotation.Nullable

  public String getRoom() {
    return room;
  }


  public void setRoom(String room) {
    this.room = room;
  }


  public ExamUserDTO seat(String seat) {
    
    this.seat = seat;
    return this;
  }

   /**
   * Get seat
   * @return seat
  **/
  @javax.annotation.Nullable

  public String getSeat() {
    return seat;
  }


  public void setSeat(String seat) {
    this.seat = seat;
  }


  public ExamUserDTO didCheckImage(Boolean didCheckImage) {
    
    this.didCheckImage = didCheckImage;
    return this;
  }

   /**
   * Get didCheckImage
   * @return didCheckImage
  **/
  @javax.annotation.Nullable

  public Boolean getDidCheckImage() {
    return didCheckImage;
  }


  public void setDidCheckImage(Boolean didCheckImage) {
    this.didCheckImage = didCheckImage;
  }


  public ExamUserDTO didCheckName(Boolean didCheckName) {
    
    this.didCheckName = didCheckName;
    return this;
  }

   /**
   * Get didCheckName
   * @return didCheckName
  **/
  @javax.annotation.Nullable

  public Boolean getDidCheckName() {
    return didCheckName;
  }


  public void setDidCheckName(Boolean didCheckName) {
    this.didCheckName = didCheckName;
  }


  public ExamUserDTO didCheckRegistrationNumber(Boolean didCheckRegistrationNumber) {
    
    this.didCheckRegistrationNumber = didCheckRegistrationNumber;
    return this;
  }

   /**
   * Get didCheckRegistrationNumber
   * @return didCheckRegistrationNumber
  **/
  @javax.annotation.Nullable

  public Boolean getDidCheckRegistrationNumber() {
    return didCheckRegistrationNumber;
  }


  public void setDidCheckRegistrationNumber(Boolean didCheckRegistrationNumber) {
    this.didCheckRegistrationNumber = didCheckRegistrationNumber;
  }


  public ExamUserDTO didCheckLogin(Boolean didCheckLogin) {
    
    this.didCheckLogin = didCheckLogin;
    return this;
  }

   /**
   * Get didCheckLogin
   * @return didCheckLogin
  **/
  @javax.annotation.Nullable

  public Boolean getDidCheckLogin() {
    return didCheckLogin;
  }


  public void setDidCheckLogin(Boolean didCheckLogin) {
    this.didCheckLogin = didCheckLogin;
  }


  public ExamUserDTO signingImagePath(String signingImagePath) {
    
    this.signingImagePath = signingImagePath;
    return this;
  }

   /**
   * Get signingImagePath
   * @return signingImagePath
  **/
  @javax.annotation.Nullable

  public String getSigningImagePath() {
    return signingImagePath;
  }


  public void setSigningImagePath(String signingImagePath) {
    this.signingImagePath = signingImagePath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExamUserDTO examUserDTO = (ExamUserDTO) o;
    return Objects.equals(this.login, examUserDTO.login) &&
        Objects.equals(this.firstName, examUserDTO.firstName) &&
        Objects.equals(this.lastName, examUserDTO.lastName) &&
        Objects.equals(this.registrationNumber, examUserDTO.registrationNumber) &&
        Objects.equals(this.email, examUserDTO.email) &&
        Objects.equals(this.studentIdentifier, examUserDTO.studentIdentifier) &&
        Objects.equals(this.room, examUserDTO.room) &&
        Objects.equals(this.seat, examUserDTO.seat) &&
        Objects.equals(this.didCheckImage, examUserDTO.didCheckImage) &&
        Objects.equals(this.didCheckName, examUserDTO.didCheckName) &&
        Objects.equals(this.didCheckRegistrationNumber, examUserDTO.didCheckRegistrationNumber) &&
        Objects.equals(this.didCheckLogin, examUserDTO.didCheckLogin) &&
        Objects.equals(this.signingImagePath, examUserDTO.signingImagePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(login, firstName, lastName, registrationNumber, email, studentIdentifier, room, seat, didCheckImage, didCheckName, didCheckRegistrationNumber, didCheckLogin, signingImagePath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExamUserDTO {\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    studentIdentifier: ").append(toIndentedString(studentIdentifier)).append("\n");
    sb.append("    room: ").append(toIndentedString(room)).append("\n");
    sb.append("    seat: ").append(toIndentedString(seat)).append("\n");
    sb.append("    didCheckImage: ").append(toIndentedString(didCheckImage)).append("\n");
    sb.append("    didCheckName: ").append(toIndentedString(didCheckName)).append("\n");
    sb.append("    didCheckRegistrationNumber: ").append(toIndentedString(didCheckRegistrationNumber)).append("\n");
    sb.append("    didCheckLogin: ").append(toIndentedString(didCheckLogin)).append("\n");
    sb.append("    signingImagePath: ").append(toIndentedString(signingImagePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("login");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("registrationNumber");
    openapiFields.add("email");
    openapiFields.add("studentIdentifier");
    openapiFields.add("room");
    openapiFields.add("seat");
    openapiFields.add("didCheckImage");
    openapiFields.add("didCheckName");
    openapiFields.add("didCheckRegistrationNumber");
    openapiFields.add("didCheckLogin");
    openapiFields.add("signingImagePath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExamUserDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExamUserDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExamUserDTO is not found in the empty JSON string", ExamUserDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExamUserDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExamUserDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("login") != null && !jsonObj.get("login").isJsonNull()) && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("registrationNumber") != null && !jsonObj.get("registrationNumber").isJsonNull()) && !jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("studentIdentifier") != null && !jsonObj.get("studentIdentifier").isJsonNull()) && !jsonObj.get("studentIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studentIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studentIdentifier").toString()));
      }
      if ((jsonObj.get("room") != null && !jsonObj.get("room").isJsonNull()) && !jsonObj.get("room").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `room` to be a primitive type in the JSON string but got `%s`", jsonObj.get("room").toString()));
      }
      if ((jsonObj.get("seat") != null && !jsonObj.get("seat").isJsonNull()) && !jsonObj.get("seat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seat").toString()));
      }
      if ((jsonObj.get("signingImagePath") != null && !jsonObj.get("signingImagePath").isJsonNull()) && !jsonObj.get("signingImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signingImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signingImagePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExamUserDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExamUserDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExamUserDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExamUserDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ExamUserDTO>() {
           @Override
           public void write(JsonWriter out, ExamUserDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExamUserDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExamUserDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExamUserDTO
  * @throws IOException if the JSON string is invalid with respect to ExamUserDTO
  */
  public static ExamUserDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExamUserDTO.class);
  }

 /**
  * Convert an instance of ExamUserDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

