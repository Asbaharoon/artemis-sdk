/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Exercise;
import org.openapitools.client.model.GetAllTextSubmissions200ResponseInner;
import org.openapitools.client.model.ProgrammingExerciseStudentParticipation;
import org.openapitools.client.model.Result;
import org.openapitools.client.model.SolutionProgrammingExerciseParticipation;
import org.openapitools.client.model.StudentParticipation;
import org.openapitools.client.model.TemplateProgrammingExerciseParticipation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Participation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class Participation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  /**
   * Gets or Sets initializationState
   */
  @JsonAdapter(InitializationStateEnum.Adapter.class)
  public enum InitializationStateEnum {
    UNINITIALIZED("UNINITIALIZED"),
    
    REPO_COPIED("REPO_COPIED"),
    
    REPO_CONFIGURED("REPO_CONFIGURED"),
    
    INACTIVE("INACTIVE"),
    
    BUILD_PLAN_COPIED("BUILD_PLAN_COPIED"),
    
    BUILD_PLAN_CONFIGURED("BUILD_PLAN_CONFIGURED"),
    
    INITIALIZED("INITIALIZED"),
    
    FINISHED("FINISHED");

    private String value;

    InitializationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InitializationStateEnum fromValue(String value) {
      for (InitializationStateEnum b : InitializationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InitializationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InitializationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InitializationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InitializationStateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INITIALIZATION_STATE = "initializationState";
  @SerializedName(SERIALIZED_NAME_INITIALIZATION_STATE)
  private InitializationStateEnum initializationState;

  public static final String SERIALIZED_NAME_INITIALIZATION_DATE = "initializationDate";
  @SerializedName(SERIALIZED_NAME_INITIALIZATION_DATE)
  private OffsetDateTime initializationDate;

  public static final String SERIALIZED_NAME_INDIVIDUAL_DUE_DATE = "individualDueDate";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_DUE_DATE)
  private OffsetDateTime individualDueDate;

  public static final String SERIALIZED_NAME_TEST_RUN = "testRun";
  @SerializedName(SERIALIZED_NAME_TEST_RUN)
  private Boolean testRun;

  public static final String SERIALIZED_NAME_EXERCISE = "exercise";
  @SerializedName(SERIALIZED_NAME_EXERCISE)
  private Exercise exercise;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private Set<Result> results = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SUBMISSIONS = "submissions";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONS)
  private Set<GetAllTextSubmissions200ResponseInner> submissions = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SUBMISSION_COUNT = "submissionCount";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_COUNT)
  private Integer submissionCount;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected String type;

  public Participation() {
    this.type = this.getClass().getSimpleName();
  }

  public Participation id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public Participation initializationState(InitializationStateEnum initializationState) {
    
    this.initializationState = initializationState;
    return this;
  }

   /**
   * Get initializationState
   * @return initializationState
  **/
  @javax.annotation.Nullable

  public InitializationStateEnum getInitializationState() {
    return initializationState;
  }


  public void setInitializationState(InitializationStateEnum initializationState) {
    this.initializationState = initializationState;
  }


  public Participation initializationDate(OffsetDateTime initializationDate) {
    
    this.initializationDate = initializationDate;
    return this;
  }

   /**
   * Get initializationDate
   * @return initializationDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getInitializationDate() {
    return initializationDate;
  }


  public void setInitializationDate(OffsetDateTime initializationDate) {
    this.initializationDate = initializationDate;
  }


  public Participation individualDueDate(OffsetDateTime individualDueDate) {
    
    this.individualDueDate = individualDueDate;
    return this;
  }

   /**
   * Get individualDueDate
   * @return individualDueDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getIndividualDueDate() {
    return individualDueDate;
  }


  public void setIndividualDueDate(OffsetDateTime individualDueDate) {
    this.individualDueDate = individualDueDate;
  }


  public Participation testRun(Boolean testRun) {
    
    this.testRun = testRun;
    return this;
  }

   /**
   * Get testRun
   * @return testRun
  **/
  @javax.annotation.Nullable

  public Boolean getTestRun() {
    return testRun;
  }


  public void setTestRun(Boolean testRun) {
    this.testRun = testRun;
  }


  public Participation exercise(Exercise exercise) {
    
    this.exercise = exercise;
    return this;
  }

   /**
   * Get exercise
   * @return exercise
  **/
  @javax.annotation.Nullable

  public Exercise getExercise() {
    return exercise;
  }


  public void setExercise(Exercise exercise) {
    this.exercise = exercise;
  }


  public Participation results(Set<Result> results) {
    
    this.results = results;
    return this;
  }

  public Participation addResultsItem(Result resultsItem) {
    if (this.results == null) {
      this.results = new LinkedHashSet<>();
    }
    this.results.add(resultsItem);
    return this;
  }

   /**
   * Get results
   * @return results
  **/
  @javax.annotation.Nullable

  public Set<Result> getResults() {
    return results;
  }


  public void setResults(Set<Result> results) {
    this.results = results;
  }


  public Participation submissions(Set<GetAllTextSubmissions200ResponseInner> submissions) {
    
    this.submissions = submissions;
    return this;
  }

  public Participation addSubmissionsItem(GetAllTextSubmissions200ResponseInner submissionsItem) {
    if (this.submissions == null) {
      this.submissions = new LinkedHashSet<>();
    }
    this.submissions.add(submissionsItem);
    return this;
  }

   /**
   * Get submissions
   * @return submissions
  **/
  @javax.annotation.Nullable

  public Set<GetAllTextSubmissions200ResponseInner> getSubmissions() {
    return submissions;
  }


  public void setSubmissions(Set<GetAllTextSubmissions200ResponseInner> submissions) {
    this.submissions = submissions;
  }


  public Participation submissionCount(Integer submissionCount) {
    
    this.submissionCount = submissionCount;
    return this;
  }

   /**
   * Get submissionCount
   * @return submissionCount
  **/
  @javax.annotation.Nullable

  public Integer getSubmissionCount() {
    return submissionCount;
  }


  public void setSubmissionCount(Integer submissionCount) {
    this.submissionCount = submissionCount;
  }


  public Participation type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Participation participation = (Participation) o;
    return Objects.equals(this.id, participation.id) &&
        Objects.equals(this.initializationState, participation.initializationState) &&
        Objects.equals(this.initializationDate, participation.initializationDate) &&
        Objects.equals(this.individualDueDate, participation.individualDueDate) &&
        Objects.equals(this.testRun, participation.testRun) &&
        Objects.equals(this.exercise, participation.exercise) &&
        Objects.equals(this.results, participation.results) &&
        Objects.equals(this.submissions, participation.submissions) &&
        Objects.equals(this.submissionCount, participation.submissionCount) &&
        Objects.equals(this.type, participation.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, initializationState, initializationDate, individualDueDate, testRun, exercise, results, submissions, submissionCount, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Participation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initializationState: ").append(toIndentedString(initializationState)).append("\n");
    sb.append("    initializationDate: ").append(toIndentedString(initializationDate)).append("\n");
    sb.append("    individualDueDate: ").append(toIndentedString(individualDueDate)).append("\n");
    sb.append("    testRun: ").append(toIndentedString(testRun)).append("\n");
    sb.append("    exercise: ").append(toIndentedString(exercise)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    submissions: ").append(toIndentedString(submissions)).append("\n");
    sb.append("    submissionCount: ").append(toIndentedString(submissionCount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("initializationState");
    openapiFields.add("initializationDate");
    openapiFields.add("individualDueDate");
    openapiFields.add("testRun");
    openapiFields.add("exercise");
    openapiFields.add("results");
    openapiFields.add("submissions");
    openapiFields.add("submissionCount");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Participation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Participation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Participation is not found in the empty JSON string", Participation.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonObj.get("type").getAsString();
      switch (discriminatorValue) {
        case "ProgrammingExerciseStudentParticipation":
          ProgrammingExerciseStudentParticipation.validateJsonObject(jsonObj);
          break;
        case "SolutionProgrammingExerciseParticipation":
          SolutionProgrammingExerciseParticipation.validateJsonObject(jsonObj);
          break;
        case "StudentParticipation":
          StudentParticipation.validateJsonObject(jsonObj);
          break;
        case "TemplateProgrammingExerciseParticipation":
          TemplateProgrammingExerciseParticipation.validateJsonObject(jsonObj);
          break;
        default: 
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of Participation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Participation
  * @throws IOException if the JSON string is invalid with respect to Participation
  */
  public static Participation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Participation.class);
  }

 /**
  * Convert an instance of Participation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

