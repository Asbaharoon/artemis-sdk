/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Course;
import org.openapitools.client.model.Post;
import org.openapitools.client.model.Reaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnswerPost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class AnswerPost {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_TOKENIZED_CONTENT = "tokenizedContent";
  @SerializedName(SERIALIZED_NAME_TOKENIZED_CONTENT)
  private String tokenizedContent;

  public static final String SERIALIZED_NAME_RESOLVES_POST = "resolvesPost";
  @SerializedName(SERIALIZED_NAME_RESOLVES_POST)
  private Boolean resolvesPost;

  public static final String SERIALIZED_NAME_REACTIONS = "reactions";
  @SerializedName(SERIALIZED_NAME_REACTIONS)
  private Set<Reaction> reactions = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_POST = "post";
  @SerializedName(SERIALIZED_NAME_POST)
  private Post post;

  public static final String SERIALIZED_NAME_COURSE_POSTING_BELONGS_TO = "coursePostingBelongsTo";
  @SerializedName(SERIALIZED_NAME_COURSE_POSTING_BELONGS_TO)
  private Course coursePostingBelongsTo;

  /**
   * Gets or Sets authorRole
   */
  @JsonAdapter(AuthorRoleEnum.Adapter.class)
  public enum AuthorRoleEnum {
    INSTRUCTOR("INSTRUCTOR"),
    
    TUTOR("TUTOR"),
    
    USER("USER");

    private String value;

    AuthorRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorRoleEnum fromValue(String value) {
      for (AuthorRoleEnum b : AuthorRoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorRoleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTHOR_ROLE = "authorRole";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ROLE)
  private AuthorRoleEnum authorRole;

  public AnswerPost() {
  }

  public AnswerPost id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public AnswerPost creationDate(OffsetDateTime creationDate) {
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public AnswerPost content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nullable

  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    this.content = content;
  }


  public AnswerPost tokenizedContent(String tokenizedContent) {
    
    this.tokenizedContent = tokenizedContent;
    return this;
  }

   /**
   * Get tokenizedContent
   * @return tokenizedContent
  **/
  @javax.annotation.Nullable

  public String getTokenizedContent() {
    return tokenizedContent;
  }


  public void setTokenizedContent(String tokenizedContent) {
    this.tokenizedContent = tokenizedContent;
  }


  public AnswerPost resolvesPost(Boolean resolvesPost) {
    
    this.resolvesPost = resolvesPost;
    return this;
  }

   /**
   * Get resolvesPost
   * @return resolvesPost
  **/
  @javax.annotation.Nullable

  public Boolean getResolvesPost() {
    return resolvesPost;
  }


  public void setResolvesPost(Boolean resolvesPost) {
    this.resolvesPost = resolvesPost;
  }


  public AnswerPost reactions(Set<Reaction> reactions) {
    
    this.reactions = reactions;
    return this;
  }

  public AnswerPost addReactionsItem(Reaction reactionsItem) {
    if (this.reactions == null) {
      this.reactions = new LinkedHashSet<>();
    }
    this.reactions.add(reactionsItem);
    return this;
  }

   /**
   * Get reactions
   * @return reactions
  **/
  @javax.annotation.Nullable

  public Set<Reaction> getReactions() {
    return reactions;
  }


  public void setReactions(Set<Reaction> reactions) {
    this.reactions = reactions;
  }


  public AnswerPost post(Post post) {
    
    this.post = post;
    return this;
  }

   /**
   * Get post
   * @return post
  **/
  @javax.annotation.Nullable

  public Post getPost() {
    return post;
  }


  public void setPost(Post post) {
    this.post = post;
  }


  public AnswerPost coursePostingBelongsTo(Course coursePostingBelongsTo) {
    
    this.coursePostingBelongsTo = coursePostingBelongsTo;
    return this;
  }

   /**
   * Get coursePostingBelongsTo
   * @return coursePostingBelongsTo
  **/
  @javax.annotation.Nullable

  public Course getCoursePostingBelongsTo() {
    return coursePostingBelongsTo;
  }


  public void setCoursePostingBelongsTo(Course coursePostingBelongsTo) {
    this.coursePostingBelongsTo = coursePostingBelongsTo;
  }


  public AnswerPost authorRole(AuthorRoleEnum authorRole) {
    
    this.authorRole = authorRole;
    return this;
  }

   /**
   * Get authorRole
   * @return authorRole
  **/
  @javax.annotation.Nullable

  public AuthorRoleEnum getAuthorRole() {
    return authorRole;
  }


  public void setAuthorRole(AuthorRoleEnum authorRole) {
    this.authorRole = authorRole;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnswerPost answerPost = (AnswerPost) o;
    return Objects.equals(this.id, answerPost.id) &&
        Objects.equals(this.creationDate, answerPost.creationDate) &&
        Objects.equals(this.content, answerPost.content) &&
        Objects.equals(this.tokenizedContent, answerPost.tokenizedContent) &&
        Objects.equals(this.resolvesPost, answerPost.resolvesPost) &&
        Objects.equals(this.reactions, answerPost.reactions) &&
        Objects.equals(this.post, answerPost.post) &&
        Objects.equals(this.coursePostingBelongsTo, answerPost.coursePostingBelongsTo) &&
        Objects.equals(this.authorRole, answerPost.authorRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, creationDate, content, tokenizedContent, resolvesPost, reactions, post, coursePostingBelongsTo, authorRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnswerPost {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    tokenizedContent: ").append(toIndentedString(tokenizedContent)).append("\n");
    sb.append("    resolvesPost: ").append(toIndentedString(resolvesPost)).append("\n");
    sb.append("    reactions: ").append(toIndentedString(reactions)).append("\n");
    sb.append("    post: ").append(toIndentedString(post)).append("\n");
    sb.append("    coursePostingBelongsTo: ").append(toIndentedString(coursePostingBelongsTo)).append("\n");
    sb.append("    authorRole: ").append(toIndentedString(authorRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("creationDate");
    openapiFields.add("content");
    openapiFields.add("tokenizedContent");
    openapiFields.add("resolvesPost");
    openapiFields.add("reactions");
    openapiFields.add("post");
    openapiFields.add("coursePostingBelongsTo");
    openapiFields.add("authorRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AnswerPost
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AnswerPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnswerPost is not found in the empty JSON string", AnswerPost.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AnswerPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnswerPost` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("tokenizedContent") != null && !jsonObj.get("tokenizedContent").isJsonNull()) && !jsonObj.get("tokenizedContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenizedContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenizedContent").toString()));
      }
      if (jsonObj.get("reactions") != null && !jsonObj.get("reactions").isJsonNull()) {
        JsonArray jsonArrayreactions = jsonObj.getAsJsonArray("reactions");
        if (jsonArrayreactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reactions` to be an array in the JSON string but got `%s`", jsonObj.get("reactions").toString()));
          }

          // validate the optional field `reactions` (array)
          for (int i = 0; i < jsonArrayreactions.size(); i++) {
            Reaction.validateJsonObject(jsonArrayreactions.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `post`
      if (jsonObj.get("post") != null && !jsonObj.get("post").isJsonNull()) {
        Post.validateJsonObject(jsonObj.getAsJsonObject("post"));
      }
      // validate the optional field `coursePostingBelongsTo`
      if (jsonObj.get("coursePostingBelongsTo") != null && !jsonObj.get("coursePostingBelongsTo").isJsonNull()) {
        Course.validateJsonObject(jsonObj.getAsJsonObject("coursePostingBelongsTo"));
      }
      if ((jsonObj.get("authorRole") != null && !jsonObj.get("authorRole").isJsonNull()) && !jsonObj.get("authorRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorRole").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnswerPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnswerPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnswerPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnswerPost.class));

       return (TypeAdapter<T>) new TypeAdapter<AnswerPost>() {
           @Override
           public void write(JsonWriter out, AnswerPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnswerPost read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AnswerPost given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AnswerPost
  * @throws IOException if the JSON string is invalid with respect to AnswerPost
  */
  public static AnswerPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnswerPost.class);
  }

 /**
  * Convert an instance of AnswerPost to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

