/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.GradeStep;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GradeStepsDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class GradeStepsDTO {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * Gets or Sets gradeType
   */
  @JsonAdapter(GradeTypeEnum.Adapter.class)
  public enum GradeTypeEnum {
    NONE("NONE"),
    
    BONUS("BONUS"),
    
    GRADE("GRADE");

    private String value;

    GradeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GradeTypeEnum fromValue(String value) {
      for (GradeTypeEnum b : GradeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GradeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GradeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GradeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GradeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GRADE_TYPE = "gradeType";
  @SerializedName(SERIALIZED_NAME_GRADE_TYPE)
  private GradeTypeEnum gradeType;

  public static final String SERIALIZED_NAME_GRADE_STEPS = "gradeSteps";
  @SerializedName(SERIALIZED_NAME_GRADE_STEPS)
  private Set<GradeStep> gradeSteps = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_MAX_POINTS = "maxPoints";
  @SerializedName(SERIALIZED_NAME_MAX_POINTS)
  private Integer maxPoints;

  public static final String SERIALIZED_NAME_PLAGIARISM_GRADE = "plagiarismGrade";
  @SerializedName(SERIALIZED_NAME_PLAGIARISM_GRADE)
  private String plagiarismGrade;

  public static final String SERIALIZED_NAME_NO_PARTICIPATION_GRADE = "noParticipationGrade";
  @SerializedName(SERIALIZED_NAME_NO_PARTICIPATION_GRADE)
  private String noParticipationGrade;

  public GradeStepsDTO() {
  }

  public GradeStepsDTO title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public GradeStepsDTO gradeType(GradeTypeEnum gradeType) {
    
    this.gradeType = gradeType;
    return this;
  }

   /**
   * Get gradeType
   * @return gradeType
  **/
  @javax.annotation.Nullable

  public GradeTypeEnum getGradeType() {
    return gradeType;
  }


  public void setGradeType(GradeTypeEnum gradeType) {
    this.gradeType = gradeType;
  }


  public GradeStepsDTO gradeSteps(Set<GradeStep> gradeSteps) {
    
    this.gradeSteps = gradeSteps;
    return this;
  }

  public GradeStepsDTO addGradeStepsItem(GradeStep gradeStepsItem) {
    if (this.gradeSteps == null) {
      this.gradeSteps = new LinkedHashSet<>();
    }
    this.gradeSteps.add(gradeStepsItem);
    return this;
  }

   /**
   * Get gradeSteps
   * @return gradeSteps
  **/
  @javax.annotation.Nullable

  public Set<GradeStep> getGradeSteps() {
    return gradeSteps;
  }


  public void setGradeSteps(Set<GradeStep> gradeSteps) {
    this.gradeSteps = gradeSteps;
  }


  public GradeStepsDTO maxPoints(Integer maxPoints) {
    
    this.maxPoints = maxPoints;
    return this;
  }

   /**
   * Get maxPoints
   * @return maxPoints
  **/
  @javax.annotation.Nullable

  public Integer getMaxPoints() {
    return maxPoints;
  }


  public void setMaxPoints(Integer maxPoints) {
    this.maxPoints = maxPoints;
  }


  public GradeStepsDTO plagiarismGrade(String plagiarismGrade) {
    
    this.plagiarismGrade = plagiarismGrade;
    return this;
  }

   /**
   * Get plagiarismGrade
   * @return plagiarismGrade
  **/
  @javax.annotation.Nullable

  public String getPlagiarismGrade() {
    return plagiarismGrade;
  }


  public void setPlagiarismGrade(String plagiarismGrade) {
    this.plagiarismGrade = plagiarismGrade;
  }


  public GradeStepsDTO noParticipationGrade(String noParticipationGrade) {
    
    this.noParticipationGrade = noParticipationGrade;
    return this;
  }

   /**
   * Get noParticipationGrade
   * @return noParticipationGrade
  **/
  @javax.annotation.Nullable

  public String getNoParticipationGrade() {
    return noParticipationGrade;
  }


  public void setNoParticipationGrade(String noParticipationGrade) {
    this.noParticipationGrade = noParticipationGrade;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GradeStepsDTO gradeStepsDTO = (GradeStepsDTO) o;
    return Objects.equals(this.title, gradeStepsDTO.title) &&
        Objects.equals(this.gradeType, gradeStepsDTO.gradeType) &&
        Objects.equals(this.gradeSteps, gradeStepsDTO.gradeSteps) &&
        Objects.equals(this.maxPoints, gradeStepsDTO.maxPoints) &&
        Objects.equals(this.plagiarismGrade, gradeStepsDTO.plagiarismGrade) &&
        Objects.equals(this.noParticipationGrade, gradeStepsDTO.noParticipationGrade);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, gradeType, gradeSteps, maxPoints, plagiarismGrade, noParticipationGrade);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GradeStepsDTO {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    gradeType: ").append(toIndentedString(gradeType)).append("\n");
    sb.append("    gradeSteps: ").append(toIndentedString(gradeSteps)).append("\n");
    sb.append("    maxPoints: ").append(toIndentedString(maxPoints)).append("\n");
    sb.append("    plagiarismGrade: ").append(toIndentedString(plagiarismGrade)).append("\n");
    sb.append("    noParticipationGrade: ").append(toIndentedString(noParticipationGrade)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("gradeType");
    openapiFields.add("gradeSteps");
    openapiFields.add("maxPoints");
    openapiFields.add("plagiarismGrade");
    openapiFields.add("noParticipationGrade");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GradeStepsDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GradeStepsDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GradeStepsDTO is not found in the empty JSON string", GradeStepsDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GradeStepsDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GradeStepsDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("gradeType") != null && !jsonObj.get("gradeType").isJsonNull()) && !jsonObj.get("gradeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gradeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gradeType").toString()));
      }
      if (jsonObj.get("gradeSteps") != null && !jsonObj.get("gradeSteps").isJsonNull()) {
        JsonArray jsonArraygradeSteps = jsonObj.getAsJsonArray("gradeSteps");
        if (jsonArraygradeSteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gradeSteps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gradeSteps` to be an array in the JSON string but got `%s`", jsonObj.get("gradeSteps").toString()));
          }

          // validate the optional field `gradeSteps` (array)
          for (int i = 0; i < jsonArraygradeSteps.size(); i++) {
            GradeStep.validateJsonObject(jsonArraygradeSteps.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("plagiarismGrade") != null && !jsonObj.get("plagiarismGrade").isJsonNull()) && !jsonObj.get("plagiarismGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plagiarismGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plagiarismGrade").toString()));
      }
      if ((jsonObj.get("noParticipationGrade") != null && !jsonObj.get("noParticipationGrade").isJsonNull()) && !jsonObj.get("noParticipationGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noParticipationGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noParticipationGrade").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GradeStepsDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GradeStepsDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GradeStepsDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GradeStepsDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<GradeStepsDTO>() {
           @Override
           public void write(JsonWriter out, GradeStepsDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GradeStepsDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GradeStepsDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GradeStepsDTO
  * @throws IOException if the JSON string is invalid with respect to GradeStepsDTO
  */
  public static GradeStepsDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GradeStepsDTO.class);
  }

 /**
  * Convert an instance of GradeStepsDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

