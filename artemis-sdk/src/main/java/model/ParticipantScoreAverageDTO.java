/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ParticipantScoreAverageDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class ParticipantScoreAverageDTO {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AVERAGE_SCORE = "averageScore";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SCORE)
  private Double averageScore;

  public static final String SERIALIZED_NAME_AVERAGE_RATED_SCORE = "averageRatedScore";
  @SerializedName(SERIALIZED_NAME_AVERAGE_RATED_SCORE)
  private Double averageRatedScore;

  public static final String SERIALIZED_NAME_AVERAGE_POINTS = "averagePoints";
  @SerializedName(SERIALIZED_NAME_AVERAGE_POINTS)
  private Double averagePoints;

  public static final String SERIALIZED_NAME_AVERAGE_RATED_POINTS = "averageRatedPoints";
  @SerializedName(SERIALIZED_NAME_AVERAGE_RATED_POINTS)
  private Double averageRatedPoints;

  public ParticipantScoreAverageDTO() {
  }

  public ParticipantScoreAverageDTO name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ParticipantScoreAverageDTO averageScore(Double averageScore) {
    
    this.averageScore = averageScore;
    return this;
  }

   /**
   * Get averageScore
   * @return averageScore
  **/
  @javax.annotation.Nullable

  public Double getAverageScore() {
    return averageScore;
  }


  public void setAverageScore(Double averageScore) {
    this.averageScore = averageScore;
  }


  public ParticipantScoreAverageDTO averageRatedScore(Double averageRatedScore) {
    
    this.averageRatedScore = averageRatedScore;
    return this;
  }

   /**
   * Get averageRatedScore
   * @return averageRatedScore
  **/
  @javax.annotation.Nullable

  public Double getAverageRatedScore() {
    return averageRatedScore;
  }


  public void setAverageRatedScore(Double averageRatedScore) {
    this.averageRatedScore = averageRatedScore;
  }


  public ParticipantScoreAverageDTO averagePoints(Double averagePoints) {
    
    this.averagePoints = averagePoints;
    return this;
  }

   /**
   * Get averagePoints
   * @return averagePoints
  **/
  @javax.annotation.Nullable

  public Double getAveragePoints() {
    return averagePoints;
  }


  public void setAveragePoints(Double averagePoints) {
    this.averagePoints = averagePoints;
  }


  public ParticipantScoreAverageDTO averageRatedPoints(Double averageRatedPoints) {
    
    this.averageRatedPoints = averageRatedPoints;
    return this;
  }

   /**
   * Get averageRatedPoints
   * @return averageRatedPoints
  **/
  @javax.annotation.Nullable

  public Double getAverageRatedPoints() {
    return averageRatedPoints;
  }


  public void setAverageRatedPoints(Double averageRatedPoints) {
    this.averageRatedPoints = averageRatedPoints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParticipantScoreAverageDTO participantScoreAverageDTO = (ParticipantScoreAverageDTO) o;
    return Objects.equals(this.name, participantScoreAverageDTO.name) &&
        Objects.equals(this.averageScore, participantScoreAverageDTO.averageScore) &&
        Objects.equals(this.averageRatedScore, participantScoreAverageDTO.averageRatedScore) &&
        Objects.equals(this.averagePoints, participantScoreAverageDTO.averagePoints) &&
        Objects.equals(this.averageRatedPoints, participantScoreAverageDTO.averageRatedPoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, averageScore, averageRatedScore, averagePoints, averageRatedPoints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParticipantScoreAverageDTO {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    averageScore: ").append(toIndentedString(averageScore)).append("\n");
    sb.append("    averageRatedScore: ").append(toIndentedString(averageRatedScore)).append("\n");
    sb.append("    averagePoints: ").append(toIndentedString(averagePoints)).append("\n");
    sb.append("    averageRatedPoints: ").append(toIndentedString(averageRatedPoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("averageScore");
    openapiFields.add("averageRatedScore");
    openapiFields.add("averagePoints");
    openapiFields.add("averageRatedPoints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ParticipantScoreAverageDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ParticipantScoreAverageDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParticipantScoreAverageDTO is not found in the empty JSON string", ParticipantScoreAverageDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ParticipantScoreAverageDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParticipantScoreAverageDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParticipantScoreAverageDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParticipantScoreAverageDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParticipantScoreAverageDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParticipantScoreAverageDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ParticipantScoreAverageDTO>() {
           @Override
           public void write(JsonWriter out, ParticipantScoreAverageDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParticipantScoreAverageDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ParticipantScoreAverageDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ParticipantScoreAverageDTO
  * @throws IOException if the JSON string is invalid with respect to ParticipantScoreAverageDTO
  */
  public static ParticipantScoreAverageDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParticipantScoreAverageDTO.class);
  }

 /**
  * Convert an instance of ParticipantScoreAverageDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

