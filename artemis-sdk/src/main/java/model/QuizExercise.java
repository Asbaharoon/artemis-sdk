/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;


/**
 * QuizExercise
 */
public class QuizExercise extends Exercise {


  private Boolean randomizeQuestionOrder;



  private Integer allowedNumberOfAttempts;



  private Integer remainingNumberOfAttempts;



  private Boolean isOpenForPractice;

  /**
   * Gets or Sets quizMode
   */
  public enum QuizModeEnum {
    SYNCHRONIZED("SYNCHRONIZED"),
    
    BATCHED("BATCHED"),
    
    INDIVIDUAL("INDIVIDUAL");

    private String value;

    QuizModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuizModeEnum fromValue(String value) {
      for (QuizModeEnum b : QuizModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }



  private QuizModeEnum quizMode;



  private Integer duration;



  private QuizPointStatistic quizPointStatistic;



  private List<QuizQuestion> quizQuestions = new ArrayList<>();



  private Set<QuizBatch> quizBatches = new LinkedHashSet<>();



  protected String type;



  private Boolean quizStarted;



  private Boolean quizEnded;

  public QuizExercise() {
    this.type = this.getClass().getSimpleName();
  }

  public QuizExercise randomizeQuestionOrder(Boolean randomizeQuestionOrder) {
    
    this.randomizeQuestionOrder = randomizeQuestionOrder;
    return this;
  }

   /**
   * Get randomizeQuestionOrder
   * @return randomizeQuestionOrder
  **/


  public Boolean getRandomizeQuestionOrder() {
    return randomizeQuestionOrder;
  }


  public void setRandomizeQuestionOrder(Boolean randomizeQuestionOrder) {
    this.randomizeQuestionOrder = randomizeQuestionOrder;
  }


  public QuizExercise allowedNumberOfAttempts(Integer allowedNumberOfAttempts) {
    
    this.allowedNumberOfAttempts = allowedNumberOfAttempts;
    return this;
  }

   /**
   * Get allowedNumberOfAttempts
   * @return allowedNumberOfAttempts
  **/


  public Integer getAllowedNumberOfAttempts() {
    return allowedNumberOfAttempts;
  }


  public void setAllowedNumberOfAttempts(Integer allowedNumberOfAttempts) {
    this.allowedNumberOfAttempts = allowedNumberOfAttempts;
  }


  public QuizExercise remainingNumberOfAttempts(Integer remainingNumberOfAttempts) {
    
    this.remainingNumberOfAttempts = remainingNumberOfAttempts;
    return this;
  }

   /**
   * Get remainingNumberOfAttempts
   * @return remainingNumberOfAttempts
  **/


  public Integer getRemainingNumberOfAttempts() {
    return remainingNumberOfAttempts;
  }


  public void setRemainingNumberOfAttempts(Integer remainingNumberOfAttempts) {
    this.remainingNumberOfAttempts = remainingNumberOfAttempts;
  }


  public QuizExercise isOpenForPractice(Boolean isOpenForPractice) {
    
    this.isOpenForPractice = isOpenForPractice;
    return this;
  }

   /**
   * Get isOpenForPractice
   * @return isOpenForPractice
  **/


  public Boolean getIsOpenForPractice() {
    return isOpenForPractice;
  }


  public void setIsOpenForPractice(Boolean isOpenForPractice) {
    this.isOpenForPractice = isOpenForPractice;
  }


  public QuizExercise quizMode(QuizModeEnum quizMode) {
    
    this.quizMode = quizMode;
    return this;
  }

   /**
   * Get quizMode
   * @return quizMode
  **/


  public QuizModeEnum getQuizMode() {
    return quizMode;
  }


  public void setQuizMode(QuizModeEnum quizMode) {
    this.quizMode = quizMode;
  }


  public QuizExercise duration(Integer duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/


  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public QuizExercise quizPointStatistic(QuizPointStatistic quizPointStatistic) {
    
    this.quizPointStatistic = quizPointStatistic;
    return this;
  }

   /**
   * Get quizPointStatistic
   * @return quizPointStatistic
  **/


  public QuizPointStatistic getQuizPointStatistic() {
    return quizPointStatistic;
  }


  public void setQuizPointStatistic(QuizPointStatistic quizPointStatistic) {
    this.quizPointStatistic = quizPointStatistic;
  }


  public QuizExercise quizQuestions(List<QuizQuestion> quizQuestions) {
    
    this.quizQuestions = quizQuestions;
    return this;
  }

  public QuizExercise addQuizQuestionsItem(QuizQuestion quizQuestionsItem) {
    if (this.quizQuestions == null) {
      this.quizQuestions = new ArrayList<>();
    }
    this.quizQuestions.add(quizQuestionsItem);
    return this;
  }

   /**
   * Get quizQuestions
   * @return quizQuestions
  **/


  public List<QuizQuestion> getQuizQuestions() {
    return quizQuestions;
  }


  public void setQuizQuestions(List<QuizQuestion> quizQuestions) {
    this.quizQuestions = quizQuestions;
  }


  public QuizExercise quizBatches(Set<QuizBatch> quizBatches) {
    
    this.quizBatches = quizBatches;
    return this;
  }

  public QuizExercise addQuizBatchesItem(QuizBatch quizBatchesItem) {
    if (this.quizBatches == null) {
      this.quizBatches = new LinkedHashSet<>();
    }
    this.quizBatches.add(quizBatchesItem);
    return this;
  }

   /**
   * Get quizBatches
   * @return quizBatches
  **/


  public Set<QuizBatch> getQuizBatches() {
    return quizBatches;
  }


  public void setQuizBatches(Set<QuizBatch> quizBatches) {
    this.quizBatches = quizBatches;
  }


  public QuizExercise type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/


  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public QuizExercise quizStarted(Boolean quizStarted) {
    
    this.quizStarted = quizStarted;
    return this;
  }

   /**
   * Get quizStarted
   * @return quizStarted
  **/


  public Boolean getQuizStarted() {
    return quizStarted;
  }


  public void setQuizStarted(Boolean quizStarted) {
    this.quizStarted = quizStarted;
  }


  public QuizExercise quizEnded(Boolean quizEnded) {
    
    this.quizEnded = quizEnded;
    return this;
  }

   /**
   * Get quizEnded
   * @return quizEnded
  **/


  public Boolean getQuizEnded() {
    return quizEnded;
  }


  public void setQuizEnded(Boolean quizEnded) {
    this.quizEnded = quizEnded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuizExercise quizExercise = (QuizExercise) o;
    return Objects.equals(this.randomizeQuestionOrder, quizExercise.randomizeQuestionOrder) &&
        Objects.equals(this.allowedNumberOfAttempts, quizExercise.allowedNumberOfAttempts) &&
        Objects.equals(this.remainingNumberOfAttempts, quizExercise.remainingNumberOfAttempts) &&
        Objects.equals(this.isOpenForPractice, quizExercise.isOpenForPractice) &&
        Objects.equals(this.quizMode, quizExercise.quizMode) &&
        Objects.equals(this.duration, quizExercise.duration) &&
        Objects.equals(this.quizPointStatistic, quizExercise.quizPointStatistic) &&
        Objects.equals(this.quizQuestions, quizExercise.quizQuestions) &&
        Objects.equals(this.quizBatches, quizExercise.quizBatches) &&
        Objects.equals(this.type, quizExercise.type) &&
        Objects.equals(this.quizStarted, quizExercise.quizStarted) &&
        Objects.equals(this.quizEnded, quizExercise.quizEnded) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(randomizeQuestionOrder, allowedNumberOfAttempts, remainingNumberOfAttempts, isOpenForPractice, quizMode, duration, quizPointStatistic, quizQuestions, quizBatches, type, quizStarted, quizEnded, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuizExercise {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    randomizeQuestionOrder: ").append(toIndentedString(randomizeQuestionOrder)).append("\n");
    sb.append("    allowedNumberOfAttempts: ").append(toIndentedString(allowedNumberOfAttempts)).append("\n");
    sb.append("    remainingNumberOfAttempts: ").append(toIndentedString(remainingNumberOfAttempts)).append("\n");
    sb.append("    isOpenForPractice: ").append(toIndentedString(isOpenForPractice)).append("\n");
    sb.append("    quizMode: ").append(toIndentedString(quizMode)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    quizPointStatistic: ").append(toIndentedString(quizPointStatistic)).append("\n");
    sb.append("    quizQuestions: ").append(toIndentedString(quizQuestions)).append("\n");
    sb.append("    quizBatches: ").append(toIndentedString(quizBatches)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    quizStarted: ").append(toIndentedString(quizStarted)).append("\n");
    sb.append("    quizEnded: ").append(toIndentedString(quizEnded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

