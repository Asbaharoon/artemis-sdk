/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.CoverageReport;
import org.openapitools.client.model.TestwiseCoverageReportEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CoverageFileReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class CoverageFileReport {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_FULL_REPORT = "fullReport";
  @SerializedName(SERIALIZED_NAME_FULL_REPORT)
  private CoverageReport fullReport;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_LINE_COUNT = "lineCount";
  @SerializedName(SERIALIZED_NAME_LINE_COUNT)
  private Integer lineCount;

  public static final String SERIALIZED_NAME_COVERED_LINE_COUNT = "coveredLineCount";
  @SerializedName(SERIALIZED_NAME_COVERED_LINE_COUNT)
  private Integer coveredLineCount;

  public static final String SERIALIZED_NAME_TESTWISE_COVERAGE_ENTRIES = "testwiseCoverageEntries";
  @SerializedName(SERIALIZED_NAME_TESTWISE_COVERAGE_ENTRIES)
  private Set<TestwiseCoverageReportEntry> testwiseCoverageEntries = new LinkedHashSet<>();

  public CoverageFileReport() {
  }

  public CoverageFileReport id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public CoverageFileReport fullReport(CoverageReport fullReport) {
    
    this.fullReport = fullReport;
    return this;
  }

   /**
   * Get fullReport
   * @return fullReport
  **/
  @javax.annotation.Nullable

  public CoverageReport getFullReport() {
    return fullReport;
  }


  public void setFullReport(CoverageReport fullReport) {
    this.fullReport = fullReport;
  }


  public CoverageFileReport filePath(String filePath) {
    
    this.filePath = filePath;
    return this;
  }

   /**
   * Get filePath
   * @return filePath
  **/
  @javax.annotation.Nullable

  public String getFilePath() {
    return filePath;
  }


  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public CoverageFileReport lineCount(Integer lineCount) {
    
    this.lineCount = lineCount;
    return this;
  }

   /**
   * Get lineCount
   * @return lineCount
  **/
  @javax.annotation.Nullable

  public Integer getLineCount() {
    return lineCount;
  }


  public void setLineCount(Integer lineCount) {
    this.lineCount = lineCount;
  }


  public CoverageFileReport coveredLineCount(Integer coveredLineCount) {
    
    this.coveredLineCount = coveredLineCount;
    return this;
  }

   /**
   * Get coveredLineCount
   * @return coveredLineCount
  **/
  @javax.annotation.Nullable

  public Integer getCoveredLineCount() {
    return coveredLineCount;
  }


  public void setCoveredLineCount(Integer coveredLineCount) {
    this.coveredLineCount = coveredLineCount;
  }


  public CoverageFileReport testwiseCoverageEntries(Set<TestwiseCoverageReportEntry> testwiseCoverageEntries) {
    
    this.testwiseCoverageEntries = testwiseCoverageEntries;
    return this;
  }

  public CoverageFileReport addTestwiseCoverageEntriesItem(TestwiseCoverageReportEntry testwiseCoverageEntriesItem) {
    if (this.testwiseCoverageEntries == null) {
      this.testwiseCoverageEntries = new LinkedHashSet<>();
    }
    this.testwiseCoverageEntries.add(testwiseCoverageEntriesItem);
    return this;
  }

   /**
   * Get testwiseCoverageEntries
   * @return testwiseCoverageEntries
  **/
  @javax.annotation.Nullable

  public Set<TestwiseCoverageReportEntry> getTestwiseCoverageEntries() {
    return testwiseCoverageEntries;
  }


  public void setTestwiseCoverageEntries(Set<TestwiseCoverageReportEntry> testwiseCoverageEntries) {
    this.testwiseCoverageEntries = testwiseCoverageEntries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoverageFileReport coverageFileReport = (CoverageFileReport) o;
    return Objects.equals(this.id, coverageFileReport.id) &&
        Objects.equals(this.fullReport, coverageFileReport.fullReport) &&
        Objects.equals(this.filePath, coverageFileReport.filePath) &&
        Objects.equals(this.lineCount, coverageFileReport.lineCount) &&
        Objects.equals(this.coveredLineCount, coverageFileReport.coveredLineCount) &&
        Objects.equals(this.testwiseCoverageEntries, coverageFileReport.testwiseCoverageEntries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, fullReport, filePath, lineCount, coveredLineCount, testwiseCoverageEntries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoverageFileReport {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fullReport: ").append(toIndentedString(fullReport)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    lineCount: ").append(toIndentedString(lineCount)).append("\n");
    sb.append("    coveredLineCount: ").append(toIndentedString(coveredLineCount)).append("\n");
    sb.append("    testwiseCoverageEntries: ").append(toIndentedString(testwiseCoverageEntries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("fullReport");
    openapiFields.add("filePath");
    openapiFields.add("lineCount");
    openapiFields.add("coveredLineCount");
    openapiFields.add("testwiseCoverageEntries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CoverageFileReport
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CoverageFileReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoverageFileReport is not found in the empty JSON string", CoverageFileReport.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CoverageFileReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoverageFileReport` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `fullReport`
      if (jsonObj.get("fullReport") != null && !jsonObj.get("fullReport").isJsonNull()) {
        CoverageReport.validateJsonObject(jsonObj.getAsJsonObject("fullReport"));
      }
      if ((jsonObj.get("filePath") != null && !jsonObj.get("filePath").isJsonNull()) && !jsonObj.get("filePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filePath").toString()));
      }
      if (jsonObj.get("testwiseCoverageEntries") != null && !jsonObj.get("testwiseCoverageEntries").isJsonNull()) {
        JsonArray jsonArraytestwiseCoverageEntries = jsonObj.getAsJsonArray("testwiseCoverageEntries");
        if (jsonArraytestwiseCoverageEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testwiseCoverageEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testwiseCoverageEntries` to be an array in the JSON string but got `%s`", jsonObj.get("testwiseCoverageEntries").toString()));
          }

          // validate the optional field `testwiseCoverageEntries` (array)
          for (int i = 0; i < jsonArraytestwiseCoverageEntries.size(); i++) {
            TestwiseCoverageReportEntry.validateJsonObject(jsonArraytestwiseCoverageEntries.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoverageFileReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoverageFileReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoverageFileReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoverageFileReport.class));

       return (TypeAdapter<T>) new TypeAdapter<CoverageFileReport>() {
           @Override
           public void write(JsonWriter out, CoverageFileReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoverageFileReport read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoverageFileReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoverageFileReport
  * @throws IOException if the JSON string is invalid with respect to CoverageFileReport
  */
  public static CoverageFileReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoverageFileReport.class);
  }

 /**
  * Convert an instance of CoverageFileReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

