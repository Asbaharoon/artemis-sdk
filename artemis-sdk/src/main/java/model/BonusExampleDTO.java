/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BonusExampleDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class BonusExampleDTO {
  public static final String SERIALIZED_NAME_STUDENT_POINTS_OF_BONUS_TO = "studentPointsOfBonusTo";
  @SerializedName(SERIALIZED_NAME_STUDENT_POINTS_OF_BONUS_TO)
  private Double studentPointsOfBonusTo;

  public static final String SERIALIZED_NAME_STUDENT_POINTS_OF_BONUS_SOURCE = "studentPointsOfBonusSource";
  @SerializedName(SERIALIZED_NAME_STUDENT_POINTS_OF_BONUS_SOURCE)
  private Double studentPointsOfBonusSource;

  public static final String SERIALIZED_NAME_EXAM_GRADE = "examGrade";
  @SerializedName(SERIALIZED_NAME_EXAM_GRADE)
  private String examGrade;

  public static final String SERIALIZED_NAME_BONUS_GRADE = "bonusGrade";
  @SerializedName(SERIALIZED_NAME_BONUS_GRADE)
  private Double bonusGrade;

  public static final String SERIALIZED_NAME_FINAL_POINTS = "finalPoints";
  @SerializedName(SERIALIZED_NAME_FINAL_POINTS)
  private Double finalPoints;

  public static final String SERIALIZED_NAME_FINAL_GRADE = "finalGrade";
  @SerializedName(SERIALIZED_NAME_FINAL_GRADE)
  private String finalGrade;

  public static final String SERIALIZED_NAME_EXCEEDS_MAX = "exceedsMax";
  @SerializedName(SERIALIZED_NAME_EXCEEDS_MAX)
  private Boolean exceedsMax;

  public BonusExampleDTO() {
  }

  public BonusExampleDTO studentPointsOfBonusTo(Double studentPointsOfBonusTo) {
    
    this.studentPointsOfBonusTo = studentPointsOfBonusTo;
    return this;
  }

   /**
   * Get studentPointsOfBonusTo
   * @return studentPointsOfBonusTo
  **/
  @javax.annotation.Nullable

  public Double getStudentPointsOfBonusTo() {
    return studentPointsOfBonusTo;
  }


  public void setStudentPointsOfBonusTo(Double studentPointsOfBonusTo) {
    this.studentPointsOfBonusTo = studentPointsOfBonusTo;
  }


  public BonusExampleDTO studentPointsOfBonusSource(Double studentPointsOfBonusSource) {
    
    this.studentPointsOfBonusSource = studentPointsOfBonusSource;
    return this;
  }

   /**
   * Get studentPointsOfBonusSource
   * @return studentPointsOfBonusSource
  **/
  @javax.annotation.Nullable

  public Double getStudentPointsOfBonusSource() {
    return studentPointsOfBonusSource;
  }


  public void setStudentPointsOfBonusSource(Double studentPointsOfBonusSource) {
    this.studentPointsOfBonusSource = studentPointsOfBonusSource;
  }


  public BonusExampleDTO examGrade(String examGrade) {
    
    this.examGrade = examGrade;
    return this;
  }

   /**
   * Get examGrade
   * @return examGrade
  **/
  @javax.annotation.Nullable

  public String getExamGrade() {
    return examGrade;
  }


  public void setExamGrade(String examGrade) {
    this.examGrade = examGrade;
  }


  public BonusExampleDTO bonusGrade(Double bonusGrade) {
    
    this.bonusGrade = bonusGrade;
    return this;
  }

   /**
   * Get bonusGrade
   * @return bonusGrade
  **/
  @javax.annotation.Nullable

  public Double getBonusGrade() {
    return bonusGrade;
  }


  public void setBonusGrade(Double bonusGrade) {
    this.bonusGrade = bonusGrade;
  }


  public BonusExampleDTO finalPoints(Double finalPoints) {
    
    this.finalPoints = finalPoints;
    return this;
  }

   /**
   * Get finalPoints
   * @return finalPoints
  **/
  @javax.annotation.Nullable

  public Double getFinalPoints() {
    return finalPoints;
  }


  public void setFinalPoints(Double finalPoints) {
    this.finalPoints = finalPoints;
  }


  public BonusExampleDTO finalGrade(String finalGrade) {
    
    this.finalGrade = finalGrade;
    return this;
  }

   /**
   * Get finalGrade
   * @return finalGrade
  **/
  @javax.annotation.Nullable

  public String getFinalGrade() {
    return finalGrade;
  }


  public void setFinalGrade(String finalGrade) {
    this.finalGrade = finalGrade;
  }


  public BonusExampleDTO exceedsMax(Boolean exceedsMax) {
    
    this.exceedsMax = exceedsMax;
    return this;
  }

   /**
   * Get exceedsMax
   * @return exceedsMax
  **/
  @javax.annotation.Nullable

  public Boolean getExceedsMax() {
    return exceedsMax;
  }


  public void setExceedsMax(Boolean exceedsMax) {
    this.exceedsMax = exceedsMax;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BonusExampleDTO bonusExampleDTO = (BonusExampleDTO) o;
    return Objects.equals(this.studentPointsOfBonusTo, bonusExampleDTO.studentPointsOfBonusTo) &&
        Objects.equals(this.studentPointsOfBonusSource, bonusExampleDTO.studentPointsOfBonusSource) &&
        Objects.equals(this.examGrade, bonusExampleDTO.examGrade) &&
        Objects.equals(this.bonusGrade, bonusExampleDTO.bonusGrade) &&
        Objects.equals(this.finalPoints, bonusExampleDTO.finalPoints) &&
        Objects.equals(this.finalGrade, bonusExampleDTO.finalGrade) &&
        Objects.equals(this.exceedsMax, bonusExampleDTO.exceedsMax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(studentPointsOfBonusTo, studentPointsOfBonusSource, examGrade, bonusGrade, finalPoints, finalGrade, exceedsMax);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BonusExampleDTO {\n");
    sb.append("    studentPointsOfBonusTo: ").append(toIndentedString(studentPointsOfBonusTo)).append("\n");
    sb.append("    studentPointsOfBonusSource: ").append(toIndentedString(studentPointsOfBonusSource)).append("\n");
    sb.append("    examGrade: ").append(toIndentedString(examGrade)).append("\n");
    sb.append("    bonusGrade: ").append(toIndentedString(bonusGrade)).append("\n");
    sb.append("    finalPoints: ").append(toIndentedString(finalPoints)).append("\n");
    sb.append("    finalGrade: ").append(toIndentedString(finalGrade)).append("\n");
    sb.append("    exceedsMax: ").append(toIndentedString(exceedsMax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("studentPointsOfBonusTo");
    openapiFields.add("studentPointsOfBonusSource");
    openapiFields.add("examGrade");
    openapiFields.add("bonusGrade");
    openapiFields.add("finalPoints");
    openapiFields.add("finalGrade");
    openapiFields.add("exceedsMax");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BonusExampleDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BonusExampleDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BonusExampleDTO is not found in the empty JSON string", BonusExampleDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BonusExampleDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BonusExampleDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("examGrade") != null && !jsonObj.get("examGrade").isJsonNull()) && !jsonObj.get("examGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `examGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("examGrade").toString()));
      }
      if ((jsonObj.get("finalGrade") != null && !jsonObj.get("finalGrade").isJsonNull()) && !jsonObj.get("finalGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finalGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finalGrade").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BonusExampleDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BonusExampleDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BonusExampleDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BonusExampleDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<BonusExampleDTO>() {
           @Override
           public void write(JsonWriter out, BonusExampleDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BonusExampleDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BonusExampleDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BonusExampleDTO
  * @throws IOException if the JSON string is invalid with respect to BonusExampleDTO
  */
  public static BonusExampleDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BonusExampleDTO.class);
  }

 /**
  * Convert an instance of BonusExampleDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

