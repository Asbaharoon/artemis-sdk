/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Feedback;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FeedbackConflict
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T16:35:01.729286Z[Etc/UTC]")
public class FeedbackConflict {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_CONFLICT = "conflict";
  @SerializedName(SERIALIZED_NAME_CONFLICT)
  private Boolean conflict;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_SOLVED_AT = "solvedAt";
  @SerializedName(SERIALIZED_NAME_SOLVED_AT)
  private OffsetDateTime solvedAt;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    COMMENT("INCONSISTENT_COMMENT"),
    
    SCORE("INCONSISTENT_SCORE"),
    
    FEEDBACK("INCONSISTENT_FEEDBACK");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_FIRST_FEEDBACK = "firstFeedback";
  @SerializedName(SERIALIZED_NAME_FIRST_FEEDBACK)
  private Feedback firstFeedback;

  public static final String SERIALIZED_NAME_SECOND_FEEDBACK = "secondFeedback";
  @SerializedName(SERIALIZED_NAME_SECOND_FEEDBACK)
  private Feedback secondFeedback;

  public static final String SERIALIZED_NAME_DISCARD = "discard";
  @SerializedName(SERIALIZED_NAME_DISCARD)
  private Boolean discard;

  public FeedbackConflict() {
  }

  public FeedbackConflict id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public FeedbackConflict conflict(Boolean conflict) {
    
    this.conflict = conflict;
    return this;
  }

   /**
   * Get conflict
   * @return conflict
  **/
  @javax.annotation.Nullable

  public Boolean getConflict() {
    return conflict;
  }


  public void setConflict(Boolean conflict) {
    this.conflict = conflict;
  }


  public FeedbackConflict createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public FeedbackConflict solvedAt(OffsetDateTime solvedAt) {
    
    this.solvedAt = solvedAt;
    return this;
  }

   /**
   * Get solvedAt
   * @return solvedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getSolvedAt() {
    return solvedAt;
  }


  public void setSolvedAt(OffsetDateTime solvedAt) {
    this.solvedAt = solvedAt;
  }


  public FeedbackConflict type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public FeedbackConflict firstFeedback(Feedback firstFeedback) {
    
    this.firstFeedback = firstFeedback;
    return this;
  }

   /**
   * Get firstFeedback
   * @return firstFeedback
  **/
  @javax.annotation.Nullable

  public Feedback getFirstFeedback() {
    return firstFeedback;
  }


  public void setFirstFeedback(Feedback firstFeedback) {
    this.firstFeedback = firstFeedback;
  }


  public FeedbackConflict secondFeedback(Feedback secondFeedback) {
    
    this.secondFeedback = secondFeedback;
    return this;
  }

   /**
   * Get secondFeedback
   * @return secondFeedback
  **/
  @javax.annotation.Nullable

  public Feedback getSecondFeedback() {
    return secondFeedback;
  }


  public void setSecondFeedback(Feedback secondFeedback) {
    this.secondFeedback = secondFeedback;
  }


  public FeedbackConflict discard(Boolean discard) {
    
    this.discard = discard;
    return this;
  }

   /**
   * Get discard
   * @return discard
  **/
  @javax.annotation.Nullable

  public Boolean getDiscard() {
    return discard;
  }


  public void setDiscard(Boolean discard) {
    this.discard = discard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedbackConflict feedbackConflict = (FeedbackConflict) o;
    return Objects.equals(this.id, feedbackConflict.id) &&
        Objects.equals(this.conflict, feedbackConflict.conflict) &&
        Objects.equals(this.createdAt, feedbackConflict.createdAt) &&
        Objects.equals(this.solvedAt, feedbackConflict.solvedAt) &&
        Objects.equals(this.type, feedbackConflict.type) &&
        Objects.equals(this.firstFeedback, feedbackConflict.firstFeedback) &&
        Objects.equals(this.secondFeedback, feedbackConflict.secondFeedback) &&
        Objects.equals(this.discard, feedbackConflict.discard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, conflict, createdAt, solvedAt, type, firstFeedback, secondFeedback, discard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedbackConflict {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    conflict: ").append(toIndentedString(conflict)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    solvedAt: ").append(toIndentedString(solvedAt)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    firstFeedback: ").append(toIndentedString(firstFeedback)).append("\n");
    sb.append("    secondFeedback: ").append(toIndentedString(secondFeedback)).append("\n");
    sb.append("    discard: ").append(toIndentedString(discard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("conflict");
    openapiFields.add("createdAt");
    openapiFields.add("solvedAt");
    openapiFields.add("type");
    openapiFields.add("firstFeedback");
    openapiFields.add("secondFeedback");
    openapiFields.add("discard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FeedbackConflict
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FeedbackConflict.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedbackConflict is not found in the empty JSON string", FeedbackConflict.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FeedbackConflict.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeedbackConflict` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `firstFeedback`
      if (jsonObj.get("firstFeedback") != null && !jsonObj.get("firstFeedback").isJsonNull()) {
        Feedback.validateJsonObject(jsonObj.getAsJsonObject("firstFeedback"));
      }
      // validate the optional field `secondFeedback`
      if (jsonObj.get("secondFeedback") != null && !jsonObj.get("secondFeedback").isJsonNull()) {
        Feedback.validateJsonObject(jsonObj.getAsJsonObject("secondFeedback"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedbackConflict.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedbackConflict' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedbackConflict> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedbackConflict.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedbackConflict>() {
           @Override
           public void write(JsonWriter out, FeedbackConflict value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedbackConflict read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeedbackConflict given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeedbackConflict
  * @throws IOException if the JSON string is invalid with respect to FeedbackConflict
  */
  public static FeedbackConflict fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedbackConflict.class);
  }

 /**
  * Convert an instance of FeedbackConflict to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

